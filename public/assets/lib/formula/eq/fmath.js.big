FMATH = (function () {
  function dd() {
    this.style = new du();
    this.settings = new cw();
    this.beanStructure;
    this.canvasElem;
    this.style.setDefaultValues(this.settings);
    this.panelStructure;
    this.scale = 1
  }
  
  dd.prototype.drawImage = function (fw, fx) {
    this.canvasElem = fw;
    this.drawFormula(fx)
  };
  dd.prototype.convertLatexToMathML = function (fw) {
    return fq.convertToMathML(fw)
  };
  dd.prototype.convertMathMLToLatex = function (fw) {
    return a5.convertToLatex(fw)
  };
  dd.prototype.convertWordToMathML = function (fw, fx) {
    dB.getMathMLFromDocStream(fw, fx)
  };
  dd.prototype.downloadWordFromMathML = function (fw, fx) {
    dB.createDownloadForWord(fw, fx)
  };
  dd.prototype.drawFormula = function (fw) {
    this.beanStructure = c9.createBeanStructureStyle(fw, this.settings, this.style);
    if (this.style.getColor() == null) {
      this.style.setColor("black")
    }
    var fx = this;
    aD.loadRessourcesFor(this.beanStructure, function () {
      fx.drawFormulaOnPanel()
    })
  };
  dd.prototype.drawFormulaOnPanel = function () {
    this.panelStructure = di.generatePanelStructure(this.beanStructure, null);
    this.panelStructure.setScaleView(this.scale);
    this.drawOnPanel()
  };
  dd.prototype.scaleFormula = function (fw) {
    this.scale = fw;
    this.panelStructure.setScaleView(this.scale);
    this.drawOnPanel()
  };
  dd.prototype.drawOnPanel = function () {
    this.panelStructure.calculateDimension();
    var fw = new by(this.panelStructure);
    fw.drawImage(this.canvasElem);
    dd.fireEvent(this.canvasElem, "imageChanged")
  };
  dd.fireEvent = function (fx, fy) {
    if (document.createEvent) {
      var fw = document.createEvent("Event");
      fw.initEvent(fy, true, true);
      fx.dispatchEvent(fw)
    } else {
      fx.dispatchEvent(new CustomEvent(fy))
    }
  };
  dd.prototype.setSelectedPanel = function (fx, fy, fB, fz) {
    if (fB != null) {
      var fA = fB.getBean();
      fA.getStyle().setBgcolor(fz)
    }
    if (fx != null) {
      var fw = fx.getBean();
      var fz = fw.getAttribute("mathbackground");
      fw.getStyle().setBgcolor(fy);
      this.drawOnPanel();
      return fz
    } else {
      this.drawOnPanel();
      return null
    }
  };
  dd.prototype.getPanelsForXY = function (fw, fx) {
    return this.loadPanelsForXY(fw, fx, this.panelStructure)
  };
  dd.prototype.loadPanelsForXY = function (fw, fD, fA) {
    var fB = new aT();
    this.addMathMLFromPanel(fB, fA);
    for (var fz = 0; fz < fA.contenu.getPanelChildren().size(); fz++) {
      var fC = fA.contenu.getPanelChildren().get(fz);
      if (fC instanceof bo) {
        continue
      }
      if (fC.getX() > fw) {
        continue
      }
      if (fC.getY() > fD) {
        continue
      }
      if ((fC.getX() + fC.getWidth()) < fw) {
        continue
      }
      if ((fC.getY() + fC.getHeight()) < fD) {
        continue
      }
      var fx = this.loadPanelsForXY(fw - fC.getX(), fD - fC.getY(), fC);
      for (var fy = 0; fy < fx.size(); fy++) {
        fB.add(fx.get(fy))
      }
    }
    return fB
  };
  dd.prototype.addMathMLFromPanel = function (fy, fx) {
    var fw = fx.getBean();
    fy.add(fx)
  };
  dd.prototype.getSelectedPanel = function () {
    var fw = this.selectSelectedPanel(this.panelStructure);
    if (fw != null) {
      return this.buildList(fw)
    }
    return null
  };
  dd.prototype.selectSelectedPanel = function (fz) {
    var fx = fz.getBean();
    if (fx.getAttribute("editorSelected") != null) {
      var fA = fx.getAttribute("editorSelected");
      if (fA.length > 0) {
        fx.clearAttribute("editorSelected");
        return fz
      }
    }
    for (var fy = 0; fy < fz.contenu.getPanelChildren().size(); fy++) {
      var fB = fz.contenu.getPanelChildren().get(fy);
      if (fB instanceof bo) {
        continue
      }
      var fw = this.selectSelectedPanel(fB);
      if (fw != null) {
        return fw
      }
    }
    return null
  };
  dd.prototype.getMathML_selectFirstChild = function (fx) {
    if (fx == null) {
      return null
    }
    var fz = new aT();
    var fB = null;
    for (var fy = 0; fy < fx.contenu.getPanelChildren().size(); fy++) {
      var fA = fx.contenu.getPanelChildren().get(fy);
      if (fA instanceof bo) {
        continue
      }
      if (fA instanceof ae) {
        var fw = this.getMathML_selectFirstChild(fA);
        if (fw == null || fw.size() == 0) {
          continue
        }
        fA = fw.get(fw.size() - 1)
      }
      fB = fA;
      break
    }
    if (fB == null) {
      return null
    }
    return this.buildList(fB)
  };
  dd.prototype.getMathML_getLeftSiblingList = function (fw) {
    if (fw == null) {
      return null
    }
    var fz = new aT();
    var fA = fw.getParent();
    if (fA == null) {
      return null
    }
    var fy = null;
    var fC = null;
    for (var fx = 0; fx < fA.contenu.getPanelChildren().size(); fx++) {
      var fB = fA.contenu.getPanelChildren().get(fx);
      if (fB == fw) {
        fC = fy;
        break
      }
      fy = fB
    }
    if (fC == null) {
      return null
    }
    return this.buildList(fC)
  };
  dd.prototype.getMathML_getRightSiblingList = function (fw) {
    if (fw == null) {
      return null
    }
    var fy = new aT();
    var fz = fw.getParent();
    if (fz == null) {
      return null
    }
    var fB = null;
    for (var fx = 0; fx < (fz.contenu.getPanelChildren().size() - 1); fx++) {
      var fA = fz.contenu.getPanelChildren().get(fx);
      if (fA == fw) {
        fB = fz.contenu.getPanelChildren().get(fx + 1);
        break
      }
    }
    if (fB == null) {
      return null
    }
    return this.buildList(fB)
  };
  dd.prototype.buildList = function (fw) {
    var fx = new aT();
    fx.add(fw);
    do {
      fw = fw.getParent();
      if (fw == null) {
        break
      }
      fx.add(fw)
    } while (true);
    return this.reverseList(fx)
  };
  dd.prototype.reverseList = function (fw) {
    var fy = new aT();
    for (var fx = (fw.size() - 1); fx >= 0; fx--) {
      fy.add(fw.get(fx))
    }
    return fy
  };
  dd.prototype.getMathML_getMathML = function (fw, fy, fx) {
    if (fy == null) {
      fy = fv
    }
    if (fw != null) {
      return bd.getMathml(fw.getBean(), fy, fx)
    }
    return bd.getMathml(this.panelStructure.getBean(), fy, fx)
  };
  dd.prototype.getMathMLString = function (fx, fw) {
    if (fx == null) {
      fx = fv
    }
    return bd.getMathml(this.beanStructure, fx, fw)
  };
  dd.prototype.getMathML_structure = function () {
    return this.panelStructure
  };
  dd.prototype.getMathML_style = function () {
    return this.style
  };
  dd.prototype.getMathML_settings = function () {
    return this.settings
  };
  dd.prototype.setLatexSettings = function () {
    this.settings = new dq();
    this.style.setDefaultValues(settings)
  };
  dd.prototype.setMathMLSettings = function () {
    this.settings = new cw();
    this.style.setDefaultValues(settings)
  };
  dd.prototype.setWordSettings = function () {
    this.settings = new aL();
    this.style.setDefaultValues(settings)
  };
  dd.prototype.setAdobeSettings = function () {
    this.settings = new bP();
    this.style.setDefaultValues(settings)
  };
  dd.prototype.setOpenOfficeSettings = function () {
    this.settings = new d7();
    this.style.setDefaultValues(settings)
  };
  dd.prototype.getImage = function (fw, fx) {
    return this.canvasElem.toDataURL(fw, fx)
  };
  function by(fw) {
    this.panelStructure = fw
  }
  
  by.prototype.drawImage = function (fy) {
    var fz = this.panelStructure.getScale();
    var fA = this.panelStructure.getWidth();
    var fw = this.panelStructure.getHeight();
    if (fA == 0) {
      fA = 1
    }
    if (fw == 0) {
      fw = 1
    }
    if (fz > 1 || fz < 1) {
      fA = fA * fz;
      fw = fw * fz
    }
    fy.width = fA - 1;
    fy.height = fw - 1;
    var fx = fy.getContext("2d");
    if (fz > 1 || fz < 1) {
      fx.scale(fz, fz)
    }
    fx.dashedLine = function (fE, fK, fC, fJ, fH) {
      var fD = Math.sqrt(Math.pow(fC - fE, 2) + Math.pow(fJ - fK, 2));
      var fF = {x: (fC - fE) / fD, y: (fJ - fK) / fD};
      var fI = 0;
      var fG = 0;
      fH = fH && fH.length ? fH : [4, 4];
      while (fI < fD) {
        var fB = Math.min(fH[fG++ % fH.length], fD - fI);
        fI += fB;
        (fG % 2) && this.moveTo(fE, fK);
        fE += fB * fF.x;
        fK += fB * fF.y;
        (fG % 2) && this.lineTo(fE, fK)
      }
    };
    fx.drawRoundRect = function (fB, fF, fC, fD, fE) {
      this.beginPath();
      this.moveTo(fB + fE, fF);
      this.lineTo(fB + fC - fE, fF);
      this.quadraticCurveTo(fB + fC, fF, fB + fC, fF + fE);
      this.lineTo(fB + fC, fF + fD - fE);
      this.quadraticCurveTo(fB + fC, fF + fD, fB + fC - fE, fF + fD);
      this.lineTo(fB + fE, fF + fD);
      this.quadraticCurveTo(fB, fF + fD, fB, fF + fD - fE);
      this.lineTo(fB, fF + fE);
      this.quadraticCurveTo(fB, fF, fB + fE, fF);
      this.stroke();
      this.closePath()
    };
    fx.drawEllipse = function (fG, fF, fH, fI) {
      var fJ = (fH / 2) * 0.5522848, fC = (fI / 2) * 0.5522848, fB = fG + fH, fK = fF + fI, fE = fG + fH / 2, fD = fF + fI / 2;
      this.moveTo(fG, fD);
      this.bezierCurveTo(fG, fD - fC, fE - fJ, fF, fE, fF);
      this.bezierCurveTo(fE + fJ, fF, fB, fD - fC, fB, fD);
      this.bezierCurveTo(fB, fD + fC, fE + fJ, fK, fE, fK);
      this.bezierCurveTo(fE - fJ, fK, fG, fD + fC, fG, fD)
    };
    this.drawPanelStructure(fx, this.panelStructure, 0, 0)
  };
  by.prototype.drawPanelStructure = function (fy, fx, fw, fA) {
    fw = fw + Math.round(fx.getX());
    fA = fA + Math.round(fx.getY());
    var fz = fx.getBgShapeList();
    this.drawShapeList(fy, fz, fw, fA);
    fw = fw + Math.round(fx.getWidthLeft());
    fA = fA + Math.round(fx.getHeightTop());
    if (fx instanceof Q) {
      return
    }
    this.drawContenuStructure(fy, fx.getContenu(), fw, fA)
  };
  by.prototype.drawContenuStructure = function (fx, fz, fw, fC) {
    var fA = fz.getShapeList();
    this.drawShapeList(fx, fA, fw, fC);
    for (var fy = 0; fy < fz.getPanelChildren().size(); fy++) {
      var fB = fz.getPanelChildren().get(fy);
      this.drawPanelStructure(fx, fB, fw, fC)
    }
  };
  by.prototype.drawShapeList = function (fG, fN, fB, fA) {
    for (var fK = 0; fK < fN.size(); fK++) {
      var fw = fN.get(fK);
      fG.save();
      if (fw instanceof q) {
        var fE = fw;
        this.drawText(fG, fE, fB + fw.getX(), fA + fw.getY())
      } else {
        if (fw instanceof ez) {
          var fO = fw;
          var fP = aD.getGlyphImage(fO.getSrc());
          if (fP != null) {
            fG.beginPath();
            fG.drawImage(fP, fB + fw.getX(), fA + fw.getY(), fO.getWidth(), fO.getHeight());
            fG.closePath()
          }
        } else {
          if (fw instanceof dy) {
            var fz = fw;
            var fI = fz.getColor();
            fG.beginPath();
            fG.fillStyle = "rgb(" + fI.getR() + "," + fI.getG() + "," + fI.getB() + ")";
            fG.lineWidth = 0;
            var fC = fz.getActions();
            for (var fD = 0; fD < fC.size(); fD++) {
              var fJ = fC.get(fD);
              if ("Move" == fJ.getType()) {
                fG.moveTo(fB + fJ.getX(), fA + fJ.getY())
              } else {
                if ("Line" == fJ.getType()) {
                  fG.lineTo(fB + fJ.getX(), fA + fJ.getY())
                } else {
                  if ("Quad" == fJ.getType()) {
                    fG.quadraticCurveTo(fB + fJ.getX(), fA + fJ.getY(), fB + fJ.getX1(), fA + fJ.getY1())
                  }
                }
              }
            }
            fG.fill();
            fG.closePath()
          } else {
            if (fw instanceof ec) {
              var fF = fw;
              if (fF.getRondedCorner() > 0) {
                var fI = fF.getBorderColor();
                var fH = fF.getLinethickness();
                fG.strokeStyle = "rgb(" + fI.getR() + "," + fI.getG() + "," + fI.getB() + ")";
                fG.lineWidth = fH;
                fG.drawRoundRect(fB + fF.getX() + (fH / 2), fA + fF.getY() + (fH / 2), fF.getWidth() - fH, fF.getHeight() - fH, fF.getRondedCorner())
              } else {
                if (fF.isFill()) {
                  var fI = fF.getFillColor();
                  if (fI != null) {
                    fG.beginPath();
                    fG.rect(fB + fF.getX(), fA + fF.getY(), fF.getWidth() - 1, fF.getHeight() - 1);
                    fG.fillStyle = "rgb(" + fI.getR() + "," + fI.getG() + "," + fI.getB() + ")";
                    fG.fill();
                    fG.closePath()
                  }
                } else {
                  var fI = fF.getBorderColor();
                  if (fI != null) {
                    var fH = fF.getLinethickness();
                    fG.beginPath();
                    fG.strokeStyle = "rgb(" + fI.getR() + "," + fI.getG() + "," + fI.getB() + ")";
                    fG.lineWidth = fH;
                    fG.rect(fB + fF.getX() + (fH / 2), fA + fF.getY() + (fH / 2), fF.getWidth() - fH, fF.getHeight() - fH);
                    fG.stroke();
                    fG.closePath()
                  }
                }
              }
            } else {
              if (fw instanceof fr) {
                var fF = fw;
                if (fF.isFill()) {
                  var fI = fF.getFillColor();
                  if (fI != null) {
                    fG.beginPath();
                    fG.drawEllipse(fB + fF.getX() - fF.getRadiusX(), fA + fF.getY() - fF.getRadiusY(), 2 * fF.getRadiusX(), 2 * fF.getRadiusY());
                    fG.fillStyle = "rgb(" + fI.getR() + "," + fI.getG() + "," + fI.getB() + ")";
                    fG.fill()
                  }
                } else {
                  var fI = fF.getBorderColor();
                  if (fI != null) {
                    var fH = fF.getLinethickness();
                    fG.beginPath();
                    fG.drawEllipse(fB + fF.getX() - fF.getRadiusX(), fA + fF.getY() - fF.getRadiusY(), 2 * fF.getRadiusX(), 2 * fF.getRadiusY());
                    fG.lineWidth = fH;
                    fG.strokeStyle = "rgb(" + fI.getR() + "," + fI.getG() + "," + fI.getB() + ")";
                    fG.stroke()
                  }
                }
              } else {
                if (fw instanceof cJ) {
                  var fF = fw;
                  var fI = fF.getBorderColor();
                  if (fI != null) {
                    var fH = fF.getLinethickness();
                    if (!fG.setLineDash) {
                      fG.setLineDash = function () {
                      }
                    }
                    fG.beginPath();
                    fG.strokeStyle = "rgb(" + fI.getR() + "," + fI.getG() + "," + fI.getB() + ")";
                    fG.lineWidth = fH;
                    var fM = Math.round(fB + fF.getX());
                    var fy = Math.round(fA + fF.getY());
                    var fL = Math.round(fB + fF.getEndX());
                    var fx = Math.round(fA + fF.getEndY());
                    if (fM == fL && fH % 2 == 1) {
                      fM = fM - 0.5;
                      fL = fL - 0.5
                    }
                    if (fy == fx && fH % 2 == 1) {
                      fy = fy - 0.5;
                      fx = fx - 0.5
                    }
                    if ("dashed" == fF.getType()) {
                      fG.dashedLine(fM, fy, fL, fx, [10, 10])
                    } else {
                      if ("dotted" == fF.getType()) {
                        fG.dashedLine(fM, fy, fL, fx, [3, 3])
                      } else {
                        fG.moveTo(fM, fy);
                        fG.lineTo(fL, fx)
                      }
                    }
                    fG.stroke();
                    fG.closePath()
                  }
                }
              }
            }
          }
        }
      }
      fG.restore()
    }
  };
  by.prototype.drawText = function (fx, fz, fw, fB) {
    if (fz.getText().length == 0) {
      return
    }
    var fy = fz.getColor();
    var fA = fz.getFontSize();
    fx.textBaseline = "alphabetic";
    fx.font = fA + "px " + by.getFontName(fz.getFont());
    fx.fillStyle = "rgb(" + fy.getR() + "," + fy.getG() + "," + fy.getB() + ")";
    if (fz.isFlipVertical()) {
      fx.translate(fw + fz.getWidth(), 0);
      fx.scale(-1, 1);
      fx.fillText(fz.getText(), 0 + fz.getShiftX(), fB + fz.getFontAscent() + fz.getShiftY())
    } else {
      fx.fillText(fz.getText(), fw + fz.getShiftX(), fB + fz.getFontAscent() + fz.getShiftY())
    }
  };
  by.getFontName = function (fw) {
    return fw.getFontName()
  };
  by.calculateDimensionForText = function (fw) {
    this.setSuperscriptLine(fw);
    this.setExactDimensionForText(fw)
  };
  by.setSuperscriptLine = function (fx) {
    var fD = document.createElement("canvas");
    var fF = fx.getFontSize();
    var fy = 3 * fF;
    var fA = fF * 3;
    fD.height = fA;
    fD.width = fy;
    var fE = fD.getContext("2d");
    fE.textBaseline = "alphabetic";
    fE.font = fF + "px " + by.getFontName(fx.getFont());
    fE.fillText(fx.getFont().getSuperscriptChar(), fF, fF);
    var fw = fE.getImageData(0, 0, fy, fA);
    var fz = fw.data;
    var fC = 0;
    var fB = 0;
    while (fB < fz.length) {
      if (fz[fB + 3] > 0) {
        fC = parseInt(fB / (fy * 4));
        break
      }
      fB = fB + 4
    }
    fC = fC - 2;
    fx.setSuperscriptline(-fC)
  };
  by.setExactDimensionForText = function (fy) {
    var fF = document.createElement("canvas");
    var fJ = fy.getFontSize();
    var fA = fJ * (fy.getText().length) + 2 * fJ;
    var fC = fJ * 3;
    fF.height = fC;
    fF.width = fA;
    var fH = fF.getContext("2d");
    fH.textBaseline = "alphabetic";
    fH.font = fJ + "px " + by.getFontName(fy.getFont());
    fH.fillText(fy.getText(), fJ, fJ);
    var fx = fH.getImageData(0, 0, fA, fC);
    var fB = fx.data;
    var fE = 0;
    var fD = 0;
    while (fD < fB.length) {
      if (fB[fD + 3] > 0) {
        fE = parseInt(fD / (fA * 4));
        break
      }
      fD = fD + 4;
      if (fD >= fB.length) {
        fE = parseInt(fD / (fA * 4))
      }
    }
    fE = fE - 1;
    fD = fB.length;
    var fw = fC;
    while (fD > 0) {
      if (fB[fD + 3] > 0) {
        fw = parseInt(fD / (fA * 4));
        break
      }
      fD = fD - 4
    }
    fw = fw + 3;
    var fz = 0;
    var fI = 0;
    col = 0;
    fD = 0;
    while (fD < fB.length) {
      if (fB[fD + 3] > 0) {
        fz = col;
        break
      }
      fI++;
      if (fI % fC == 0) {
        fI = 0;
        col++
      }
      fD = (fI * fA * 4) + (col * 4)
    }
    fz = fz - 1;
    var fG = 0;
    fI = 0;
    col = fA - 1;
    fD = (fI * fA * 4) + (col * 4);
    while (fD < fB.length) {
      if (fB[fD + 3] > 0) {
        fG = col;
        break
      }
      fI++;
      if (fI % fC == 0) {
        fI = 0;
        col--
      }
      fD = (fI * fA * 4) + (col * 4);
      if (fD < 0) {
        break
      }
    }
    fG = fG + 3;
    fy.setFontAscent(fJ);
    fy.setShiftX(fJ - fz);
    fy.setShiftY(-fE);
    fy.setWidth(fG - fz);
    fy.setHeight(fw - fE)
  };
  by.calculateDimensionForImage = function (fy) {
    var fw = aD.getGlyphImage(fy.getSrc());
    var fx = new ez();
    if (fw != null) {
      if (fy.getWidth() > 0 && fy.getHeight() == 0) {
        fy.setHeight(fw.height * (fy.getWidth() / fw.width))
      } else {
        if (fy.getHeight() > 0 && fy.getWidth() == 0) {
          fy.setWidth(fw.width * (fy.getHeight() / fw.height))
        } else {
          if (fy.getWidth() == 0 && fy.getHeight() == 0) {
            fy.setHeight(fw.height);
            fy.setWidth(fw.width)
          }
        }
      }
    }
  };
  by.sqrt = function (fw) {
    return Math.sqrt(fw)
  };
  FMath_extend = function (fw, fy) {
    var fx = function () {
    };
    fx.prototype = fy.prototype;
    fw.prototype = new fx();
    fw.prototype.constructor = fw;
    fw.superclass = fy.prototype;
    if (fy.prototype.constructor == Object.prototype.constructor) {
      fy.prototype.constructor = fy
    }
  };
  function ej() {
  }
  
  ej.getMinLimitLine = function () {
    return 1000
  };
  ej.addPixel = function (fw) {
    return 0
  };
  ej.stringIsNumber = function (fw) {
    var fx = ej.getNumber(fw);
    return ej.isNumber(fx)
  };
  ej.isNumber = function (fw) {
    return !isNaN(fw)
  };
  ej.getNumber = function (fx) {
    var fw = /^\-?([0-9]+(\.[0-9]+)?|Infinity)$/;
    if (fw.test(fx)) {
      return Number(fx)
    }
    return NaN
  };
  ej.getCharFromIntCode = function (fw) {
    return String.fromCharCode(parseInt(fw))
  };
  ej.getCharFromHexCode = function (fw) {
    return String.fromCharCode(parseInt(fw, 16))
  };
  ej.getIntFromHexCode = function (fw) {
    return parseInt(fw, 16)
  };
  ej.getIntegerValue = function (fy, fx) {
    var fw = /^\-?([0-9]+(\.[0-9]+)?|Infinity)$/;
    if (fw.test(fy)) {
      return parseInt(fy)
    }
    return fx
  };
  ej.getDoubleValue = function (fy, fx) {
    var fw = /^\-?([0-9]+(\.[0-9]+)?|Infinity)$/;
    if (fw.test(fy)) {
      return Number(fy)
    }
    return fx
  };
  ej.getBooleanValue = function (fx, fw) {
    if (fx == null) {
      return false
    }
    fx = fx.toLowerCase();
    return fx == "true"
  };
  ej.getHexCodeFromInt = function (fw) {
    return fw.toString(16)
  };
  ej.getCharFromInt = function (fw) {
    return String.fromCharCode(fw)
  };
  function dc(fw) {
    this.started = false;
    this.stopped = false;
    this.listeners = new Array();
    this.url = fw
  }
  
  dc.prototype.start = function () {
  };
  dc.prototype.loadOk = function (fw) {
    this.callListeners()
  };
  dc.prototype.callListeners = function () {
    this.stopped = true;
    for (var fx = 0; fx < this.listeners.length; fx++) {
      var fw = this.listeners[fx];
      fw.receiveRessourceLoaded()
    }
    this.listeners = new Array()
  };
  dc.prototype.isStopped = function () {
    return this.stopped
  };
  dc.prototype.getUrl = function () {
    return this.url
  };
  dc.prototype.addRessourceFormula = function (fw) {
    if (this.stopped) {
      return false
    }
    this.listeners[this.listeners.length] = fw;
    return true
  };
  var dF = 1000;
  
  function eU(fw, fx) {
    this.family = fx;
    this.time = 1000;
    dF = dF + 1;
    this.id = dF;
    this.$a = dc;
    this.$a(fw)
  }
  
  FMath_extend(eU, dc);
  eU.prototype.start = function () {
    if (this.started) {
      return
    }
    this.started = true;
    this.createSpan("spanN_" + this.id, "ABCDEFGHIJKLMNOPQRSTUVXYZW", "N" + this.family, false);
    this.createSpan("span_" + this.id, "ABCDEFGHIJKLMNOPQRSTUVXYZW", this.family, false);
    this.createSpan("span_" + this.id, "ABCDEFGHIJKLMNOPQRSTUVXYZW", this.family, false);
    this.createSpan("space_" + this.id, " ", this.family, true);
    this.time = 30;
    var fw = document.createElement("link");
    fw.setAttribute("rel", "stylesheet");
    fw.setAttribute("type", "text/css");
    fw.setAttribute("href", this.url);
    document.getElementsByTagName("head")[0].appendChild(fw);
    var fx = this;
    setTimeout(function () {
      fx.returnFunction()
    }, 10)
  };
  eU.prototype.returnFunction = function () {
    if (this.isNotLoaded() && this.time > 0) {
      this.time--;
      var fx = this;
      setTimeout(function () {
        fx.returnFunction()
      }, 10);
      return
    }
    var fw = document.getElementById("span_" + this.id);
    fw.parentNode.removeChild(fw);
    fw = document.getElementById("space_" + this.id);
    fw.parentNode.removeChild(fw);
    this.loadOk()
  };
  eU.prototype.createSpan = function (fA, fz, fw, fy) {
    var fx = document.createElement("span");
    fx.id = fA;
    fx.setAttribute("style", "font-family:" + fw + ";font-size:100px");
    fx.innerHTML = fz;
    if (!fy) {
      fx.style.display = "none"
    }
    document.body.appendChild(fx)
  };
  eU.prototype.isNotLoaded = function () {
    var fz = document.getElementById("spanN_" + this.id);
    var fx = document.getElementById("span_" + this.id);
    fz.style.display = "";
    fx.style.display = "";
    var fy = fz.offsetWidth;
    var fw = fx.offsetWidth;
    fz.style.display = "none";
    fx.style.display = "none";
    return fw == fy
  };
  function fa(fw) {
    this.imageObj = new Image();
    this.time = 1000;
    this.$a = dc;
    this.$a(fw)
  }
  
  FMath_extend(fa, dc);
  fa.prototype.start = function () {
    this.imageObj.src = this.url;
    var fw = this;
    setTimeout(function () {
      fw.returnFunction()
    }, 5)
  };
  fa.prototype.returnFunction = function () {
    if (this.imageObj.width == 0 && this.time > 0) {
      this.time--;
      var fw = this;
      setTimeout(function () {
        fw.returnFunction()
      }, 5);
      return
    }
    this.loadOk()
  };
  fa.prototype.getImage = function () {
    return this.imageObj
  };
  var co = false;
  var p = new Array();
  var z = new Array();
  
  function aD() {
  }
  
  aD.loadRessourcesFor = function (fw, fy) {
    if (!co) {
      this.loadConfiguration();
      co = true
    }
    var fx = new ag();
    fx.loadRessourcesFor(fw, fy)
  };
  aD.getUnicodeRange = function (fx) {
    var fD = new aT();
    var fC = fMathFontDescriptor.availableFontFamilies.split(",");
    for (var fB = 0; fB < fC.length; fB++) {
      var fA = fC[fB];
      var fy = fMathFontDescriptor["font." + fA + ".object"];
      for (var fG in fy) {
        var fH = fG;
        var fF = fy[fH];
        if (fH.indexOf("_") > -1) {
          fH = fH.substring(0, fH.indexOf("_"))
        }
        if (fH != fx) {
          continue
        }
        fF = fF.substring(fF.indexOf("|") + 1);
        fF = fF.substring(fF.indexOf("|") + 1);
        fF = fF.substring(fF.indexOf(";"));
        var fE = fF.split(";");
        for (var fz = 0; fz < fE.length; fz++) {
          var fw = fE[fz];
          fw = fw.substring(0, fw.indexOf(":"));
          fD.add(fw)
        }
      }
    }
    return fD
  };
  aD.loadConfiguration = function () {
    eG.setSearchSymbolInAllFonts(fMathFontDescriptor.searchSymbolInAllFonts);
    eG.setAvailableFontFamilies(fMathFontDescriptor.availableFontFamilies);
    eG.setDefaultFontFamily(fMathFontDescriptor.defaultFontFamily);
    var fz = fMathFontDescriptor.availableFontFamilies.split(",");
    for (var fx = 0; fx < fz.length; fx++) {
      var fw = fz[fx];
      var fy = new a7();
      fy.setFamilyName(fw);
      fy.setFolderOrUrl(fMathFontDescriptor["font." + fw + ".urlFolder"]);
      fy.setPreload("true" == fMathFontDescriptor["font." + fw + ".preload"]);
      fy.setUseClientFont("true" == fMathFontDescriptor["font." + fw + ".useClientFont"]);
      eG.addFamilyInfo(fy);
      this.loadFontDictinary(fMathFontDescriptor["font." + fw + ".object"], fy)
    }
  };
  aD.loadFontDictinary = function (fx, fC) {
    var fB = new aT();
    for (var fy in fx) {
      var fA = fy;
      var fz = fx[fA];
      if (fA.indexOf("_") > -1) {
        fA = fA.substring(0, fA.indexOf("_"))
      }
      var fw = new d3();
      fw.setFamily(fC.getFamilyName());
      fw.setMathvariant(fA);
      fw.setFontFile(d4 + "/" + fC.getFolderOrUrl() + "/" + fz.substring(0, fz.indexOf("|")));
      fz = fz.substring(fz.indexOf("|") + 1);
      fw.setSuperscriptChar(ds.getCharFromHexCode(fz.substring(0, fz.indexOf("|"))));
      fz = fz.substring(fz.indexOf("|") + 1);
      fw.setFontName(fz.substring(0, fz.indexOf(";")));
      fz = fz.substring(fz.indexOf(";"));
      fw.setUnicode(fz);
      fB.add(fw)
    }
    fC.setFonts(fB)
  };
  aD.addFontListener = function (fx) {
    var fy = fx.getFontFile();
    if (fy.indexOf(".css") != fy.length - 4) {
      throw new Error("File not good (" + fy + "). Must load a css file")
    }
    for (var fz = 0; fz < p.length; fz++) {
      var fw = p[fz];
      if (fw.getUrl() == fy) {
        return fw
      }
    }
    var fA = new eU(fy, by.getFontName(fx));
    p[p.length] = fA;
    return fA
  };
  aD.addGlyphListener = function (fA) {
    var fx = eK.getFolderUrlForGlyphs() + "/" + fA;
    for (var fz = 0; fz < z.length; fz++) {
      var fw = z[fz];
      if (fw.getUrl() == fx) {
        return fw
      }
    }
    var fy = new fa(fx);
    z[z.length] = fy;
    return fy
  };
  aD.getTextShape = function (fy, fw, fx) {
    return ag.getTextShape(fy, fw, fx)
  };
  aD.getGlyphImage = function (fz) {
    var fx = eK.getFolderUrlForGlyphs() + "/" + fz;
    for (var fy = 0; fy < z.length; fy++) {
      var fw = z[fy];
      if (fw.getUrl() == fx) {
        return fw.getImage()
      }
    }
    return null
  };
  function ag() {
    this.parentBean = null;
    this.returnFunction = null;
    this.listLoaders = new Array()
  }
  
  ag.prototype.loadRessourcesFor = function (fx, fw) {
    this.parentBean = fx;
    this.returnFunction = fw;
    this.processTheStructure()
  };
  ag.prototype.processTheStructure = function () {
    this.loadRessourcesForBean(this.parentBean);
    this.verifyAndReturn()
  };
  ag.prototype.receiveRessourceLoaded = function () {
    this.verifyAndReturn()
  };
  ag.prototype.verifyAndReturn = function () {
    for (var fx = 0; fx < this.listLoaders.length; fx++) {
      var fw = this.listLoaders[fx];
      if (!fw.isStopped()) {
        return
      }
    }
    this.returnFunction()
  };
  ag.prototype.loadRessourcesForBean = function (fw) {
    var fy = fw.getChildren();
    if (fy != null) {
      for (var fx = 0; fx < fy.size(); fx++) {
        var fA = fy.get(fx);
        if (fA instanceof cy) {
          this.loadFonts(fA);
          continue
        } else {
          if (fA instanceof cr) {
            this.loadGlyph(fA);
            continue
          } else {
            if (fw instanceof a1) {
              var fz = fw;
              this.loadRessourcesForBean(fz.getLabel())
            }
          }
        }
        this.loadRessourcesForBean(fA)
      }
    }
  };
  ag.prototype.loadFonts = function (fI) {
    var fH = fI.getText();
    var fJ = fI.getStyle().getMathvariant();
    var fy = eG.getFamilyName(fJ);
    if (fy == null || fy.length == 0) {
      fy = eG.getDefaultFontFamily()
    }
    var fG = fy;
    var fA = fJ;
    var fD = -1;
    var fx = null;
    var fw = null;
    for (var fz = 0; fz < fH.length; fz++) {
      var fF = fH.charAt(fz);
      fx = eG.getFontInfoForChar(fG, fA, fF + "");
      if (fx == null) {
        continue
      }
      if (fw == null) {
        fw = fx
      }
      var fC = aD.addFontListener(fx);
      var fE = this.addedToList(fC);
      if (!fE) {
        var fB = fC.addRessourceFormula(this);
        if (fB) {
          this.listLoaders[this.listLoaders.length] = fC
        }
      }
      fC.start();
      if ((fx.getFamily() == fG && fx.getMathvariant() == fA)) {
        continue
      }
      fG = fx.getFamily();
      fA = fx.getMathvariant();
      if (fz == 0) {
        continue
      }
      this.generateShapeForText(fH, fD, fz, fw, fI);
      fw = fx;
      fD = fz
    }
    if (fD != (fH.length - 1)) {
      this.generateShapeForText(fH, fD, fH.length, fw, fI)
    }
  };
  ag.prototype.generateShapeForText = function (fA, fB, fy, fw, fx) {
    if (fB == -1) {
      fB = 0
    }
    if (fw == null || fA.length == 0) {
      return
    }
    var fz = ag.getTextShape(fA.substring(fB, fy), fw, fx.getStyle());
    fx.getShapeList().add(fz)
  };
  ag.getTextShape = function (fz, fw, fx) {
    var fy = new q();
    fy.setText(fz);
    fy.setFont(fw);
    fy.setFontSize(parseInt(fx.getMathsize()));
    fy.setColor(aw.getColor(fx.getColor(), 0));
    return fy
  };
  ag.prototype.addedToList = function (fx) {
    for (var fy = 0; fy < this.listLoaders.length; fy++) {
      var fw = this.listLoaders[fy];
      if (fw.getUrl() == fx.getUrl()) {
        return true
      }
    }
    return false
  };
  ag.prototype.loadGlyph = function (fx) {
    var fz = fx.getSrc();
    if (fz == null) {
      return
    }
    var fw = aD.addGlyphListener(fx.getSrc());
    if (!this.addedToList(fw)) {
      var fy = fw.addRessourceFormula(this);
      if (fy) {
        this.listLoaders[this.listLoaders.length] = fw
      }
    }
    fw.start()
  };
  function cP() {
    this._parent = null;
    this.childIndex = 0;
    this.text = null;
    this.name = null;
    this.children = new Array();
    this.attributesV = new Array();
    this.attributes = new Array()
  }
  
  cP.prototype.localName = function () {
    return this.name
  };
  cP.prototype.getChildren = function () {
    return this.children
  };
  cP.prototype.childIndex = function () {
    return this.childIndex
  };
  cP.prototype.deleteChild = function (fw) {
    this.children.splice(fw, 1)
  };
  cP.prototype.attribute = function (fw) {
    for (var fx = 0; fx < this.attributes.length; fx++) {
      if (this.attributes[fx] == fw) {
        return this.attributesV[fx]
      }
    }
    return ""
  };
  cP.prototype.parent = function () {
    return this._parent
  };
  cP.prototype.deleteAttribute = function (fw) {
    for (var fx = 0; fx < this.attributes.length; fx++) {
      if (this.attributes[fx] == fw) {
        this.attributes.splice(fx, 1);
        this.attributesV.splice(fx, 1);
        break
      }
    }
  };
  cP.prototype.setAttribute = function (fw, fx) {
    this.attributesV[this.attributesV.length] = fx;
    this.attributes[this.attributes.length] = fw
  };
  cP.prototype.appendChild = function (fw) {
    this.children[this.children.length] = fw
  };
  cP.prototype.setText = function (fw) {
    this.text = fw
  };
  cP.prototype.insertChildBefore = function (fw) {
  };
  cP.prototype.insertChildAfter = function (fw) {
  };
  cP.prototype.reIndexChildren = function () {
  };
  cP.prototype.name = function () {
    return this.name
  };
  cP.prototype.setParent = function (fw) {
    this._parent = fw
  };
  cP.prototype.setChildIndex = function (fw) {
    this.childIndex = fw
  };
  cP.prototype.setName = function (fw) {
    this.name = fw
  };
  cP.prototype.setChildren = function (fw) {
  };
  cP.prototype.setAttributes = function (fw) {
  };
  cP.prototype.toString = function () {
    return this.text
  };
  function aH() {
  }
  
  aH.parse = function (fw) {
    while (fw.indexOf("<!--") > -1) {
      var fx = fw.indexOf("<!--");
      var fz = fw.indexOf("-->", fx);
      if (fz == -1) {
        fz = fw.length
      } else {
        fz = fz + 3
      }
      fw = fw.substring(0, fx) + fw.substring(fz, fw.length)
    }
    fw = fu.replace(fw, "&", "&amp;");
    var fy = aH.parseXML(fw);
    if (fy == null) {
      return new cP()
    }
    return aH.traverse(fy.documentElement)
  };
  aH.parseXML = function (fy) {
    var fw, fx;
    try {
      if (window.DOMParser) {
        fx = new DOMParser();
        fw = fx.parseFromString(fy, "text/xml")
      } else {
        fw = new ActiveXObject("Microsoft.XMLDOM");
        fw.async = "false";
        fw.loadXML(fy)
      }
    } catch (fz) {
      fw = null;
      console.log("error parsong mathml:" + fy)
    }
    return fw
  };
  aH.is_all_ws = function (fw) {
    return !(/[^\t\n\r ]/.test(fw.textContent))
  };
  aH.is_ignorable = function (fw) {
    return (fw.nodeType == 8) || ((fw.nodeType == 3) && aH.is_all_ws(fw))
  };
  aH.traverse = function (fA) {
    if (aH.is_ignorable(fA)) {
      return null
    }
    var fx = new cP();
    if (fA.tagName) {
      fx.setName(fA.tagName)
    }
    if (fA.hasChildNodes()) {
      var fB = fA.childNodes.length;
      var fw = 0;
      for (var fy = 0; fy < fB; fy++) {
        var fz = aH.traverse(fA.childNodes[fy]);
        if (fz != null) {
          fz.setChildIndex(fw);
          fz.setParent(fx);
          fx.appendChild(fz);
          fw++
        }
      }
    } else {
      fx.setText(fA.nodeValue)
    }
    if (fA.attributes) {
      for (var fy = 0; fy < fA.attributes.length; fy++) {
        fx.setAttribute(fA.attributes[fy].name, fA.attributes[fy].value)
      }
    }
    return fx
  };
  aH.xmlSetText = function (fw, fx) {
    fw.setText(fx)
  };
  aH.xmlSetAttribute = function (fx, fw, fy) {
    fx.setAttribute(fw, fy)
  };
  aH.xmlDeleteAttribute = function (fx, fw) {
    fx.deleteAttribute(fw)
  };
  aH.xmlDeleteChild = function (fw, fx) {
    fw.deleteChild(fx)
  };
  function aT() {
    this.innerArray = new Array()
  }
  
  aT.prototype.add = function (fw) {
    this.innerArray[this.innerArray.length] = fw
  };
  aT.prototype.addTo = function (fw, fx) {
    this.innerArray.splice(fw, 0, fx)
  };
  aT.prototype.addAll = function (fw) {
    this.innerArray = this.innerArray.concat(fw)
  };
  aT.prototype.get = function (fw) {
    return this.innerArray[fw]
  };
  aT.prototype.size = function () {
    return this.innerArray.length
  };
  aT.prototype.clear = function () {
    this.innerArray = new Array()
  };
  aT.prototype.remove = function (fw) {
    this.innerArray.splice(fw, 1)
  };
  aT.prototype.removeObject = function (fx) {
    for (var fw = 0; fw < this.innerArray.length; fw++) {
      if (this.innerArray[fw] == fx) {
        this.innerArray.splice(fw, 1);
        break
      }
    }
  };
  aT.prototype.getArray = function () {
    return this.innerArray
  };
  aT.prototype.setArray = function (fw) {
    this.innerArray = fw
  };
  function cE(fw) {
    this.value = fw
  }
  
  cE.prototype.append = function (fw) {
    this.value = this.value + fw
  };
  cE.prototype.toString = function () {
    return this.value
  };
  var az = "oMath>";
  
  function dB() {
  }
  
  dB.getMathMLFromDocStream = function (fx, fy) {
    var fw = new FileReader();
    fw.onload = function (fA) {
      try {
        var fz = new JSZip(fA.target.result);
        var fB = fz.file("word/document.xml");
        if (fB == null) {
          alert("Not a word file !!!")
        } else {
          dB.splitOmml(fB.asText(), fy)
        }
      } catch (fC) {
        alert(fC)
      }
    };
    fw.readAsArrayBuffer(fx)
  };
  dB.splitOmml = function (fx, fy) {
    var fA = new aT();
    var fC = fx.indexOf(az);
    while (fC > -1) {
      fC = fx.lastIndexOf("<", fC);
      if (fC > -1) {
        var fB = fx.indexOf(az, fC + az.length);
        if (fB > -1) {
          var fw = fx.substring(fC, fB + az.length);
          fx = fx.substring(0, fC) + fx.substring(fB + az.length);
          fA.add(fw)
        } else {
          fC = -1
        }
      }
    }
    var fz = bn.createMathMLFromOmmlList(fA);
    fy(fz)
  };
  dB.createDownloadForWord = function (fF, fG) {
    if (fG.length == 0) {
      fG = "formulaWord"
    }
    var fy = aU.convertToOMML(fF);
    var fA = eu.getBase64Value();
    var fz = Base64Binary.decodeArrayBuffer(fA.replace(/\s/g, ""));
    var fx = new JSZip(fz);
    var fC = fx.file("word/document.xml");
    var fB = fC.asText();
    var fE = fB.indexOf("<m:oMath>");
    var fD = fB.indexOf("</m:oMath>");
    fB = fB.substring(0, fE) + fy + fB.substring(fD + 10, fB.length);
    fx.file("word/document.xml", fB);
    var fw = fx.generate({type: "blob"});
    dB.createDownloadLink(fw, fG + ".docx")
  };
  dB.createDownloadLink = function (fx, fy) {
    var fw = document.createElement("a");
    fw.download = fy;
    fw.innerHTML = "Download File";
    if (window.webkitURL != null) {
      fw.href = window.webkitURL.createObjectURL(fx)
    } else {
      fw.href = window.URL.createObjectURL(fx);
      fw.onclick = destroyClickedElement;
      fw.style.display = "none";
      document.body.appendChild(fw)
    }
    fw.click()
  };
  var eE = true;
  var d4 = "";
  var dQ = "";
  var aZ = new aT();
  var dz = new aT();
  var c3 = ";2212;B1;2062;2061;B7;2C;2E;2146;2D9;";
  var b2 = 37.79;
  var dr = ";black=000000;blue=0000FF;brown=A52A2A;cyan=00FFFF;darkgray=A9A9A9;gray=808080;green=008000;lightgray=D3D3D3;lime=00FF00;magenta=FF00FF;olive=808000;orange=FFA500;pink=FFC0CB;purple=800080;red=FF0000;teal=008080;violet=8F00FF;white=FFFFFF;yellow=FFFF00;apricot=FBCEB1;aquamarine=7FFFD4;bittersweet=FE6F5E;bluegreen=0D98BA;blueviolet=8A2BE2;brickred=CB4154;burntorange=CC5500;cadetblue=5F9EA0;carnationpink=FFA6C9;cerulean=007BA7;cornflowerblue=6495ED;dandelion=F0E130;darkorchid=9932CC;emerald=50C878;forestgreen=228B22;fuchsia=FF00FF;goldenrod=DAA520;greenyellow=ADFF2F;junglegreen=29AB87;lavender=E6E6FA;limegreen=32CD32;mahogany=C04000;maroon=800000;melon=FDBCB4;midnightblue=191970;mulberry=C54B8C;navyblue=000080;olivegreen=556B2F;orangered=FF4500;orchid=DA70D6;peach=FFCBA4;periwinkle=CCCCFF;pinegreen=01796F;plum=DDA0DD;processblue=0AFFFF;rawsienna=8C0000;redorange=FF5349;redviolet=C71585;rhodamine=FF2EFF;royalblue=4169E1;royalpurple=7851A9;rubinered=D10056;salmon=FF8C69;seagreen=2E8B57;sepia=704214;skyblue=87CEEB;springgreen=00FF7F;tan=D2B48C;tealblue=367588;thistle=D8BFD8;turquoise=30D5C8;violetred=F75394;wildstrawberry=FF43A4;yellowgreen=9ACD32;yelloworange=FFAE42;aliceblue=F0F8FF;antiquewhite=FAEBD7;aqua=00FFFF;azure=007FFF;beige=F5F5DC;bisque=FFE4C4;blanchedalmond=FFEBCD;burlywood=DEB887;chartreuse=7FFF00;chocolate=D2691E;coral=FF7F50;cornsilk=FFF8DC;crimson=DC143C;darkblue=00008B;darkcyan=008B8B;darkgoldenrod=B8860B;darkgreen=013220;darkkhaki=BDB76B;darkmagenta=8B008B;darkolivegreen=556B2F;darkorange=FF8C00;darkred=8B0000;darksalmon=E9967A;darkseagreen=8FBC8F;darkslateblue=483D8B;darkslategray=2F4F4F;darkturquoise=00CED1;darkviolet=9400D3;deeppink=FF1493;deepskyblue=00BFFF;dimgray=696969;dodgerblue=1E90FF;firebrick=B22222;floralwhite=FFFAF0;gainsboro=DCDCDC;ghostwhite=F8F8FF;gold=FFD700;honeydew=F0FFF0;hotpink=FF69B4;indianred=CD5C5C;indigo=6F00FF;ivory=FFFFF0;khaki=F0E68C;lavenderblush=FFF0F5;lawngreen=7CFC00;lemonchiffon=FFFACD;lightblue=ADD8E6;lightcoral=F08080;lightcyan=E0FFFF;lightgoldenrod=FAFAD2;lightgoldenrodyellow=FAFAD2;lightgreen=90EE90;lightpink=FFB6C1;lightsalmon=FFA07A;lightseagreen=20B2AA;lightskyblue=87CEFA;lightslateblue=8470FF;lightslategray=778899;lightsteelblue=B0C4DE;lightyellow=FFFFE0;linen=FAF0E6;mediumaquamarine=66DDAA;mediumblue=0000CD;mediumorchid=BA55D3;mediumpurple=9370DB;mediumseagreen=3CB371;mediumslateblue=7B68EE;mediumspringgreen=00FA9A;mediumturquoise=48D1CC;mediumvioletred=C71585;mintcream=F5FFFA;mistyrose=FFE4E1;moccasin=FAEBD7;navajowhite=FFDEAD;navy=000080;oldlace=FDF5E6;olivedrab=6B8E23;palegoldenrod=EEE8AA;palegreen=98FB98;paleturquoise=AFEEEE;palevioletred=DB7093;papayawhip=FFEFD5;peachpuff=FFDAB9;peru=CD853F;powderblue=B0E0E6;rosybrown=BC8F8F;saddlebrown=8B4513;sandybrown=F4A460;seashell=FFF5EE;sienna=882D17;silver=C0C0C0;slateblue=6A5ACD;slategray=708090;snow=FFFAFA;steelblue=4682B4;tomato=FF6347;wheat=F5DEB3;whitesmoke=F5F5F5;";
  var D = "|20|\\space|23|\\#|24|\\$|25|\\%|26|\\&|27|\\textquotesingle|2A|\\ast|5C|\\backslash|5E|\\^{}|5F|\\_|60|\\textasciigrave|7B|\\lbrace|7C|\\vert|7D|\\rbrace|7E|\\textasciitilde|A1|\\textexclamdown|A2|\\textcent|A3|\\pounds|A4|\\textcurrency|A5|\\yen|A6|\\textbrokenbar|A7|\\S|A8|\\textasciidieresis|A9|\\copyright|AA|\\textordfeminine|AB|\\guillemotleft|AC|\\lnot|AD|\\-|AE|\\circledR|AF|\\textasciimacron|B0|\\textdegree|B1|\\pm|B4|\\textasciiacute|B5|\\mathrm{\\mu}|B6|\\P|B7|\\cdot|B8|\\c{}|BA|\\textordmasculine|BB|\\guillemotright|BC|\\textonequarter|BD|\\textonehalf|BE|\\textthreequarters|BF|\\textquestiondown|C0|\\grave{A}|C1|\\acute{A}|C2|\\hat{A}|C3|\\tilde{A}|C4|\\ddot{A}|C5|\\AA|C6|\\AE|C7|\\c{C}|C8|\\grave{E}|C9|\\acute{E}|CA|\\hat{E}|CB|\\ddot{E}|CC|\\grave{I}|CD|\\acute{I}|CE|\\hat{I}|CF|\\ddot{I}|D0|\\DH|D1|\\tilde{N}|D2|\\grave{O}|D3|\\acute{O}|D4|\\hat{O}|D5|\\tilde{O}|D6|\\ddot{O}|D7|\\times|D8|\\O|D9|\\grave{U}|DA|\\acute{U}|DB|\\hat{U}|DC|\\ddot{U}|DD|\\acute{Y}|DE|\\TH|DF|\\ss|E0|\\grave{a}|E1|\\acute{a}|E2|\\hat{a}|E3|\\tilde{a}|E4|\\ddot{a}|E5|\\aa|E6|\\ae|E7|\\c{c}|E8|\\grave{e}|E9|\\acute{e}|EA|\\hat{e}|EB|\\ddot{e}|EC|\\grave{\\imath}|ED|\\acute{\\imath}|EE|\\hat{\\imath}|EF|\\ddot{\\imath}|F0|\\dh|F1|\\tilde{n}|F2|\\grave{o}|F3|\\acute{o}|F4|\\hat{o}|F5|\\tilde{o}|F6|\\ddot{o}|F7|\\div|F8|\\o|F9|\\grave{u}|FA|\\acute{u}|FB|\\hat{u}|FC|\\ddot{u}|FD|\\acute{y}|FE|\\th|FF|\\ddot{y}|100|\\bar{A}|101|\\bar{a}|102|\\breve{A}|103|\\u{a}|104|\\k{A}|105|\\k{a}|106|\\acute{C}|107|\\acute{c}|108|\\hat{C}|109|\\hat{c}|10A|\\dot{C}|10B|\\dot{c}|10C|\\check{C}|10D|\\check{c}|10E|\\check{D}|10F|\\check{d}|110|\\DJ|111|\\dj|112|\\bar{E}|113|\\bar{e}|114|\\breve{E}|115|\\breve{e}|116|\\dot{E}|117|\\dot{e}|118|\\k{E}|119|\\k{e}|11A|\\check{E}|11B|\\check{e}|11C|\\hat{G}|11D|\\hat{g}|11E|\\breve{G}|11F|\\breve{g}|120|\\dot{G}|121|\\dot{g}|122|\\c{G}|123|\\c{g}|124|\\hat{H}|125|\\hat{h}|127|\\Elzxh|128|\\tilde{I}|129|\\tilde{\\imath}|12A|\\bar{I}|12B|\\bar{\\imath}|12C|\\breve{I}|12D|\\breve{\\imath}|12E|\\k{I}|12F|\\k{i}|130|\\dot{I}|131|\\imath|134|\\hat{J}|135|\\hat{\\jmath}|136|\\c{K}|137|\\c{k}|139|\\acute{L}|13A|\\acute{l}|13B|\\c{L}|13C|\\c{l}|13D|\\check{L}|13E|\\check{l}|141|\\L|142|\\l|143|\\acute{N}|144|\\acute{n}|145|\\c{N}|146|\\c{n}|147|\\check{N}|148|\\check{n}|14A|\\NG|14B|\\ng|14C|\\bar{O}|14D|\\bar{o}|14E|\\breve{O}|14F|\\breve{o}|150|\\H{O}|151|\\H{o}|152|\\OE|153|\\oe|154|\\acute{R}|155|\\acute{r}|156|\\c{R}|157|\\c{r}|158|\\check{R}|159|\\check{r}|15A|\\acute{S}|15B|\\acute{s}|15C|\\hat{S}|15D|\\hat{s}|15E|\\c{S}|15F|\\c{s}|160|\\check{S}|161|\\check{s}|162|\\c{T}|163|\\c{t}|164|\\check{T}|165|\\check{t}|168|\\tilde{U}|169|\\tilde{u}|16A|\\bar{U}|16B|\\bar{u}|16C|\\breve{U}|16D|\\breve{u}|16E|\\mathring{U}|16F|\\mathring{u}|170|\\H{U}|171|\\H{u}|172|\\k{U}|173|\\k{u}|174|\\hat{W}|175|\\hat{w}|176|\\hat{Y}|177|\\hat{y}|178|\\ddot{Y}|179|\\acute{Z}|17A|\\acute{z}|17B|\\dot{Z}|17C|\\dot{z}|17D|\\check{Z}|17E|\\check{z}|195|\\texthvlig|19E|\\textnrleg|1AA|\\eth|1C2|\\textdoublepipe|1F5|\\acute{g}|250|\\Elztrna|252|\\Elztrnsa|254|\\Elzopeno|256|\\Elzrtld|259|\\Elzschwa|25B|\\varepsilon|263|\\Elzpgamma|264|\\Elzpbgam|265|\\Elztrnh|26C|\\Elzbtdl|26D|\\Elzrtll|26F|\\Elztrnm|270|\\Elztrnmlr|271|\\Elzltlmr|272|\\Elzltln|273|\\Elzrtln|277|\\Elzclomeg|278|\\textphi|279|\\Elztrnr|27A|\\Elztrnrl|27B|\\Elzrttrnr|27C|\\Elzrl|27D|\\Elzrtlr|27E|\\Elzfhr|282|\\Elzrtls|283|\\Elzesh|287|\\Elztrnt|288|\\Elzrtlt|28A|\\Elzpupsil|28B|\\Elzpscrv|28C|\\Elzinvv|28D|\\Elzinvw|28E|\\Elztrny|290|\\Elzrtlz|292|\\Elzyogh|294|\\Elzglst|295|\\Elzreglst|296|\\Elzinglst|29E|\\textturnk|2A4|\\Elzdyogh|2A7|\\Elztesh|2C7|\\textasciicaron|2C8|\\Elzverts|2CC|\\Elzverti|2D0|\\Elzlmrk|2D1|\\Elzhlmrk|2D2|\\Elzsbrhr|2D3|\\Elzsblhr|2D4|\\Elzrais|2D5|\\Elzlow|2D8|\\u|2D9|\\dot{}|2DA|\\mathring{}|2DB|\\k{}|2DC|\\texttildelow|2DD|\\H{}|2E5|\\tone{55}|2E6|\\tone{44}|2E7|\\tone{33}|2E8|\\tone{22}|2E9|\\tone{11}|300|\\grave|301|\\acute|302|\\hat|303|\\tilde|304|\\bar|306|\\breve|307|\\dot|308|\\ddot|30A|\\r|30B|\\H|30C|\\check|30F|\\cyrchar\\C|321|\\Elzpalh|322|\\Elzrh|327|\\c|328|\\k|32A|\\Elzsbbrg|335|\\Elzxl|336|\\Elzbar|389|\\grave{H}|38A|\\mathrm{'I}|38C|\\mathrm{'O}|38E|\\mathrm{'Y}|38F|\\mathrm{'\\Omega}|390|\\acute{\\ddot{\\iota}}|391|\\Alpha|392|\\Beta|393|\\Gamma|394|\\Delta|395|\\Epsilon|396|\\Zeta|397|\\Eta|398|\\Theta|399|\\Iota|39A|\\Kappa|39B|\\Lambda|39E|\\Xi|3A0|\\Pi|3A1|\\Rho|3A3|\\Sigma|3A4|\\Tau|3A5|\\Upsilon|3A6|\\Phi|3A7|\\Chi|3A8|\\Psi|3A9|\\Omega|3AA|\\mathrm{\\ddot{I}}|3AB|\\mathrm{\\ddot{Y}}|3AC|\\acute{\\alpha}|3AD|\\acute{\\epsilon}|3AE|\\acute{\\eta}|3AF|\\acute{\\iota}|3B0|\\acute{\\ddot{\\upsilon}}|3B1|\\alpha|3B2|\\beta|3B3|\\gamma|3B4|\\delta|3B5|\\epsilon|3B6|\\zeta|3B7|\\eta|3B8|\\theta|3B9|\\iota|3BA|\\kappa|3BB|\\lambda|3BC|\\mu|3BD|\\nu|3BE|\\xi|3C0|\\pi|3C1|\\rho|3C2|\\varsigma|3C3|\\sigma|3C4|\\tau|3C5|\\upsilon|3C6|\\varphi|3C7|\\chi|3C8|\\psi|3C9|\\omega|3CA|\\ddot{\\iota}|3CB|\\ddot{\\upsilon}|3CD|\\acute{\\upsilon}|3CE|\\acute{\\omega}|3D0|\\Pisymbol{ppi022}{87}|3D1|\\vartheta|3D5|\\phi|3D6|\\varpi|3DA|\\Stigma|3DC|\\Digamma|3DD|\\digamma|3DE|\\Koppa|3E0|\\Sampi|3F0|\\varkappa|3F1|\\varrho|3F4|\\textTheta|3F6|\\backepsilon|401|\\cyrchar\\CYRYO|402|\\cyrchar\\CYRDJE|403|\\cyrchar{\\'\\CYRG}|404|\\cyrchar\\CYRIE|405|\\cyrchar\\CYRDZE|406|\\cyrchar\\CYRII|407|\\cyrchar\\CYRYI|408|\\cyrchar\\CYRJE|409|\\cyrchar\\CYRLJE|40A|\\cyrchar\\CYRNJE|40B|\\cyrchar\\CYRTSHE|40C|\\cyrchar{\\'\\CYRK}|40E|\\cyrchar\\CYRUSHRT|40F|\\cyrchar\\CYRDZHE|410|\\cyrchar\\CYRA|411|\\cyrchar\\CYRB|412|\\cyrchar\\CYRV|413|\\cyrchar\\CYRG|414|\\cyrchar\\CYRD|415|\\cyrchar\\CYRE|416|\\cyrchar\\CYRZH|417|\\cyrchar\\CYRZ|418|\\cyrchar\\CYRI|419|\\cyrchar\\CYRISHRT|41A|\\cyrchar\\CYRK|41B|\\cyrchar\\CYRL|41C|\\cyrchar\\CYRM|41D|\\cyrchar\\CYRN|41E|\\cyrchar\\CYRO|41F|\\cyrchar\\CYRP|420|\\cyrchar\\CYRR|421|\\cyrchar\\CYRS|422|\\cyrchar\\CYRT|423|\\cyrchar\\CYRU|424|\\cyrchar\\CYRF|425|\\cyrchar\\CYRH|426|\\cyrchar\\CYRC|427|\\cyrchar\\CYRCH|428|\\cyrchar\\CYRSH|429|\\cyrchar\\CYRSHCH|42A|\\cyrchar\\CYRHRDSN|42B|\\cyrchar\\CYRERY|42C|\\cyrchar\\CYRSFTSN|42D|\\cyrchar\\CYREREV|42E|\\cyrchar\\CYRYU|42F|\\cyrchar\\CYRYA|430|\\cyrchar\\cyra|431|\\cyrchar\\cyrb|432|\\cyrchar\\cyrv|433|\\cyrchar\\cyrg|434|\\cyrchar\\cyrd|435|\\cyrchar\\cyre|436|\\cyrchar\\cyrzh|437|\\cyrchar\\cyrz|438|\\cyrchar\\cyri|439|\\cyrchar\\cyrishrt|43A|\\cyrchar\\cyrk|43B|\\cyrchar\\cyrl|43C|\\cyrchar\\cyrm|43D|\\cyrchar\\cyrn|43E|\\cyrchar\\cyro|43F|\\cyrchar\\cyrp|440|\\cyrchar\\cyrr|441|\\cyrchar\\cyrs|442|\\cyrchar\\cyrt|443|\\cyrchar\\cyru|444|\\cyrchar\\cyrf|445|\\cyrchar\\cyrh|446|\\cyrchar\\cyrc|447|\\cyrchar\\cyrch|448|\\cyrchar\\cyrsh|449|\\cyrchar\\cyrshch|44A|\\cyrchar\\cyrhrdsn|44B|\\cyrchar\\cyrery|44C|\\cyrchar\\cyrsftsn|44D|\\cyrchar\\cyrerev|44E|\\cyrchar\\cyryu|44F|\\cyrchar\\cyrya|451|\\cyrchar\\cyryo|452|\\cyrchar\\cyrdje|453|\\cyrchar{\\'\\cyrg}|454|\\cyrchar\\cyrie|455|\\cyrchar\\cyrdze|456|\\cyrchar\\cyrii|457|\\cyrchar\\cyryi|458|\\cyrchar\\cyrje|459|\\cyrchar\\cyrlje|45A|\\cyrchar\\cyrnje|45B|\\cyrchar\\cyrtshe|45C|\\cyrchar{\\'\\cyrk}|45E|\\cyrchar\\cyrushrt|45F|\\cyrchar\\cyrdzhe|460|\\cyrchar\\CYROMEGA|461|\\cyrchar\\cyromega|462|\\cyrchar\\CYRYAT|464|\\cyrchar\\CYRIOTE|465|\\cyrchar\\cyriote|466|\\cyrchar\\CYRLYUS|467|\\cyrchar\\cyrlyus|468|\\cyrchar\\CYRIOTLYUS|469|\\cyrchar\\cyriotlyus|46A|\\cyrchar\\CYRBYUS|46C|\\cyrchar\\CYRIOTBYUS|46D|\\cyrchar\\cyriotbyus|46E|\\cyrchar\\CYRKSI|46F|\\cyrchar\\cyrksi|470|\\cyrchar\\CYRPSI|471|\\cyrchar\\cyrpsi|472|\\cyrchar\\CYRFITA|474|\\cyrchar\\CYRIZH|478|\\cyrchar\\CYRUK|479|\\cyrchar\\cyruk|47A|\\cyrchar\\CYROMEGARND|47B|\\cyrchar\\cyromegarnd|47C|\\cyrchar\\CYROMEGATITLO|47D|\\cyrchar\\cyromegatitlo|47E|\\cyrchar\\CYROT|47F|\\cyrchar\\cyrot|480|\\cyrchar\\CYRKOPPA|481|\\cyrchar\\cyrkoppa|482|\\cyrchar\\cyrthousands|488|\\cyrchar\\cyrhundredthousands|489|\\cyrchar\\cyrmillions|48C|\\cyrchar\\CYRSEMISFTSN|48D|\\cyrchar\\cyrsemisftsn|48E|\\cyrchar\\CYRRTICK|48F|\\cyrchar\\cyrrtick|490|\\cyrchar\\CYRGUP|491|\\cyrchar\\cyrgup|492|\\cyrchar\\CYRGHCRS|493|\\cyrchar\\cyrghcrs|494|\\cyrchar\\CYRGHK|495|\\cyrchar\\cyrghk|496|\\cyrchar\\CYRZHDSC|497|\\cyrchar\\cyrzhdsc|498|\\cyrchar\\CYRZDSC|499|\\cyrchar\\cyrzdsc|49A|\\cyrchar\\CYRKDSC|49B|\\cyrchar\\cyrkdsc|49C|\\cyrchar\\CYRKVCRS|49D|\\cyrchar\\cyrkvcrs|49E|\\cyrchar\\CYRKHCRS|49F|\\cyrchar\\cyrkhcrs|4A0|\\cyrchar\\CYRKBEAK|4A1|\\cyrchar\\cyrkbeak|4A2|\\cyrchar\\CYRNDSC|4A3|\\cyrchar\\cyrndsc|4A4|\\cyrchar\\CYRNG|4A5|\\cyrchar\\cyrng|4A6|\\cyrchar\\CYRPHK|4A7|\\cyrchar\\cyrphk|4A8|\\cyrchar\\CYRABHHA|4A9|\\cyrchar\\cyrabhha|4AA|\\cyrchar\\CYRSDSC|4AB|\\cyrchar\\cyrsdsc|4AC|\\cyrchar\\CYRTDSC|4AD|\\cyrchar\\cyrtdsc|4AE|\\cyrchar\\CYRY|4AF|\\cyrchar\\cyry|4B0|\\cyrchar\\CYRYHCRS|4B1|\\cyrchar\\cyryhcrs|4B2|\\cyrchar\\CYRHDSC|4B3|\\cyrchar\\cyrhdsc|4B4|\\cyrchar\\CYRTETSE|4B5|\\cyrchar\\cyrtetse|4B6|\\cyrchar\\CYRCHRDSC|4B7|\\cyrchar\\cyrchrdsc|4B8|\\cyrchar\\CYRCHVCRS|4B9|\\cyrchar\\cyrchvcrs|4BA|\\cyrchar\\CYRSHHA|4BB|\\cyrchar\\cyrshha|4BC|\\cyrchar\\CYRABHCH|4BD|\\cyrchar\\cyrabhch|4BE|\\cyrchar\\CYRABHCHDSC|4BF|\\cyrchar\\cyrabhchdsc|4C0|\\cyrchar\\CYRpalochka|4C3|\\cyrchar\\CYRKHK|4C4|\\cyrchar\\cyrkhk|4C7|\\cyrchar\\CYRNHK|4C8|\\cyrchar\\cyrnhk|4CB|\\cyrchar\\CYRCHLDSC|4CC|\\cyrchar\\cyrchldsc|4D4|\\cyrchar\\CYRAE|4D5|\\cyrchar\\cyrae|4D8|\\cyrchar\\CYRSCHWA|4D9|\\cyrchar\\cyrschwa|4E0|\\cyrchar\\CYRABHDZE|4E1|\\cyrchar\\cyrabhdze|4E8|\\cyrchar\\CYROTLD|4E9|\\cyrchar\\cyrotld|2002|\\hspace{0.6em}|2003|\\hspace{1em}|2004|\\hspace{0.33em}|2005|\\hspace{0.25em}|2006|\\hspace{0.166em}|2007|\\hphantom{0}|2008|\\hphantom{,}|2009|\\hspace{0.167em}|200A|\\mkern1mu|2013|\\textendash|2015|\\rule{1em}{1pt}|2016|\\Vert|201B|\\Elzreapos|201C|\\textquotedblleft|201D|\\textquotedblright|2020|\\dag|2021|\\ddag|2022|\\bullet|2026|\\ldots|2030|\\textperthousand|2031|\\textpertenthousand|2035|\\backprime|2039|\\guilsinglleft|203A|\\guilsinglright|205F|\\mkern4mu|2060|\\nolinebreak|20A7|\\Elzpes|20AC|\\texteuro|20DB|\\dddot|20DC|\\ddddot|2102|\\mathbb{C}|210A|\\mathscr{g}|210B|\\mathscr{H}|210C|\\mathfrak{H}|210D|\\mathbb{H}|210F|\\hslash|2110|\\mathscr{I}|2111|\\mathfrak{I}|2112|\\mathscr{L}|2113|\\mathscr{l}|2115|\\mathbb{N}|2116|\\cyrchar\\textnumero|2118|\\wp|2119|\\mathbb{P}|211A|\\mathbb{Q}|211B|\\mathscr{R}|211C|\\mathfrak{R}|211D|\\mathbb{R}|211E|\\Elzxrat|2122|\\texttrademark|2124|\\mathbb{Z}|2127|\\mho|2128|\\mathfrak{Z}|2129|\\ElsevierGlyph{2129}|212C|\\mathscr{B}|212D|\\mathfrak{C}|212F|\\mathscr{e}|2130|\\mathscr{E}|2131|\\mathscr{F}|2133|\\mathscr{M}|2134|\\mathscr{o}|2135|\\aleph|2136|\\beth|2137|\\gimel|2138|\\daleth|2153|\\textfrac{1}{3}|2154|\\textfrac{2}{3}|2155|\\textfrac{1}{5}|2156|\\textfrac{2}{5}|2157|\\textfrac{3}{5}|2158|\\textfrac{4}{5}|2159|\\textfrac{1}{6}|215A|\\textfrac{5}{6}|215B|\\textfrac{1}{8}|215C|\\textfrac{3}{8}|215D|\\textfrac{5}{8}|215E|\\textfrac{7}{8}|2190|\\leftarrow|2191|\\uparrow|2192|\\rightarrow|2193|\\downarrow|2194|\\leftrightarrow|2195|\\updownarrow|2196|\\nwarrow|2197|\\nearrow|2198|\\searrow|2199|\\swarrow|219A|\\nleftarrow|219B|\\nrightarrow|219C|\\arrowwaveright|219E|\\twoheadleftarrow|21A0|\\twoheadrightarrow|21A2|\\leftarrowtail|21A3|\\rightarrowtail|21A6|\\mapsto|21A9|\\hookleftarrow|21AA|\\hookrightarrow|21AB|\\looparrowleft|21AC|\\looparrowright|21AD|\\leftrightsquigarrow|21AE|\\nleftrightarrow|21B0|\\Lsh|21B1|\\Rsh|21B3|\\ElsevierGlyph{21B3}|21B6|\\curvearrowleft|21B7|\\curvearrowright|21BA|\\circlearrowleft|21BB|\\circlearrowright|21BC|\\leftharpoonup|21BD|\\leftharpoondown|21BE|\\upharpoonright|21BF|\\upharpoonleft|21C0|\\rightharpoonup|21C1|\\rightharpoondown|21C2|\\downharpoonright|21C3|\\downharpoonleft|21C4|\\rightleftarrows|21C5|\\dblarrowupdown|21C6|\\leftrightarrows|21C7|\\leftleftarrows|21C8|\\upuparrows|21C9|\\rightrightarrows|21CA|\\downdownarrows|21CB|\\leftrightharpoons|21CC|\\rightleftharpoons|21CD|\\nLeftarrow|21CE|\\nLeftrightarrow|21CF|\\nRightarrow|21D0|\\Leftarrow|21D1|\\Uparrow|21D2|\\Rightarrow|21D3|\\Downarrow|21D4|\\Leftrightarrow|21D5|\\Updownarrow|21DA|\\Lleftarrow|21DB|\\Rrightarrow|21DD|\\rightsquigarrow|21F5|\\DownArrowUpArrow|2200|\\forall|2201|\\complement|2202|\\partial|2203|\\exists|2204|\\nexists|2205|\\varnothing|2207|\\nabla|2208|\\in|2209|\\not\\in|220B|\\ni|220C|\\not\\ni|220F|\\prod|2210|\\coprod|2211|\\sum|2213|\\mp|2214|\\dotplus|2216|\\setminus|2218|\\circ|221A|\\surd|221D|\\propto|221E|\\infty|221F|\\rightangle|2220|\\angle|2221|\\measuredangle|2222|\\sphericalangle|2223|\\mid|2224|\\nmid|2225|\\parallel|2226|\\nparallel|2227|\\wedge|2228|\\vee|2229|\\cap|222A|\\cup|222B|\\int|222C|\\int\\!\\int|222D|\\int\\!\\int\\!\\int|222E|\\oint|222F|\\surfintegral|2230|\\volintegral|2231|\\clwintegral|2232|\\ElsevierGlyph{2232}|2233|\\ElsevierGlyph{2233}|2234|\\therefore|2235|\\because|2237|\\Colon|2238|\\ElsevierGlyph{2238}|223A|\\mathbin{{:}\\!\\!{-}\\!\\!{:}}|223B|\\homothetic|223C|\\sim|223D|\\backsim|223E|\\lazysinv|2240|\\wr|2241|\\not\\sim|2242|\\ElsevierGlyph{2242}|E05C|\\NotEqualTilde|2243|\\simeq|2244|\\not\\simeq|2245|\\cong|2246|\\approxnotequal|2247|\\not\\cong|2248|\\approx|2249|\\not\\approx|224A|\\approxeq|224B|\\tildetrpl|E01E|\\not\\apid|224C|\\allequal|224D|\\asymp|224E|\\Bumpeq|E052|\\NotHumpDownHump|224F|\\bumpeq|E05B|\\NotHumpEqual|2250|\\doteq|E039|\\not\\doteq|2251|\\doteqdot|2252|\\fallingdotseq|2253|\\risingdotseq|2256|\\eqcirc|2257|\\circeq|2259|\\estimates|225A|\\ElsevierGlyph{225A}|225B|\\starequal|225C|\\triangleq|225F|\\ElsevierGlyph{225F}|2260|\\not =|2261|\\equiv|2262|\\not\\equiv|2264|\\leq|2265|\\geq|2266|\\leqq|2267|\\geqq|2268|\\lneqq|2269|\\gneqq|226A|\\ll|E028|\\NotLessLess|226B|\\gg|E029|\\NotGreaterGreater|226C|\\between|226D|\\not\\kern-0.3em\\times|226E|\\not<|226F|\\not>|2270|\\not\\leq|2271|\\not\\geq|2272|\\lessequivlnt|2273|\\greaterequivlnt|2274|\\ElsevierGlyph{2274}|2275|\\ElsevierGlyph{2275}|2276|\\lessgtr|2277|\\gtrless|2278|\\notlessgreater|2279|\\notgreaterless|227A|\\prec|227B|\\succ|227C|\\preccurlyeq|227D|\\succcurlyeq|227E|\\precapprox|E059|\\NotPrecedesTilde|227F|\\succapprox|E05A|\\NotSucceedsTilde|2280|\\not\\prec|2281|\\not\\succ|2282|\\subset|2283|\\supset|2284|\\not\\subset|2285|\\not\\supset|2286|\\subseteq|2287|\\supseteq|2288|\\not\\subseteq|2289|\\not\\supseteq|228A|\\subsetneq|228B|\\supsetneq|228E|\\uplus|228F|\\sqsubset|E050|\\NotSquareSubset|2290|\\sqsupset|E051|\\NotSquareSuperset|2291|\\sqsubseteq|2292|\\sqsupseteq|2293|\\sqcap|2294|\\sqcup|2295|\\oplus|2296|\\ominus|2297|\\otimes|2298|\\oslash|2299|\\odot|229A|\\circledcirc|229B|\\circledast|229D|\\circleddash|229E|\\boxplus|229F|\\boxminus|22A0|\\boxtimes|22A1|\\boxdot|22A2|\\vdash|22A3|\\dashv|22A4|\\top|22A5|\\perp|22A7|\\truestate|22A8|\\forcesextra|22A9|\\Vdash|22AA|\\Vvdash|22AB|\\VDash|22AC|\\nvdash|22AD|\\nvDash|22AE|\\nVdash|22AF|\\nVDash|22B2|\\vartriangleleft|22B3|\\vartriangleright|22B4|\\trianglelefteq|22B5|\\trianglerighteq|22B6|\\original|22B7|\\image|22B8|\\multimap|22B9|\\hermitconjmatrix|22BA|\\intercal|22BB|\\veebar|22BE|\\rightanglearc|22C0|\\ElsevierGlyph{22C0}|22C1|\\ElsevierGlyph{22C1}|22C2|\\bigcap|22C3|\\bigcup|22C4|\\diamond|22C6|\\star|22C7|\\divideontimes|22C8|\\bowtie|22C9|\\ltimes|22CA|\\rtimes|22CB|\\leftthreetimes|22CC|\\rightthreetimes|22CD|\\backsimeq|22CE|\\curlyvee|22CF|\\curlywedge|22D0|\\Subset|22D1|\\Supset|22D2|\\Cap|22D3|\\Cup|22D4|\\pitchfork|22D6|\\lessdot|22D7|\\gtrdot|22D8|\\verymuchless|22D9|\\verymuchgreater|22DA|\\lesseqgtr|22DB|\\gtreqless|22DE|\\curlyeqprec|22DF|\\curlyeqsucc|22E2|\\not\\sqsubseteq|22E3|\\not\\sqsupseteq|22E5|\\Elzsqspne|22E6|\\lnsim|22E7|\\gnsim|22E8|\\precedesnotsimilar|22E9|\\succnsim|22EA|\\ntriangleleft|22EB|\\ntriangleright|22EC|\\ntrianglelefteq|22ED|\\ntrianglerighteq|22EE|\\vdots|22EF|\\cdots|22F0|\\upslopeellipsis|22F1|\\downslopeellipsis|2305|\\barwedge|2306|\\perspcorrespond|2308|\\lceil|2309|\\rceil|230A|\\lfloor|230B|\\rfloor|2315|\\recorder|231C|\\ulcorner|231D|\\urcorner|231E|\\llcorner|231F|\\lrcorner|2322|\\frown|2323|\\smile|2329|\\langle|232A|\\rangle|233D|\\ElsevierGlyph{E838}|23A3|\\Elzdlcorn|23B0|\\lmoustache|23B1|\\rmoustache|2423|\\textvisiblespace|2460|\\ding{172}|2461|\\ding{173}|2462|\\ding{174}|2463|\\ding{175}|2464|\\ding{176}|2465|\\ding{177}|2466|\\ding{178}|2467|\\ding{179}|2468|\\ding{180}|2469|\\ding{181}|24C8|\\circledS|2506|\\Elzdshfnc|2519|\\Elzsqfnw|2571|\\diagup|25A0|\\ding{110}|25A1|\\square|25AA|\\blacksquare|25AD|\\fbox{~~}|25AF|\\Elzvrecto|25B1|\\ElsevierGlyph{E381}|25B2|\\ding{115}|25B3|\\bigtriangleup|25B4|\\blacktriangle|25B5|\\vartriangle|25B8|\\blacktriangleright|25B9|\\triangleright|25BC|\\ding{116}|25BD|\\bigtriangledown|25BE|\\blacktriangledown|25BF|\\triangledown|25C2|\\blacktriangleleft|25C3|\\triangleleft|25C6|\\ding{117}|25CA|\\lozenge|25CB|\\bigcirc|25CF|\\ding{108}|25D0|\\Elzcirfl|25D1|\\Elzcirfr|25D2|\\Elzcirfb|25D7|\\ding{119}|25D8|\\Elzrvbull|25E7|\\Elzsqfl|25E8|\\Elzsqfr|25EA|\\Elzsqfse|2605|\\ding{72}|2606|\\ding{73}|260E|\\ding{37}|261B|\\ding{42}|261E|\\ding{43}|263E|\\rightmoon|263F|\\mercury|2640|\\venus|2642|\\male|2643|\\jupiter|2644|\\saturn|2645|\\uranus|2646|\\neptune|2647|\\pluto|2648|\\aries|2649|\\taurus|264A|\\gemini|264B|\\cancer|264C|\\leo|264D|\\virgo|264E|\\libra|264F|\\scorpio|2650|\\sagittarius|2651|\\capricornus|2652|\\aquarius|2653|\\pisces|2660|\\ding{171}|2663|\\ding{168}|2665|\\ding{170}|2666|\\ding{169}|2669|\\quarternote|266A|\\eighthnote|266D|\\flat|266E|\\natural|266F|\\sharp|2701|\\ding{33}|2702|\\ding{34}|2703|\\ding{35}|2704|\\ding{36}|2706|\\ding{38}|2707|\\ding{39}|2708|\\ding{40}|2709|\\ding{41}|270C|\\ding{44}|270D|\\ding{45}|270E|\\ding{46}|270F|\\ding{47}|2710|\\ding{48}|2711|\\ding{49}|2712|\\ding{50}|2713|\\ding{51}|2714|\\ding{52}|2715|\\ding{53}|2716|\\ding{54}|2717|\\ding{55}|2718|\\ding{56}|2719|\\ding{57}|271A|\\ding{58}|271B|\\ding{59}|271C|\\ding{60}|271D|\\ding{61}|271E|\\ding{62}|271F|\\ding{63}|2720|\\ding{64}|2721|\\ding{65}|2722|\\ding{66}|2723|\\ding{67}|2724|\\ding{68}|2725|\\ding{69}|2726|\\ding{70}|2727|\\ding{71}|272A|\\ding{74}|272B|\\ding{75}|272C|\\ding{76}|272D|\\ding{77}|272E|\\ding{78}|272F|\\ding{79}|2730|\\ding{80}|2731|\\ding{81}|2732|\\ding{82}|2733|\\ding{83}|2734|\\ding{84}|2735|\\ding{85}|2736|\\ding{86}|2737|\\ding{87}|2738|\\ding{88}|2739|\\ding{89}|273A|\\ding{90}|273B|\\ding{91}|273C|\\ding{92}|273D|\\ding{93}|273E|\\ding{94}|273F|\\ding{95}|2740|\\ding{96}|2741|\\ding{97}|2742|\\ding{98}|2743|\\ding{99}|2744|\\ding{100}|2745|\\ding{101}|2746|\\ding{102}|2747|\\ding{103}|2748|\\ding{104}|2749|\\ding{105}|274A|\\ding{106}|274B|\\ding{107}|274D|\\ding{109}|274F|\\ding{111}|2750|\\ding{112}|2751|\\ding{113}|2752|\\ding{114}|2756|\\ding{118}|2758|\\ding{120}|2759|\\ding{121}|275A|\\ding{122}|275B|\\ding{123}|275C|\\ding{124}|275D|\\ding{125}|275E|\\ding{126}|2761|\\ding{161}|2762|\\ding{162}|2763|\\ding{163}|2764|\\ding{164}|2765|\\ding{165}|2766|\\ding{166}|2767|\\ding{167}|2776|\\ding{182}|2777|\\ding{183}|2778|\\ding{184}|2779|\\ding{185}|277A|\\ding{186}|277B|\\ding{187}|277C|\\ding{188}|277D|\\ding{189}|277E|\\ding{190}|277F|\\ding{191}|2780|\\ding{192}|2781|\\ding{193}|2782|\\ding{194}|2783|\\ding{195}|2784|\\ding{196}|2785|\\ding{197}|2786|\\ding{198}|2787|\\ding{199}|2788|\\ding{200}|2789|\\ding{201}|278A|\\ding{202}|278B|\\ding{203}|278C|\\ding{204}|278D|\\ding{205}|278E|\\ding{206}|278F|\\ding{207}|2790|\\ding{208}|2791|\\ding{209}|2792|\\ding{210}|2793|\\ding{211}|2794|\\ding{212}|2798|\\ding{216}|2799|\\ding{217}|279A|\\ding{218}|279B|\\ding{219}|279C|\\ding{220}|279D|\\ding{221}|279E|\\ding{222}|279F|\\ding{223}|27A0|\\ding{224}|27A1|\\ding{225}|27A2|\\ding{226}|27A3|\\ding{227}|27A4|\\ding{228}|27A5|\\ding{229}|27A6|\\ding{230}|27A7|\\ding{231}|27A8|\\ding{232}|27A9|\\ding{233}|27AA|\\ding{234}|27AB|\\ding{235}|27AC|\\ding{236}|27AD|\\ding{237}|27AE|\\ding{238}|27AF|\\ding{239}|27B1|\\ding{241}|27B2|\\ding{242}|27B3|\\ding{243}|27B4|\\ding{244}|27B5|\\ding{245}|27B6|\\ding{246}|27B7|\\ding{247}|27B8|\\ding{248}|27B9|\\ding{249}|27BA|\\ding{250}|27BB|\\ding{251}|27BC|\\ding{252}|27BD|\\ding{253}|27BE|\\ding{254}|27F5|\\longleftarrow|27F6|\\longrightarrow|27F7|\\longleftrightarrow|27F8|\\Longleftarrow|27F9|\\Longrightarrow|27FA|\\Longleftrightarrow|27FC|\\longmapsto|27FF|\\sim\\joinrel\\leadsto|2905|\\ElsevierGlyph{E212}|2912|\\UpArrowBar|2913|\\DownArrowBar|2923|\\ElsevierGlyph{E20C}|2924|\\ElsevierGlyph{E20D}|2925|\\ElsevierGlyph{E20B}|2926|\\ElsevierGlyph{E20A}|2927|\\ElsevierGlyph{E211}|2928|\\ElsevierGlyph{E20E}|2929|\\ElsevierGlyph{E20F}|292A|\\ElsevierGlyph{E210}|2933|\\ElsevierGlyph{E21C}|E005|\\ElsevierGlyph{E21D}|2936|\\ElsevierGlyph{E21A}|2937|\\ElsevierGlyph{E219}|2940|\\Elolarr|2941|\\Elorarr|2942|\\ElzRlarr|2944|\\ElzrLarr|2947|\\Elzrarrx|294E|\\LeftRightVector|294F|\\RightUpDownVector|2950|\\DownLeftRightVector|2951|\\LeftUpDownVector|2952|\\LeftVectorBar|2953|\\RightVectorBar|2954|\\RightUpVectorBar|2955|\\RightDownVectorBar|2956|\\DownLeftVectorBar|2957|\\DownRightVectorBar|2958|\\LeftUpVectorBar|2959|\\LeftDownVectorBar|295A|\\LeftTeeVector|295B|\\RightTeeVector|295C|\\RightUpTeeVector|295D|\\RightDownTeeVector|295E|\\DownLeftTeeVector|295F|\\DownRightTeeVector|2960|\\LeftUpTeeVector|2961|\\LeftDownTeeVector|296E|\\UpEquilibrium|296F|\\ReverseUpEquilibrium|2970|\\RoundImplies|297C|\\ElsevierGlyph{E214}|297D|\\ElsevierGlyph{E215}|2980|\\Elztfnc|2985|\\ElsevierGlyph{3018}|2986|\\Elroang|2994|\\ElsevierGlyph{E291}|2999|\\Elzddfnc|299C|\\Angle|29A0|\\Elzlpargt|29B5|\\ElsevierGlyph{E260}|29B6|\\ElsevierGlyph{E61B}|29CA|\\ElzLap|29CB|\\Elzdefas|29CF|\\LeftTriangleBar|E14C|\\NotLeftTriangleBar|29D0|\\RightTriangleBar|E14D|\\NotRightTriangleBar|29DC|\\ElsevierGlyph{E372}|29EB|\\blacklozenge|29F4|\\RuleDelayed|2A04|\\Elxuplus|2A05|\\ElzThr|2A06|\\Elxsqcup|2A07|\\ElzInf|2A08|\\ElzSup|2A0D|\\ElzCint|2A0F|\\clockoint|2A10|\\ElsevierGlyph{E395}|2A16|\\sqrint|2A25|\\ElsevierGlyph{E25A}|2A2A|\\ElsevierGlyph{E25B}|2A2D|\\ElsevierGlyph{E25C}|2A2E|\\ElsevierGlyph{E25D}|2A2F|\\ElzTimes|2A34|\\ElsevierGlyph{E25E}|2A3C|\\ElsevierGlyph{E259}|2A3F|\\amalg|2A53|\\ElzAnd|2A54|\\ElzOr|2A55|\\ElsevierGlyph{E36E}|2A56|\\ElOr|2A5F|\\Elzminhat|2A6E|\\stackrel{*}{=}|2A75|\\Equal|2A7D|\\leqslant|E010|\\nleqslant|2A7E|\\geqslant|E00F|\\ngeqslant|2A85|\\lessapprox|2A86|\\gtrapprox|2A87|\\lneq|2A88|\\gneq|2A89|\\lnapprox|2A8A|\\gnapprox|2A8B|\\lesseqqgtr|2A8C|\\gtreqqless|2A95|\\eqslantless|2A96|\\eqslantgtr|2A9D|\\Pisymbol{ppi020}{117}|2A9E|\\Pisymbol{ppi020}{105}|2AA1|\\NestedLessLess|E14E|\\NotNestedLessLess|2AA2|\\NestedGreaterGreater|E14F|\\NotNestedGreaterGreater|2AAF|\\preceq|E04B|\\not\\preceq|2AB0|\\succeq|E04F|\\not\\succeq|2AB5|\\precneqq|2AB6|\\succneqq|2AB9|\\precnapprox|2ABA|\\succnapprox|2AC5|\\subseteqq|E016|\\nsubseteqq|2AC6|\\supseteqq|E018|\\nsupseteqq|2ACB|\\subsetneqq|2ACC|\\supsetneqq|2AEB|\\ElsevierGlyph{E30D}|2AF6|\\Elztdcol|300A|\\ElsevierGlyph{300A}|300B|\\ElsevierGlyph{300B}|3019|\\ElsevierGlyph{3019}|301A|\\openbracketleft|301B|\\openbracketright|";
  var fj = ",lvert,rvert,lVert,rVert,lgroup,rgroup,land,sphericalangle,circ,oiint,cdots,ddots,exists,infty,iint,neq,owns,lor,partial,surd,to,doublecap,doublecup,oslash,cdot,star,nmid,backslash,gets,neg,lnot,to,gggtr,lll,llless,smallfrown,smallsmile,";
  var ai = ",verbar,verbar,par,par,lpar,rpar,and,angsph,compfn,Conint,ctdot,dtdot,exist,infin,Int,ne,ni,or,part,radic,rarr,Cap,Cup,osol,sdot,sstarf,rnmid,bsol,larr,not,not,rarr,Gg,Ll,Ll,sfrown,ssmile,";
  var aY = ";EOFB=5-18em;";
  var bV = ";|||=2980;||=2016;";
  var S = ";66=E0B3;";
  var d2 = ";205F=E0FB;";
  var b6 = ";223D=E00A;";
  var b4 = ";223E=E00B;";
  var bW = ";219D=E004;2202=E03A;2242=E05C;224B=E01E;224E=E052;224F=E05B;2250=E039;2266=E011;2267=E00E;226A=E028;226B=E029;227E=E059;227F=E05A;228F=E050;2290=E051;22D8=E02A;22D9=E02B;22F5=E03B;22F9=E03C;2933=E005;29CF=E14C;29D0=E14D;2A6D=E023;2A70=E025;2A7D=E010;2A7E=E00F;2AA1=E14E;2AA2=E14F;2AAF=E04B;2AB0=E04F;2AC5=E016;2AC6=E018;";
  var ff = ";3C=E434;3D=E42F;3E=E435;2208=E415;220A=E06B;220B=E417;220D=E06C;2220=E02F;223C=E429;223D=E45E;2242=E04D;2245=E42B;2248=E42D;224A=E3C3;224B=E45F;224D=E433;2261=E430;2263=E07D;2264=E07E;2265=E07F;2266=E080;2267=E081;226A=E460;226B=E461;2272=E43A;2273=E43B;2276=E462;2277=E463;227A=E43E;227B=E43F;227C=E44D;227F=E44E;2282=E440;2283=E441;2286=E442;2287=E443;228F=E464;2290=E465;2291=E466;2292=E467;22B2=E468;22B3=E469;22B4=E44F;22B5=E450;22CD=E42A;";
  var eV = ";3D=E037;2261=E3C2;2AFD=E038;";
  var dl = ";2229=E424;222A=E425;2268=E431;2269=E432;2272=E438;2273=E439;228A=E444;228B=E445;2293=E446;2294=E447;2295=E448;2297=E449;229C=E44A;22DA=E44B;22DB=E44C;2A3C=E455;2A3D=E456;2A9D=E457;2A9E=E458;2AAC=E459;2AAD=E45A;2ACB=E45B;2ACC=E45C;";
  var fh = ";9=Tab;A=NewLine;21=excl;22=quot=QUOT;23=num;24=dollar;25=percnt;26=amp=AMP;27=apos;28=lpar;29=rpar;2A=ast=midast;2B=plus;2C=comma;2E=period;2F=sol;3A=colon;3B=semi;3C=lt=LT;E434=nvlt;3D=equals;E037=bne;3E=gt=GT;E435=nvgt;3F=quest;40=commat;5B=lsqb=lbrack;5C=bsol;5D=rsqb=rbrack;5E=Hat;5F=lowbar=UnderBar;60=grave=DiacriticalGrave;E0B3=fjlig;7B=lcub=lbrace;7C=verbar=vert=VerticalLine;7D=rcub=rbrace;A0=nbsp=NonBreakingSpace;A1=iexcl;A2=cent;A3=pound;A4=curren;A5=yen;A6=brvbar;A7=sect;A8=Dot=die=DoubleDot=uml;A9=copy=COPY;AA=ordf;AB=laquo;AC=not;AD=shy;AE=reg=circledR=REG;AF=macr=strns;B0=deg;B1=plusmn=pm=PlusMinus;B2=sup2;B3=sup3;B4=acute=DiacriticalAcute;B5=micro;B6=para;B7=middot=centerdot=CenterDot;B8=cedil=Cedilla;B9=sup1;BA=ordm;BB=raquo;BC=frac14;BD=frac12=half;BE=frac34;BF=iquest;C0=Agrave;C1=Aacute;C2=Acirc;C3=Atilde;C4=Auml;C5=Aring=angst;C6=AElig;C7=Ccedil;C8=Egrave;C9=Eacute;CA=Ecirc;CB=Euml;CC=Igrave;CD=Iacute;CE=Icirc;CF=Iuml;D0=ETH;D1=Ntilde;D2=Ograve;D3=Oacute;D4=Ocirc;D5=Otilde;D6=Ouml;D7=times;D8=Oslash;D9=Ugrave;DA=Uacute;DB=Ucirc;DC=Uuml;DD=Yacute;DE=THORN;DF=szlig;E0=agrave;E1=aacute;E2=acirc;E3=atilde;E4=auml;E5=aring;E6=aelig;E7=ccedil;E8=egrave;E9=eacute;EA=ecirc;EB=euml;EC=igrave;ED=iacute;EE=icirc;EF=iuml;F0=eth;F1=ntilde;F2=ograve;F3=oacute;F4=ocirc;F5=otilde;F6=ouml;F7=divide=div;F8=oslash;F9=ugrave;FA=uacute;FB=ucirc;FC=uuml;FD=yacute;FE=thorn;FF=yuml;100=Amacr;101=amacr;102=Abreve;103=abreve;104=Aogon;105=aogon;106=Cacute;107=cacute;108=Ccirc;109=ccirc;10A=Cdot;10B=cdot;10C=Ccaron;10D=ccaron;10E=Dcaron;10F=dcaron;110=Dstrok;111=dstrok;112=Emacr;113=emacr;116=Edot;117=edot;118=Eogon;119=eogon;11A=Ecaron;11B=ecaron;11C=Gcirc;11D=gcirc;11E=Gbreve;11F=gbreve;120=Gdot;121=gdot;122=Gcedil;124=Hcirc;125=hcirc;126=Hstrok;127=hstrok;128=Itilde;129=itilde;12A=Imacr;12B=imacr;12E=Iogon;12F=iogon;130=Idot;131=imath=inodot;132=IJlig;133=ijlig;134=Jcirc;135=jcirc;136=Kcedil;137=kcedil;138=kgreen;139=Lacute;13A=lacute;13B=Lcedil;13C=lcedil;13D=Lcaron;13E=lcaron;13F=Lmidot;140=lmidot;141=Lstrok;142=lstrok;143=Nacute;144=nacute;145=Ncedil;146=ncedil;147=Ncaron;148=ncaron;149=napos;14A=ENG;14B=eng;14C=Omacr;14D=omacr;150=Odblac;151=odblac;152=OElig;153=oelig;154=Racute;155=racute;156=Rcedil;157=rcedil;158=Rcaron;159=rcaron;15A=Sacute;15B=sacute;15C=Scirc;15D=scirc;15E=Scedil;15F=scedil;160=Scaron;161=scaron;162=Tcedil;163=tcedil;164=Tcaron;165=tcaron;166=Tstrok;167=tstrok;168=Utilde;169=utilde;16A=Umacr;16B=umacr;16C=Ubreve;16D=ubreve;16E=Uring;16F=uring;170=Udblac;171=udblac;172=Uogon;173=uogon;174=Wcirc;175=wcirc;176=Ycirc;177=ycirc;178=Yuml;179=Zacute;17A=zacute;17B=Zdot;17C=zdot;17D=Zcaron;17E=zcaron;192=fnof;1B5=imped;1F5=gacute;237=jmath;2C6=circ;2C7=caron=Hacek;2D8=breve=Breve;2D9=dot=DiacriticalDot;2DA=ring;2DB=ogon;2DC=tilde=DiacriticalTilde;2DD=dblac=DiacriticalDoubleAcute;311=DownBreve;386=Aacgr;388=Eacgr;389=EEacgr;38A=Iacgr;38C=Oacgr;38E=Uacgr;38F=OHacgr;390=idiagr;391=Alpha=Agr;392=Bgr=Beta;393=Gamma=Ggr;394=Delta=Dgr;395=Egr=Epsilon;396=Zgr=Zeta;397=EEgr=Eta;398=THgr=Theta;399=Igr=Iota;39A=Kgr=Kappa;39B=Lambda=Lgr;39C=Mgr=Mu;39D=Ngr=Nu;39E=Xgr=Xi;39F=Ogr=Omicron;3A0=Pgr=Pi;3A1=Rgr=Rho;3A3=Sgr=Sigma;3A4=Tgr=Tau;3A5=Ugr=Upsilon;3A6=PHgr=Phi;3A7=KHgr=Chi;3A8=PSgr=Psi;3A9=OHgr=Omega=ohm;3AA=Idigr;3AB=Udigr;3AC=aacgr;3AD=eacgr;3AE=eeacgr;3AF=iacgr;3B0=udiagr;3B1=alpha=agr;3B2=beta=bgr;3B3=gamma=ggr;3B4=delta=dgr;3B5=epsi=epsilon=egr;3B6=zeta=zgr;3B7=eegr=eta;3B8=theta=thgr;3B9=igr=iota;3BA=kappa=kgr;3BB=lambda=lgr;3BC=mgr=mu;3BD=ngr=nu;3BE=xgr=xi;3BF=omicron=ogr;3C0=pi=pgr;3C1=rgr=rho;3C2=sfgr=sigmav=varsigma=sigmaf;3C3=sgr=sigma;3C4=tau=tgr;3C5=ugr=upsi=upsilon;3C6=phiv=straightphi=varphi;3C7=chi=khgr;3C8=psgr=psi;3C9=ohgr=omega;3CA=idigr;3CB=udigr;3CC=oacgr;3CD=uacgr;3CE=ohacgr;3D1=thetav=vartheta=thetasym;3D2=Upsi=upsih;3D5=phi=phgr;3D6=piv=varpi;3DC=Gammad;3DD=gammad=digamma;3F0=kappav=varkappa;3F1=rhov=varrho;3F5=epsiv=straightepsilon=varepsilon;3F6=bepsi=backepsilon;401=IOcy;402=DJcy;403=GJcy;404=Jukcy;405=DScy;406=Iukcy;407=YIcy;408=Jsercy;409=LJcy;40A=NJcy;40B=TSHcy;40C=KJcy;40E=Ubrcy;40F=DZcy;410=Acy;411=Bcy;412=Vcy;413=Gcy;414=Dcy;415=IEcy;416=ZHcy;417=Zcy;418=Icy;419=Jcy;41A=Kcy;41B=Lcy;41C=Mcy;41D=Ncy;41E=Ocy;41F=Pcy;420=Rcy;421=Scy;422=Tcy;423=Ucy;424=Fcy;425=KHcy;426=TScy;427=CHcy;428=SHcy;429=SHCHcy;42A=HARDcy;42B=Ycy;42C=SOFTcy;42D=Ecy;42E=YUcy;42F=YAcy;430=acy;431=bcy;432=vcy;433=gcy;434=dcy;435=iecy;436=zhcy;437=zcy;438=icy;439=jcy;43A=kcy;43B=lcy;43C=mcy;43D=ncy;43E=ocy;43F=pcy;440=rcy;441=scy;442=tcy;443=ucy;444=fcy;445=khcy;446=tscy;447=chcy;448=shcy;449=shchcy;44A=hardcy;44B=ycy;44C=softcy;44D=ecy;44E=yucy;44F=yacy;451=iocy;452=djcy;453=gjcy;454=jukcy;455=dscy;456=iukcy;457=yicy;458=jsercy;459=ljcy;45A=njcy;45B=tshcy;45C=kjcy;45E=ubrcy;45F=dzcy;2002=ensp;2003=emsp;2004=emsp13;2005=emsp14;2007=numsp;2008=puncsp;2009=thinsp=ThinSpace;200A=hairsp=VeryThinSpace;200B=ZeroWidthSpace=NegativeVeryThinSpace=NegativeThinSpace=NegativeMediumSpace=NegativeThickSpace;200C=zwnj;200D=zwj;200E=lrm;200F=rlm;2010=hyphen=dash;2013=ndash;2014=mdash;2015=horbar;2016=Verbar=Vert;2018=lsquo=OpenCurlyQuote;2019=rsquo=rsquor=CloseCurlyQuote;201A=lsquor=sbquo;201C=ldquo=OpenCurlyDoubleQuote;201D=rdquo=rdquor=CloseCurlyDoubleQuote;201E=ldquor=bdquo;2020=dagger;2021=Dagger=ddagger;2022=bull=bullet;2025=nldr;2026=hellip=mldr;2030=permil;2031=pertenk;2032=prime;2033=Prime;2034=tprime;2035=bprime=backprime;2039=lsaquo;203A=rsaquo;203E=oline=OverBar;2041=caret;2043=hybull;2044=frasl;204F=bsemi;2057=qprime;205F=MediumSpace;E0FB=ThickSpace;2060=NoBreak;2061=ApplyFunction=af;2062=InvisibleTimes=it;2063=InvisibleComma=ic;20AC=euro;20DB=tdot=TripleDot;20DC=DotDot;2102=Copf=complexes;2105=incare;210A=gscr;210B=hamilt=HilbertSpace=Hscr;210C=Hfr=Poincareplane;210D=quaternions=Hopf;210E=planckh;210F=planck=hbar=plankv=hslash;2110=Iscr=imagline;2111=image=Im=imagpart=Ifr;2112=Lscr=lagran=Laplacetrf;2113=ell;2115=Nopf=naturals;2116=numero;2117=copysr;2118=weierp=wp;2119=Popf=primes;211A=rationals=Qopf;211B=Rscr=realine;211C=real=Re=realpart=Rfr;211D=reals=Ropf;211E=rx;2122=trade=TRADE;2124=integers=Zopf;2127=mho;2128=Zfr=zeetrf;2129=iiota;212C=bernou=Bernoullis=Bscr;212D=Cfr=Cayleys;212F=escr;2130=Escr=expectation;2131=Fscr=Fouriertrf;2133=phmmat=Mellintrf=Mscr;2134=order=orderof=oscr;2135=alefsym=aleph;2136=beth;2137=gimel;2138=daleth;2145=CapitalDifferentialD=DD;2146=DifferentialD=dd;2147=ExponentialE=exponentiale=ee;2148=ImaginaryI=ii;2153=frac13;2154=frac23;2155=frac15;2156=frac25;2157=frac35;2158=frac45;2159=frac16;215A=frac56;215B=frac18;215C=frac38;215D=frac58;215E=frac78;2190=larr=leftarrow=LeftArrow=slarr=ShortLeftArrow;2191=uarr=uparrow=UpArrow=ShortUpArrow;2192=rarr=rightarrow=RightArrow=srarr=ShortRightArrow;2193=darr=downarrow=DownArrow=ShortDownArrow;2194=harr=leftrightarrow=LeftRightArrow;2195=varr=updownarrow=UpDownArrow;2196=nwarr=UpperLeftArrow=nwarrow;2197=nearr=UpperRightArrow=nearrow;2198=searr=searrow=LowerRightArrow;2199=swarr=swarrow=LowerLeftArrow;219A=nlarr=nleftarrow;219B=nrarr=nrightarrow;219D=rarrw=rightsquigarrow;E004=nrarrw;219E=Larr=twoheadleftarrow;219F=Uarr;21A0=Rarr=twoheadrightarrow;21A1=Darr;21A2=larrtl=leftarrowtail;21A3=rarrtl=rightarrowtail;21A4=LeftTeeArrow=mapstoleft;21A5=UpTeeArrow=mapstoup;21A6=map=RightTeeArrow=mapsto;21A7=DownTeeArrow=mapstodown;21A9=larrhk=hookleftarrow;21AA=rarrhk=hookrightarrow;21AB=larrlp=looparrowleft;21AC=rarrlp=looparrowright;21AD=harrw=leftrightsquigarrow;21AE=nharr=nleftrightarrow;21B0=lsh=Lsh;21B1=rsh=Rsh;21B2=ldsh;21B3=rdsh;21B5=crarr;21B6=cularr=curvearrowleft;21B7=curarr=curvearrowright;21BA=olarr=circlearrowleft;21BB=orarr=circlearrowright;21BC=lharu=LeftVector=leftharpoonup;21BD=lhard=leftharpoondown=DownLeftVector;21BE=uharr=upharpoonright=RightUpVector;21BF=uharl=upharpoonleft=LeftUpVector;21C0=rharu=RightVector=rightharpoonup;21C1=rhard=rightharpoondown=DownRightVector;21C2=dharr=RightDownVector=downharpoonright;21C3=dharl=LeftDownVector=downharpoonleft;21C4=rlarr=rightleftarrows=RightArrowLeftArrow;21C5=udarr=UpArrowDownArrow;21C6=lrarr=leftrightarrows=LeftArrowRightArrow;21C7=llarr=leftleftarrows;21C8=uuarr=upuparrows;21C9=rrarr=rightrightarrows;21CA=ddarr=downdownarrows;21CB=lrhar=ReverseEquilibrium=leftrightharpoons;21CC=rlhar=rightleftharpoons=Equilibrium;21CD=nlArr=nLeftarrow;21CE=nhArr=nLeftrightarrow;21CF=nrArr=nRightarrow;21D0=lArr=Leftarrow=DoubleLeftArrow;21D1=uArr=Uparrow=DoubleUpArrow;21D2=rArr=Rightarrow=Implies=DoubleRightArrow;21D3=dArr=Downarrow=DoubleDownArrow;21D4=hArr=Leftrightarrow=DoubleLeftRightArrow=iff;21D5=vArr=Updownarrow=DoubleUpDownArrow;21D6=nwArr;21D7=neArr;21D8=seArr;21D9=swArr;21DA=lAarr=Lleftarrow;21DB=rAarr=Rrightarrow;21DD=zigrarr;21E4=larrb=LeftArrowBar;21E5=rarrb=RightArrowBar;21F5=duarr=DownArrowUpArrow;21FD=loarr;21FE=roarr;21FF=hoarr;2200=forall=ForAll;2201=comp=complement;2202=part=PartialD;E03A=npart;2203=exist=Exists;2204=nexist=NotExists=nexists;2205=empty=emptyset=emptyv=varnothing;2207=nabla=Del;2208=isin=isinv=Element=in;2209=notin=NotElement=notinva;220B=niv=ReverseElement=ni=SuchThat;220C=notni=notniva=NotReverseElement;220F=prod=Product;2210=coprod=Coproduct;2211=sum=Sum;2212=minus;2213=mnplus=mp=MinusPlus;2214=plusdo=dotplus;2216=setmn=setminus=Backslash=ssetmn=smallsetminus;2217=lowast;2218=compfn=SmallCircle;221A=radic=Sqrt;221D=prop=propto=Proportional=vprop=varpropto;221E=infin;221F=angrt;2220=ang=angle;E02F=nang;2221=angmsd=measuredangle;2222=angsph;2223=mid=VerticalBar=smid=shortmid;2224=nmid=NotVerticalBar=nsmid=nshortmid;2225=par=parallel=DoubleVerticalBar=spar=shortparallel;2226=npar=nparallel=NotDoubleVerticalBar=nspar=nshortparallel;2227=and=wedge;2228=or=vee;2229=cap;E424=caps;222A=cup;E425=cups;222B=int=Integral;222C=Int;222D=tint=iiint;222E=conint=oint=ContourIntegral;222F=Conint=DoubleContourIntegral;2230=Cconint;2231=cwint;2232=cwconint=ClockwiseContourIntegral;2233=awconint=CounterClockwiseContourIntegral;2234=there4=therefore=Therefore;2235=becaus=because=Because;2236=ratio;2237=Colon=Proportion;2238=minusd=dotminus;223A=mDDot;223B=homtht;223C=sim=Tilde=thksim=thicksim;E429=nvsim;223D=bsim=backsim;E00A=race;223E=ac=mstpos;E00B=acE;223F=acd;2240=wreath=VerticalTilde=wr;2241=nsim=NotTilde;2242=esim=EqualTilde=eqsim;E05C=NotEqualTilde=nesim;2243=sime=TildeEqual=simeq;2244=nsime=nsimeq=NotTildeEqual;2245=cong=TildeFullEqual;2246=simne;2247=ncong=NotTildeFullEqual;2248=asymp=ap=TildeTilde=approx=thkap=thickapprox;2249=nap=NotTildeTilde=napprox;224A=ape=approxeq;224B=apid;E01E=napid;224C=bcong=backcong;224D=asympeq=CupCap;E433=nvap;224E=bump=HumpDownHump=Bumpeq;E052=NotHumpDownHump=nbump;224F=bumpe=HumpEqual=bumpeq;E05B=nbumpe=NotHumpEqual;2250=esdot=DotEqual=doteq;E039=nedot;2251=eDot=doteqdot;2252=efDot=fallingdotseq;2253=erDot=risingdotseq;2254=colone=coloneq=Assign;2255=ecolon=eqcolon;2256=ecir=eqcirc;2257=cire=circeq;2259=wedgeq;225A=veeeq;225C=trie=triangleq;225F=equest=questeq;2260=ne=NotEqual;2261=equiv=Congruent;E3C2=bnequiv;2262=nequiv=NotCongruent;2264=le=leq;E07E=nvle;2265=ge=GreaterEqual=geq;E07F=nvge;2266=lE=LessFullEqual=leqq;E011=nlE=nleqq;2267=gE=GreaterFullEqual=geqq;E00E=ngE=ngeqq=NotGreaterFullEqual;2268=lnE=lneqq;E431=lvnE=lvertneqq;2269=gnE=gneqq;E432=gvnE=gvertneqq;226A=Lt=NestedLessLess=ll;E028=nLtv=NotLessLess;E460=nLt;226B=Gt=NestedGreaterGreater=gg;E029=nGtv=NotGreaterGreater;E461=nGt;226C=twixt=between;226D=NotCupCap;226E=nlt=NotLess=nless;226F=ngt=NotGreater=ngtr;2270=nle=NotLessEqual=nleq;2271=nge=NotGreaterEqual=ngeq;2272=lsim=LessTilde=lesssim;2273=gsim=gtrsim=GreaterTilde;2274=nlsim=NotLessTilde;2275=ngsim=NotGreaterTilde;2276=lg=lessgtr=LessGreater;2277=gl=gtrless=GreaterLess;2278=ntlg=NotLessGreater;2279=ntgl=NotGreaterLess;227A=pr=Precedes=prec;227B=sc=Succeeds=succ;227C=prcue=PrecedesSlantEqual=preccurlyeq;227D=sccue=SucceedsSlantEqual=succcurlyeq;227E=prsim=precsim=PrecedesTilde;227F=scsim=succsim=SucceedsTilde;E05A=NotSucceedsTilde;2280=npr=nprec=NotPrecedes;2281=nsc=nsucc=NotSucceeds;2282=sub=subset;E440=vnsub=nsubset=NotSubset;2283=sup=supset=Superset;E441=vnsup=nsupset=NotSuperset;2284=nsub;2285=nsup;2286=sube=SubsetEqual=subseteq;2287=supe=supseteq=SupersetEqual;2288=nsube=nsubseteq=NotSubsetEqual;2289=nsupe=nsupseteq=NotSupersetEqual;228A=subne=subsetneq;E444=vsubne=varsubsetneq;228B=supne=supsetneq;E445=vsupne=varsupsetneq;228D=cupdot;228E=uplus=UnionPlus;228F=sqsub=SquareSubset=sqsubset;E050=NotSquareSubset;2290=sqsup=SquareSuperset=sqsupset;E051=NotSquareSuperset;2291=sqsube=SquareSubsetEqual=sqsubseteq;2292=sqsupe=SquareSupersetEqual=sqsupseteq;2293=sqcap=SquareIntersection;E446=sqcaps;2294=sqcup=SquareUnion;E447=sqcups;2295=oplus=CirclePlus;2296=ominus=CircleMinus;2297=otimes=CircleTimes;2298=osol;2299=odot=CircleDot;229A=ocir=circledcirc;229B=oast=circledast;229D=odash=circleddash;229E=plusb=boxplus;229F=minusb=boxminus;22A0=timesb=boxtimes;22A1=sdotb=dotsquare;22A2=vdash=RightTee;22A3=dashv=LeftTee;22A4=top=DownTee;22A5=bottom=bot=perp=UpTee;22A7=models;22A8=vDash=DoubleRightTee;22A9=Vdash;22AA=Vvdash;22AB=VDash;22AC=nvdash;22AD=nvDash;22AE=nVdash;22AF=nVDash;22B0=prurel;22B2=vltri=vartriangleleft=LeftTriangle;22B3=vrtri=vartriangleright=RightTriangle;22B4=ltrie=trianglelefteq=LeftTriangleEqual;E44F=nvltrie;22B5=rtrie=trianglerighteq=RightTriangleEqual;E450=nvrtrie;22B6=origof;22B7=imof;22B8=mumap=multimap;22B9=hercon;22BA=intcal=intercal;22BB=veebar;22BD=barvee;22BE=angrtvb;22BF=lrtri;22C0=xwedge=Wedge=bigwedge;22C1=xvee=Vee=bigvee;22C2=xcap=Intersection=bigcap;22C3=xcup=Union=bigcup;22C4=diam=diamond=Diamond;22C5=sdot;22C6=sstarf=Star;22C7=divonx=divideontimes;22C8=bowtie;22C9=ltimes;22CA=rtimes;22CB=lthree=leftthreetimes;22CC=rthree=rightthreetimes;22CD=bsime=backsimeq;22CE=cuvee=curlyvee;22CF=cuwed=curlywedge;22D0=Sub=Subset;22D1=Sup=Supset;22D2=Cap;22D3=Cup;22D4=fork=pitchfork;22D5=epar;22D6=ltdot=lessdot;22D7=gtdot=gtrdot;22D8=Ll;E02A=nLl;22D9=Gg=ggg;E02B=nGg;22DA=leg=LessEqualGreater=lesseqgtr;E44B=lesg;22DB=gel=gtreqless=GreaterEqualLess;E44C=gesl;22DE=cuepr=curlyeqprec;22DF=cuesc=curlyeqsucc;22E0=nprcue=NotPrecedesSlantEqual;22E1=nsccue=NotSucceedsSlantEqual;22E2=nsqsube=NotSquareSubsetEqual;22E3=nsqsupe=NotSquareSupersetEqual;22E6=lnsim;22E7=gnsim;22E8=prnsim=precnsim;22E9=scnsim=succnsim;22EA=nltri=ntriangleleft=NotLeftTriangle;22EB=nrtri=ntriangleright=NotRightTriangle;22EC=nltrie=ntrianglelefteq=NotLeftTriangleEqual;22ED=nrtrie=ntrianglerighteq=NotRightTriangleEqual;22EE=vellip;22EF=ctdot;22F0=utdot;22F1=dtdot;22F2=disin;22F3=isinsv;22F4=isins;22F5=isindot;E03B=notindot;22F6=notinvc;22F7=notinvb;22F9=isinE;E03C=notinE;22FA=nisd;22FB=xnis;22FC=nis;22FD=notnivc;22FE=notnivb;2305=barwed=barwedge;2306=Barwed=doublebarwedge;2308=lceil=LeftCeiling;2309=rceil=RightCeiling;230A=lfloor=LeftFloor;230B=rfloor=RightFloor;230C=drcrop;230D=dlcrop;230E=urcrop;230F=ulcrop;2310=bnot;2312=profline;2313=profsurf;2315=telrec;2316=target;231C=ulcorn=ulcorner;231D=urcorn=urcorner;231E=dlcorn=llcorner;231F=drcorn=lrcorner;2322=frown=sfrown;2323=smile=ssmile;232D=cylcty;232E=profalar;2336=topbot;233D=ovbar;233F=solbar;237C=angzarr;23B0=lmoust=lmoustache;23B1=rmoust=rmoustache;23B4=tbrk=OverBracket;23B5=bbrk=UnderBracket;23B6=bbrktbrk;23DC=OverParenthesis;23DD=UnderParenthesis;23DE=OverBrace;23DF=UnderBrace;23E2=trpezium;23E7=elinters;2423=blank;24C8=oS=circledS;2500=boxh=HorizontalLine;2502=boxv;250C=boxdr;2510=boxdl;2514=boxur;2518=boxul;251C=boxvr;2524=boxvl;252C=boxhd;2534=boxhu;253C=boxvh;2550=boxH;2551=boxV;2552=boxdR;2553=boxDr;2554=boxDR;2555=boxdL;2556=boxDl;2557=boxDL;2558=boxuR;2559=boxUr;255A=boxUR;255B=boxuL;255C=boxUl;255D=boxUL;255E=boxvR;255F=boxVr;2560=boxVR;2561=boxvL;2562=boxVl;2563=boxVL;2564=boxHd;2565=boxhD;2566=boxHD;2567=boxHu;2568=boxhU;2569=boxHU;256A=boxvH;256B=boxVh;256C=boxVH;2580=uhblk;2584=lhblk;2588=block;2591=blk14;2592=blk12;2593=blk34;25A1=squ=square=Square;25AA=squf=squarf=blacksquare=FilledVerySmallSquare;25AB=EmptyVerySmallSquare;25AD=rect;25AE=marker;25B1=fltns;25B3=xutri=bigtriangleup;25B4=utrif=blacktriangle;25B5=utri=triangle;25B8=rtrif=blacktriangleright;25B9=rtri=triangleright;25BD=xdtri=bigtriangledown;25BE=dtrif=blacktriangledown;25BF=dtri=triangledown;25C2=ltrif=blacktriangleleft;25C3=ltri=triangleleft;25CA=loz=lozenge;25CB=cir;25EC=tridot;25EF=xcirc=bigcirc;25F8=ultri;25F9=urtri;25FA=lltri;25FB=EmptySmallSquare;25FC=FilledSmallSquare;2605=starf=bigstar;2606=star;260E=phone;2640=female;2642=male;2660=spades=spadesuit;2663=clubs=clubsuit;2665=hearts=heartsuit;2666=diams=diamondsuit;266A=sung;266D=flat;266E=natur=natural;266F=sharp;2713=check=checkmark;2717=cross;2720=malt=maltese;2736=sext;2758=VerticalSeparator;2772=lbbrk;2773=rbbrk;27C8=bsolhsub;27C9=suphsol;27E6=lobrk=LeftDoubleBracket;27E7=robrk=RightDoubleBracket;27E8=lang=LeftAngleBracket=langle;27E9=rang=RightAngleBracket=rangle;27EA=Lang;27EB=Rang;27EC=loang;27ED=roang;27F5=xlarr=longleftarrow=LongLeftArrow;27F6=xrarr=longrightarrow=LongRightArrow;27F7=xharr=longleftrightarrow=LongLeftRightArrow;27F8=xlArr=Longleftarrow=DoubleLongLeftArrow;27F9=xrArr=Longrightarrow=DoubleLongRightArrow;27FA=xhArr=Longleftrightarrow=DoubleLongLeftRightArrow;27FC=xmap=longmapsto;27FF=dzigrarr;2902=nvlArr;2903=nvrArr;2904=nvHarr;2905=Map;290C=lbarr;290D=rbarr=bkarow;290E=lBarr;290F=rBarr=dbkarow;2910=RBarr=drbkarow;2911=DDotrahd;2912=UpArrowBar;2913=DownArrowBar;2916=Rarrtl;2919=latail;291A=ratail;291B=lAtail;291C=rAtail;291D=larrfs;291E=rarrfs;291F=larrbfs;2920=rarrbfs;2923=nwarhk;2924=nearhk;2925=searhk=hksearow;2926=swarhk=hkswarow;2927=nwnear;2928=nesear=toea;2929=seswar=tosa;292A=swnwar;2933=rarrc;E005=nrarrc;2935=cudarrr;2936=ldca;2937=rdca;2938=cudarrl;2939=larrpl;293C=curarrm;293D=cularrp;2945=rarrpl;2948=harrcir;2949=Uarrocir;294A=lurdshar;294B=ldrushar;294E=LeftRightVector;294F=RightUpDownVector;2950=DownLeftRightVector;2951=LeftUpDownVector;2952=LeftVectorBar;2953=RightVectorBar;2954=RightUpVectorBar;2955=RightDownVectorBar;2956=DownLeftVectorBar;2957=DownRightVectorBar;2958=LeftUpVectorBar;2959=LeftDownVectorBar;295A=LeftTeeVector;295B=RightTeeVector;295C=RightUpTeeVector;295D=RightDownTeeVector;295E=DownLeftTeeVector;295F=DownRightTeeVector;2960=LeftUpTeeVector;2961=LeftDownTeeVector;2962=lHar;2963=uHar;2964=rHar;2965=dHar;2966=luruhar;2967=ldrdhar;2968=ruluhar;2969=rdldhar;296A=lharul;296B=llhard;296C=rharul;296D=lrhard;296E=udhar=UpEquilibrium;296F=duhar=ReverseUpEquilibrium;2970=RoundImplies;2971=erarr;2972=simrarr;2973=larrsim;2974=rarrsim;2975=rarrap;2976=ltlarr;2978=gtrarr;2979=subrarr;297B=suplarr;297C=lfisht;297D=rfisht;297E=ufisht;297F=dfisht;2985=lopar;2986=ropar;298B=lbrke;298C=rbrke;298D=lbrkslu;298E=rbrksld;298F=lbrksld;2990=rbrkslu;2991=langd;2992=rangd;2993=lparlt;2994=rpargt;2995=gtlPar;2996=ltrPar;299A=vzigzag;299C=vangrt;299D=angrtvbd;29A4=ange;29A5=range;29A6=dwangle;29A7=uwangle;29A8=angmsdaa;29A9=angmsdab;29AA=angmsdac;29AB=angmsdad;29AC=angmsdae;29AD=angmsdaf;29AE=angmsdag;29AF=angmsdah;29B0=bemptyv;29B1=demptyv;29B2=cemptyv;29B3=raemptyv;29B4=laemptyv;29B5=ohbar;29B6=omid;29B7=opar;29B9=operp;29BB=olcross;29BC=odsold;29BE=olcir;29BF=ofcir;29C0=olt;29C1=ogt;29C2=cirscir;29C3=cirE;29C4=solb;29C5=bsolb;29C9=boxbox;29CD=trisb;29CE=rtriltri;29CF=LeftTriangleBar;E14C=NotLeftTriangleBar;29D0=RightTriangleBar;E14D=NotRightTriangleBar;29DC=iinfin;29DD=infintie;29DE=nvinfin;29E3=eparsl;29E4=smeparsl;29E5=eqvparsl;29EB=lozf=blacklozenge;29F4=RuleDelayed;29F6=dsol;2A00=bigodot=xodot;2A01=bigoplus=xoplus;2A02=bigotimes=xotime;2A04=biguplus=xuplus;2A06=bigsqcup=xsqcup;2A0C=qint=iiiint;2A0D=fpartint;2A10=cirfnint;2A11=awint;2A12=rppolint;2A13=scpolint;2A14=npolint;2A15=pointint;2A16=quatint;2A17=intlarhk;2A22=pluscir;2A23=plusacir;2A24=simplus;2A25=plusdu;2A26=plussim;2A27=plustwo;2A29=mcomma;2A2A=minusdu;2A2D=loplus;2A2E=roplus;2A2F=Cross;2A30=timesd;2A31=timesbar;2A33=smashp;2A34=lotimes;2A35=rotimes;2A36=otimesas;2A37=Otimes;2A38=odiv;2A39=triplus;2A3A=triminus;2A3B=tritime;2A3C=iprod=intprod;2A3F=amalg;2A40=capdot;2A42=ncup;2A43=ncap;2A44=capand;2A45=cupor;2A46=cupcap;2A47=capcup;2A48=cupbrcap;2A49=capbrcup;2A4A=cupcup;2A4B=capcap;2A4C=ccups;2A4D=ccaps;2A50=ccupssm;2A53=And;2A54=Or;2A55=andand;2A56=oror;2A57=orslope;2A58=andslope;2A5A=andv;2A5B=orv;2A5C=andd;2A5D=ord;2A5F=wedbar;2A66=sdote;2A6A=simdot;2A6D=congdot;E023=ncongdot;2A6E=easter;2A6F=apacir;2A70=apE;E025=napE;2A71=eplus;2A72=pluse;2A73=Esim;2A74=Colone;2A75=Equal;2A77=eDDot=ddotseq;2A78=equivDD;2A79=ltcir;2A7A=gtcir;2A7B=ltquest;2A7C=gtquest;2A7D=les=LessSlantEqual=leqslant;E010=nles=NotLessSlantEqual=nleqslant;2A7E=ges=GreaterSlantEqual=geqslant;E00F=nges=NotGreaterSlantEqual=ngeqslant;2A7F=lesdot;2A80=gesdot;2A81=lesdoto;2A82=gesdoto;2A83=lesdotor;2A84=gesdotol;2A85=lap=lessapprox;2A86=gap=gtrapprox;2A87=lne=lneq;2A88=gne=gneq;2A89=lnap=lnapprox;2A8A=gnap=gnapprox;2A8B=lEg=lesseqqgtr;2A8C=gEl=gtreqqless;2A8D=lsime;2A8E=gsime;2A8F=lsimg;2A90=gsiml;2A91=lgE;2A92=glE;2A93=lesges;2A94=gesles;2A95=els=eqslantless;2A96=egs=eqslantgtr;2A97=elsdot;2A98=egsdot;2A99=el;2A9A=eg;2A9D=siml;2A9E=simg;2A9F=simlE;2AA0=simgE;2AA1=LessLess;E14E=NotNestedLessLess;2AA2=GreaterGreater;E14F=NotNestedGreaterGreater;2AA4=glj;2AA5=gla;2AA6=ltcc;2AA7=gtcc;2AA8=lescc;2AA9=gescc;2AAA=smt;2AAB=lat;2AAC=smte;E459=smtes;2AAD=late;E45A=lates;2AAE=bumpE;2AAF=pre=preceq=PrecedesEqual;E04B=npre=npreceq=NotPrecedesEqual;2AB0=sce=succeq=SucceedsEqual;E04F=nsce=nsucceq=NotSucceedsEqual;2AB3=prE;2AB4=scE;2AB5=prnE=precneqq;2AB6=scnE=succneqq;2AB7=prap=precapprox;2AB8=scap=succapprox;2AB9=prnap=precnapprox;2ABA=scnap=succnapprox;2ABB=Pr;2ABC=Sc;2ABD=subdot;2ABE=supdot;2ABF=subplus;2AC0=supplus;2AC1=submult;2AC2=supmult;2AC3=subedot;2AC4=supedot;2AC5=subE=subseteqq;E016=nsubE=nsubseteqq;2AC6=supE=supseteqq;E018=nsupE=nsupseteqq;2AC7=subsim;2AC8=supsim;2ACB=subnE=subsetneqq;E45B=vsubnE=varsubsetneqq;2ACC=supnE=supsetneqq;E45C=vsupnE=varsupsetneqq;2ACF=csub;2AD0=csup;2AD1=csube;2AD2=csupe;2AD3=subsup;2AD4=supsub;2AD5=subsub;2AD6=supsup;2AD7=suphsub;2AD8=supdsub;2AD9=forkv;2ADA=topfork;2ADB=mlcp;2AE4=Dashv=DoubleLeftTee;2AE6=Vdashl;2AE7=Barv;2AE8=vBar;2AE9=vBarv;2AEB=Vbar;2AEC=Not;2AED=bNot;2AEE=rnmid;2AEF=cirmid;2AF0=midcir;2AF1=topcir;2AF2=nhpar;2AF3=parsim;2AFD=parsl;E038=nparsl;FB00=fflig;FB01=filig;FB02=fllig;FB03=ffilig;FB04=ffllig;1D49C=Ascr;1D49E=Cscr;1D49F=Dscr;1D4A2=Gscr;1D4A5=Jscr;1D4A6=Kscr;1D4A9=Nscr;1D4AA=Oscr;1D4AB=Pscr;1D4AC=Qscr;1D4AE=Sscr;1D4AF=Tscr;1D4B0=Uscr;1D4B1=Vscr;1D4B2=Wscr;1D4B3=Xscr;1D4B4=Yscr;1D4B5=Zscr;1D4B6=ascr;1D4B7=bscr;1D4B8=cscr;1D4B9=dscr;1D4BB=fscr;1D4BD=hscr;1D4BE=iscr;1D4BF=jscr;1D4C0=kscr;1D4C1=lscr;1D4C2=mscr;1D4C3=nscr;1D4C5=pscr;1D4C6=qscr;1D4C7=rscr;1D4C8=sscr;1D4C9=tscr;1D4CA=uscr;1D4CB=vscr;1D4CC=wscr;1D4CD=xscr;1D4CE=yscr;1D4CF=zscr;1D504=Afr;1D505=Bfr;1D507=Dfr;1D508=Efr;1D509=Ffr;1D50A=Gfr;1D50D=Jfr;1D50E=Kfr;1D50F=Lfr;1D510=Mfr;1D511=Nfr;1D512=Ofr;1D513=Pfr;1D514=Qfr;1D516=Sfr;1D517=Tfr;1D518=Ufr;1D519=Vfr;1D51A=Wfr;1D51B=Xfr;1D51C=Yfr;1D51E=afr;1D51F=bfr;1D520=cfr;1D521=dfr;1D522=efr;1D523=ffr;1D524=gfr;1D525=hfr;1D526=ifr;1D527=jfr;1D528=kfr;1D529=lfr;1D52A=mfr;1D52B=nfr;1D52C=ofr;1D52D=pfr;1D52E=qfr;1D52F=rfr;1D530=sfr;1D531=tfr;1D532=ufr;1D533=vfr;1D534=wfr;1D535=xfr;1D536=yfr;1D537=zfr;1D538=Aopf;1D539=Bopf;1D53B=Dopf;1D53C=Eopf;1D53D=Fopf;1D53E=Gopf;1D540=Iopf;1D541=Jopf;1D542=Kopf;1D543=Lopf;1D544=Mopf;1D546=Oopf;1D54A=Sopf;1D54B=Topf;1D54C=Uopf;1D54D=Vopf;1D54E=Wopf;1D54F=Xopf;1D550=Yopf;1D552=aopf;1D553=bopf;1D554=copf;1D555=dopf;1D556=eopf;1D557=fopf;1D558=gopf;1D559=hopf;1D55A=iopf;1D55B=jopf;1D55C=kopf;1D55D=lopf;1D55E=mopf;1D55F=nopf;1D560=oopf;1D561=popf;1D562=qopf;1D563=ropf;1D564=sopf;1D565=topf;1D566=uopf;1D567=vopf;1D568=wopf;1D569=xopf;1D56A=yopf;1D56B=zopf;1D6AA=b.Gamma;1D6AB=b.Delta;1D6AF=b.Theta;1D6B2=b.Lambda;1D6B5=b.Xi;1D6B7=b.Pi;1D6BA=b.Sigma;1D6BC=b.Upsi;1D6BD=b.Phi;1D6BF=b.Psi;1D6C0=b.Omega;1D6C2=b.alpha;1D6C3=b.beta;1D6C4=b.gamma;1D6C5=b.delta;1D6C6=b.epsi;1D6C7=b.zeta;1D6C8=b.eta;1D6C9=b.thetas;1D6CA=b.iota;1D6CB=b.kappa;1D6CC=b.lambda;1D6CD=b.mu;1D6CE=b.nu;1D6CF=b.xi;1D6D1=b.pi;1D6D2=b.rho;1D6D3=b.sigmav;1D6D4=b.sigma;1D6D5=b.tau;1D6D6=b.upsi;1D6D7=b.phi;1D6D8=b.chi;1D6D9=b.psi;1D6DA=b.omega;1D6DC=b.epsiv;1D6DD=b.thetav;1D6DE=b.kappav;1D6DF=b.phiv;1D6E0=b.rhov;1D6E1=b.piv;1D7CA=b.Gammad;1D7CB=b.gammad;";
  var e2 = ";|||;...;||;->;..;&&;<=;>=;!=;*=;+=;-=;/=;:=;==;**;<>;!!;////;++;--;";
  var J = ";2016=01p00012o00012;2018=01p00000;2019=01o00000;201C=01p00000;201D=01o00000;2022=00i44360;2026=00i00080;2032=00o02470;203E=00o00543;2044=00i44262;2061=00i00530;2062=00i00360;2063=28i00030;2064=00i00540;20DB=00o00541;20DC=00o00541;21=00o10480;21 21=00o10480;21 3D=00i44250;2145=00p21520;2146=00p20520;2190=00i55273;2191=00i55272;2192=00i55273;2193=00i55272;2194=00i55273;2195=00i55272;2196=00i55272;2197=00i55272;2198=00i55272;2199=00i55272;219A=00i55271;219B=00i55271;219C=00i55273;219D=00i55273;219E=00i55273;219F=00i55273;21A0=00i55273;21A1=00i55272;21A2=00i55273;21A3=00i55273;21A4=00i55273;21A5=00i55272;21A6=00i55273;21A7=00i55272;21A8=00i55272;21A9=00i55273;21AA=00i55273;21AB=00i55273;21AC=00i55273;21AD=00i55273;21AE=00i55271;21AF=00i55272;21B0=00i55272;21B1=00i55272;21B2=00i55272;21B3=00i55272;21B4=00i55272;21B5=00i55272;21B6=00i55271;21B7=00i55271;21B8=00i55270;21B9=00i55273;21BA=00i55270;21BB=00i55270;21BC=00i55273;21BD=00i55273;21BE=00i55272;21BF=00i55272;21C0=00i55273;21C1=00i55273;21C2=00i55272;21C3=00i55272;21C4=00i55273;21C5=00i55272;21C6=00i55273;21C7=00i55273;21C8=00i55272;21C9=00i55273;21CA=00i55272;21CB=00i55273;21CC=00i55273;21CD=00i55271;21CE=00i55271;21CF=00i55271;21D0=00i55273;21D1=00i55272;21D2=00i55273;21D3=00i55272;21D4=00i55273;21D5=00i55272;21D6=00i55272;21D7=00i55272;21D8=00i55272;21D9=00i55272;21DA=00i55273;21DB=00i55273;21DC=00i55273;21DD=00i55273;21DE=00i55270;21DF=00i55270;21E0=00i55273;21E1=00i55272;21E2=00i55273;21E3=00i55272;21E4=00i55273;21E5=00i55273;21E6=00i55273;21E7=00i55272;21E8=00i55273;21E9=00i55272;21EA=00i55272;21EB=00i55272;21EC=00i55272;21ED=00i55272;21EE=00i55272;21EF=00i55272;21F0=00i55273;21F1=00i55270;21F2=00i55270;21F3=00i55272;21F4=00i55271;21F5=00i55272;21F6=00i55273;21F7=00i55271;21F8=00i55271;21F9=00i55271;21FA=00i55271;21FB=00i55271;21FC=00i55271;21FD=00i55273;21FE=00i55273;21FF=00i55273;2200=00p21130;2201=00i12140;2202=00p21450;2203=00p21130;2204=00p21130;2206=00i33260;2207=00p21450;2208=00i55140;2209=00i55140;220A=00i55260;220B=00i55090;220C=00i55140;220D=00i55260;220E=00i33260;220F=16p12350;2210=16p12350;2211=16p12290;2212=00i44280p01280;2213=00i44280p01280;2214=00i44280;2215=00i44262;2216=00i44400;2217=00i44260;2218=00i44260;2219=00i44260;221A=00p11522;221B=00p11520;221C=00p11520;221D=00i55250;221F=00i55260;2220=00p00420;2221=00p00420;2222=00p00420;2223=00i55260;2224=00i55250;2225=00i55250;2226=00i55250;2227=00i44120;2228=00i44110;2229=00i44350;222A=00i44350;222B=12p01310;222C=12p01300;222D=12p01300;222E=12p01310;222F=12p01310;2230=12p01310;2231=12p01310;2232=12p01310;2233=12p01310;2234=00i55040;2235=00i55040;2236=00i55260;2237=00i55260;2238=00i44260;2239=00i55260;223A=00i44260;223B=00i55260;223C=00i55220;223D=00i55260i33260;223E=00i55260;223F=00i33260;2240=00i44340;2241=00i55250;2242=00i55260i55260;2243=00i55250;2244=00i55250;2245=00i55250;2246=00i55250;2247=00i55250;2248=00i55210;2249=00i55220;224A=00i55260;224B=00i55260;224C=00i55260;224D=00i55250;224E=00i55260i55260;224F=00i55260i55260;2250=00i55260;2251=00i55260;2252=00i55260;2253=00i55260;2254=00i55250;2255=00i55260;2256=00i55260;2257=00i55250;2258=00i55260;2259=00i55250;225A=00i55250;225C=00i55250;225D=00i55260;225E=00i55260;225F=00i55250;2260=00i55240;2261=00i55250;2262=00i55230;2263=00i55260;2264=00i55150;2265=00i55160;2266=00i55260i55260;2267=00i55260;2268=00i55250;2269=00i55250;226A=00i55250i55250;226B=00i55250i55250;226C=00i55260;226D=00i55250;226E=00i55200;226F=00i55180;2270=00i55250;2271=00i55250;2272=00i55260;2273=00i55260;2274=00i55260;2275=00i55260;2276=00i55260;2277=00i55260;2278=00i55260;2279=00i55260;227A=00i55250;227B=00i55250;227C=00i55250;227D=00i55250;227E=00i55260;227F=00i55260i55260;2280=00i55250;2281=00i55250;2282=00i55140i55140;2283=00i55140i55140;2284=00i55140;2285=00i55140;2286=00i55140;2287=00i55140;2288=00i55140;2289=00i55140;228A=00i55140;228B=00i55140;228C=00i44260;228D=00i44260;228E=00i44260;228F=00i55260i55260;2290=00i55260i55260;2291=00i55260;2292=00i55260;2293=00i44260;2294=00i44260;2295=00i44300;2296=00i44300;2297=00i44380;2298=00i44300;2299=00i44440;229A=00i44260;229B=00i44260;229C=00i44260;229D=00i44260;229E=00i44280;229F=00i44280;22A0=00i44360;22A1=00i44360;22A2=00i55100;22A3=00i55100;22A4=00i55100;22A5=00i55250;22A6=00i55260;22A7=00i55260;22A8=00i55100;22A9=00i55100;22AA=00i55260;22AB=00i55260;22AC=00i55100;22AD=00i55100;22AE=00i55100;22AF=00i55100;22B0=00i55260;22B1=00i55260;22B2=00i55260;22B3=00i55260;22B4=00i55250;22B5=00i55250;22B6=00i55260;22B7=00i55260;22B8=00i55270;22B9=00i55260;22BA=00i44260;22BB=00i44260;22BC=00i44260;22BD=00i44260;22BE=00i33260;22BF=00i33260;22C0=16p12330;22C1=16p12330;22C2=16p12330;22C3=16p12320;22C4=00i44260;22C5=00i44360;22C6=00i44260;22C7=00i44260;22C8=00i55260;22C9=00i44250;22CA=00i44250;22CB=00i44250;22CC=00i44250;22CD=00i55260;22CE=00i44260;22CF=00i44260;22D0=00i55260;22D1=00i55260;22D2=00i44260;22D3=00i44260;22D4=00i55250;22D5=00i55260;22D6=00i55250;22D7=00i55250;22D8=00i55250;22D9=00i55250;22DA=00i55260;22DB=00i55260;22DC=00i55260;22DD=00i55260;22DE=00i55260;22DF=00i55260;22E0=00i55260;22E1=00i55260;22E2=00i55260;22E3=00i55260;22E4=00i55260;22E5=00i55260;22E6=00i55260;22E7=00i55260;22E8=00i55260;22E9=00i55260;22EA=00i55250;22EB=00i55250;22EC=00i55250;22ED=00i55250;22EE=00i55080;22EF=00i00080;22F0=00i55260;22F1=00i55080;22F2=00i55260;22F3=00i55260;22F4=00i55260;22F5=00i55260;22F6=00i55260;22F7=00i55260;22F8=00i55260;22F9=00i55260;22FA=00i55260;22FB=00i55260;22FC=00i55260;22FD=00i55260;22FE=00i55260;22FF=00i55260;2308=11p00012;2309=11o00012;230A=11p00012;230B=11o00012;2329=00i00542;232A=00i00542;23B4=00o00543;23B5=00o00543;23DC=00o00543;23DD=00o00543;23DE=00o00543;23DF=00o00543;23E0=00o00543;23E1=00o00543;25=00i33390;25A0=00i33250;25A1=00i33250;25AA=00i33250;25AB=00i33250;25AD=00i33250;25AE=00i33250;25AF=00i33250;25B0=00i33250;25B1=00i33250;25B2=00i44260;25B3=00i44250;25B4=00i44250;25B5=00i44250;25B6=00i44250;25B7=00i44250;25B8=00i44250;25B9=00i44250;25BC=00i44250;25BD=00i44250;25BE=00i44250;25BF=00i44250;25C0=00i44250;25C1=00i44250;25C2=00i44250;25C3=00i44250;25C4=00i44250;25C5=00i44250;25C6=00i44250;25C7=00i44250;25C8=00i44250;25C9=00i44250;25CC=00i44250;25CD=00i44250;25CE=00i44250;25CF=00i44250;25D6=00i44250;25D7=00i44250;25E6=00i44250;26=00o00540;26 26=00i44120;266D=00o02470;266E=00o02470;266F=00o02470;27=00o00541;2758=00i55260;2772=11p00012;2773=11o00012;27E6=11p00012;27E7=11o00012;27E8=11p00012;27E9=11o00012;27EA=11p00012;27EB=11o00012;27EC=11p00012;27ED=11o00012;27EE=11p00012;27EF=11o00012;27F0=00i55272;27F1=00i55272;27F5=00i55273;27F6=00i55273;27F7=00i55273;27F8=00i55273;27F9=00i55273;27FA=00i55273;27FB=00i55273;27FC=00i55273;27FD=00i55273;27FE=00i55273;27FF=00i55273;28=11p00012;29=11o00012;2900=00i55271;2901=00i55271;2902=00i55271;2903=00i55271;2904=00i55271;2905=00i55271;2906=00i55271;2907=00i55271;2908=00i55270;2909=00i55270;290A=00i55272;290B=00i55272;290C=00i55273;290D=00i55273;290E=00i55273;290F=00i55273;2910=00i55273;2911=00i55271;2912=00i55272;2913=00i55272;2914=00i55271;2915=00i55271;2916=00i55271;2917=00i55271;2918=00i55271;2919=00i55271;291A=00i55271;291B=00i55271;291C=00i55271;291D=00i55271;291E=00i55271;291F=00i55271;2920=00i55271;2921=00i55272;2922=00i55272;2923=00i55270;2924=00i55270;2925=00i55270;2926=00i55270;2927=00i55270;2928=00i55270;2929=00i55270;292A=00i55270;292B=00i55270;292C=00i55270;292D=00i55270;292E=00i55270;292F=00i55270;2930=00i55270;2931=00i55270;2932=00i55270;2933=00i55271;2934=00i55270;2935=00i55270;2936=00i55270;2937=00i55270;2938=00i55270;2939=00i55270;293A=00i55271;293B=00i55271;293C=00i55271;293D=00i55271;293E=00i55270;293F=00i55270;2940=00i55270;2941=00i55270;2942=00i55271;2943=00i55271;2944=00i55271;2945=00i55271;2946=00i55271;2947=00i55271;2948=00i55271;2949=00i55270;294A=00i55271;294B=00i55271;294C=00i55270;294D=00i55270;294E=00i55273;294F=00i55272;2950=00i55273;2951=00i55272;2952=00i55273;2953=00i55273;2954=00i55272;2955=00i55272;2956=00i55272;2957=00i55272;2958=00i55272;2959=00i55272;295A=00i55273;295B=00i55273;295C=00i55272;295D=00i55272;295E=00i55273;295F=00i55273;2960=00i55272;2961=00i55272;2962=00i55271;2963=00i55270;2964=00i55271;2965=00i55270;2966=00i55271;2967=00i55271;2968=00i55271;2969=00i55271;296A=00i55271;296B=00i55271;296C=00i55271;296D=00i55271;296E=00i55272;296F=00i55272;2970=00i55271;2971=00i55271;2972=00i55271;2973=00i55271;2974=00i55271;2975=00i55271;2976=00i55271;2977=00i55271;2978=00i55271;2979=00i55271;297A=00i55271;297B=00i55271;297C=00i55271;297D=00i55271;297E=00i55270;297F=00i55270;2980=01p00012o00012;2981=00i33260;2982=00i33260;2983=11p00012;2984=11o00012;2985=11p00012;2986=11o00012;2987=11p00012;2988=11o00012;2989=11p00012;298A=11o00012;298B=11p00012;298C=11o00012;298D=11p00012;298E=11o00012;298F=11p00012;2990=11o00012;2991=11p00012;2992=11o00012;2993=11p00012;2994=11o00012;2995=11p00012;2996=11o00012;2997=11p00012;2998=11o00012;2999=00i33270;299A=00i33270;299B=00i33270;299C=00i33270;299D=00i33270;299E=00i33270;299F=00i33270;29A0=00i33260;29A1=00i33260;29A2=00i33260;29A3=00i33260;29A4=00i33260;29A5=00i33260;29A6=00i33260;29A7=00i33260;29A8=00i33260;29A9=00i33260;29AA=00i33260;29AB=00i33260;29AC=00i33260;29AD=00i33260;29AE=00i33260;29AF=00i33260;29B0=00i33260;29B1=00i33260;29B2=00i33260;29B3=00i33260;29B4=00i33260;29B5=00i33260;29B6=00i44260;29B7=00i44260;29B8=00i44260;29B9=00i44260;29BA=00i44260;29BB=00i44260;29BC=00i44260;29BD=00i44260;29BE=00i44260;29BF=00i44260;29C0=00i55250;29C1=00i55250;29C2=00i33260;29C3=00i33260;29C4=00i44260;29C5=00i44260;29C6=00i44260;29C7=00i44260;29C8=00i44260;29C9=00i33260;29CA=00i33260;29CB=00i33260;29CC=00i33260;29CD=00i33260;29CE=00i55260;29CF=00i55260i55260;29D0=00i55260i55260;29D1=00i55260;29D2=00i55260;29D3=00i55260;29D4=00i55260;29D5=00i55260;29D6=00i44260;29D7=00i44260;29D8=00i33260;29D9=00i33260;29DB=00i33260;29DC=00i33260;29DD=00i33260;29DE=00i55260;29DF=00i33270;29E0=00i33260;29E1=00i55260;29E2=00i44260;29E3=00i55250;29E4=00i55250;29E5=00i55250;29E6=00i55250;29E7=00i33260;29E8=00i33260;29E9=00i33260;29EA=00i33260;29EB=00i33260;29EC=00i33260;29ED=00i33260;29EE=00i33260;29EF=00i33270;29F0=00i33260;29F1=00i33260;29F2=00i33260;29F3=00i33250;29F4=00i55270;29F5=00i44260;29F6=00i44260;29F7=00i44260;29F8=00i33260;29F9=00i33260;29FA=00i33260;29FB=00i33260;29FC=11p00012;29FD=11o00012;29FE=00i44260;29FF=00i44260;2A=00i33360;2A 2A=00i11460;2A 3D=00i44250;2A00=16p12330;2A01=16p12300;2A02=16p12330;2A03=16p12320;2A04=16p12320;2A05=16p12330;2A06=16p12330;2A07=16p12330;2A08=16p12330;2A09=16p12330;2A0A=16p12290;2A0B=12p12290;2A0C=12p01310;2A0D=12p12310;2A0E=12p12310;2A0F=12p12310;2A10=16p12310;2A11=16p12310;2A12=16p12310;2A13=16p12310;2A14=16p12310;2A15=12p12310;2A16=12p12310;2A17=12p12310;2A18=12p12310;2A19=12p12310;2A1A=12p12310;2A1B=12p12310;2A1C=12p12310;2A1D=00i33260;2A1E=00i33260;2A1F=00i33260;2A20=00i33260;2A21=00i33260;2A22=00i44260;2A23=00i44260;2A24=00i44260;2A25=00i44260;2A26=00i44260;2A27=00i44260;2A28=00i44260;2A29=00i44260;2A2A=00i44260;2A2B=00i44260;2A2C=00i44260;2A2D=00i44260;2A2E=00i44260;2A2F=00i44360;2A30=00i44260;2A31=00i44260;2A32=00i44260;2A33=00i44260;2A34=00i44260;2A35=00i44260;2A36=00i44260;2A37=00i44260;2A38=00i44260;2A39=00i44260;2A3A=00i44260;2A3B=00i44260;2A3C=00i44260;2A3D=00i44260;2A3E=00i44260;2A3F=00i44360;2A40=00i44260;2A41=00i44260;2A42=00i44260;2A43=00i44260;2A44=00i44260;2A45=00i44260;2A46=00i44260;2A47=00i44260;2A48=00i44260;2A49=00i44260;2A4A=00i44260;2A4B=00i44260;2A4C=00i44260;2A4D=00i44260;2A4E=00i44260;2A4F=00i44260;2A50=00i44260;2A51=00i44260;2A52=00i44260;2A53=00i44260;2A54=00i44260;2A55=00i44260;2A56=00i44260;2A57=00i44260;2A58=00i44260;2A59=00i55260;2A5A=00i44260;2A5B=00i44260;2A5C=00i44260;2A5D=00i44260;2A5E=00i44260;2A5F=00i44260;2A60=00i44260;2A61=00i44260;2A62=00i44260;2A63=00i44260;2A64=00i44260;2A65=00i44260;2A66=00i55260;2A67=00i55260;2A68=00i55260;2A69=00i55260;2A6A=00i55260;2A6B=00i55260;2A6C=00i55260;2A6D=00i55260;2A6E=00i55260;2A6F=00i55260;2A70=00i55260;2A71=00i44260;2A72=00i44260;2A73=00i55260;2A74=00i55260;2A75=00i55260;2A76=00i55260;2A77=00i55260;2A78=00i55260;2A79=00i55260;2A7A=00i55260;2A7B=00i55260;2A7C=00i55260;2A7D=00i55260i55260;2A7E=00i55260i55260;2A7F=00i55260;2A80=00i55260;2A81=00i55260;2A82=00i55260;2A83=00i55260;2A84=00i55260;2A85=00i55260;2A86=00i55260;2A87=00i55250;2A88=00i55250;2A89=00i55260;2A8A=00i55260;2A8B=00i55260;2A8C=00i55260;2A8D=00i55260;2A8E=00i55260;2A8F=00i55260;2A90=00i55260;2A91=00i55260;2A92=00i55260;2A93=00i55260;2A94=00i55260;2A95=00i55260;2A96=00i55260;2A97=00i55260;2A98=00i55260;2A99=00i55260;2A9A=00i55260;2A9B=00i55260;2A9C=00i55260;2A9D=00i55260;2A9E=00i55260;2A9F=00i55260;2AA0=00i55260;2AA1=00i55260i55260;2AA2=00i55260i55260;2AA3=00i55260;2AA4=00i55260;2AA5=00i55260;2AA6=00i55260;2AA7=00i55260;2AA8=00i55260;2AA9=00i55260;2AAA=00i55260;2AAB=00i55260;2AAC=00i55260;2AAD=00i55260;2AAE=00i55260;2AAF=00i55250i55250;2AB0=00i55250i55250;2AB1=00i55260;2AB2=00i55260;2AB3=00i55260;2AB4=00i55260;2AB5=00i55260;2AB6=00i55260;2AB7=00i55260;2AB8=00i55260;2AB9=00i55260;2ABA=00i55260;2ABB=00i55260;2ABC=00i55260;2ABD=00i55260;2ABE=00i55260;2ABF=00i55260;2AC0=00i55260;2AC1=00i55260;2AC2=00i55260;2AC3=00i55260;2AC4=00i55260;2AC5=00i55260;2AC6=00i55260;2AC7=00i55260;2AC8=00i55260;2AC9=00i55260;2ACA=00i55260;2ACB=00i55260;2ACC=00i55260;2ACD=00i55260;2ACE=00i55260;2ACF=00i55260;2AD0=00i55260;2AD1=00i55260;2AD2=00i55260;2AD3=00i55260;2AD4=00i55260;2AD5=00i55260;2AD6=00i55260;2AD7=00i55260;2AD8=00i55260;2AD9=00i55260;2ADA=00i55260;2ADB=00i55260;2ADC=00i55260;2ADD=00i55260;2ADE=00i55260;2ADF=00i55260;2AE0=00i55260;2AE1=00i55260;2AE2=00i55260;2AE3=00i55260;2AE4=00i55260;2AE5=00i55260;2AE6=00i55260;2AE7=00i55260;2AE8=00i55260;2AE9=00i55260;2AEA=00i55260;2AEB=00i55260;2AEC=00i55260;2AED=00i55260;2AEE=00i55260;2AEF=00i55260;2AF0=00i55260;2AF1=00i55260;2AF2=00i55260;2AF3=00i55260;2AF4=00i44260;2AF5=00i44260;2AF6=00i44260;2AF7=00i55260;2AF8=00i55260;2AF9=00i55260;2AFA=00i55260;2AFB=00i44260;2AFC=16p12330;2AFD=00i44260;2AFE=00i33260;2AFF=16p12330;2B=00i44280p01280;2B 2B=00o00540;2B 3D=00i44250;2B45=00i55272;2B46=00i55272;2C=28i03030;2C6=00o00543;2C7=00o00543;2C9=00o00543;2CA=00o00541;2CB=00o00541;2CD=00o00543;2D=00i44280p01280;2D 2D=00o00540;2D 3D=00i44250;2D 3E=00i55050;2D8=00o00541;2D9=00o00541;2DA=00o00541;2DC=00o00543;2DD=00o00541;2E=00i33360;2E 2E=00o00060;2E 2E 2E=00o00060;2F=00i11410;2F 2F=00i11490;2F 3D=00i44250;2F7=00o00543;302=00o00543;30C=00o00543;311=00o00541;3A=00i12060;3A 3D=00i44250;3B=28i03020;3C=00i55190;3C 3D=00i55150;3C 3E=00i11460;3D=00i55250;3D 3D=00i44250;3E=00i55170;3E 3D=00i55170;3F=00i11510;3F6=00i55070;40=00i11500;5B=11p00012;5C=00i00400;5D=11o00012;5E=00o00543;5F=00o00543;60=00o00541;7B=11p00012;7C=11p00012o00012i22272;7C 7C=11p00012o00012i44120;7C 7C 7C=11p00012o00012i22272;7D=11o00012;7E=00o00543;A8=00o00541;AC=00p21430;AF=00o00543;B0=00o00540;B1=00i44280p01280;B4=00o00541;B7=00i44370;B8=00o00541;D7=00i44360;F7=00i44410;";
  var dX = ";2061;2062;2063;2064;";
  var bc = ";2A0B;222C;222D;222B;222E;222F;2230;2231;2232;2233;2A0C;2A0D;2A0E;2A0F;2A10;2A11;2A12;2A13;2A14;2A15;2A16;2A17;2A18;2A19;2A1A;2A1B;2A1C;";
  var ao = ";0028 SVE 230/1000 P{218/5,C:218/995/-194/500,L:226/995,C:226/5/-64/500,L:218/5};0029 symV 0028;005B SV 262/1000 P{257/0,L:0/0,L:0/1000,L:257/1000,L:257/950,L:50/950,L:50/50,L:257/50};005D symV 005B;007B SVE 275/1000 P{272/0,C:110/203/110/0,L:110/386,C:-18/500/110/500,C:110/613/110/500,L:110/791,C:272/1000/110/1000,C:161/796/161/981,L:161/628,C:67/500/161/500,C:161/371/161/500,L:161/203,C:272/0/161/0};007D symV 007B;007C SV 70/1000 P{10/30,L:10/970,L:60/970,L:60/30};2016 SV 170/1000 P{10/30,L:10/970,L:60/970,L:60/30} P{110/30,L:110/970,L:160/970,L:160/30};2225 eq 2016;230A SV 231/1010 P{221/10,L:10/10,L:10/1000,L:72/1000,L:72/73,C:138/25/72/25,L:221/25,L221/10};2309 symV 2308;2308 SV 231/1010 P{10/10,L:10/1000,L:221/1000,L:221/975,L:138/975,C:72/927/72/975,L:72/10};230B symV 230A;2329 SVE 257/1000 P{257/0,L:205/0,L:0/490,L:0/510,L:205/1000,L:257/1000,L:66/500};232A symV 2329;2772 SV 277/1000 P{225/0,L:0/217,L:0/783,L:225/1000,L:277/1000,L:66/757,L:66/243,L:277/0};2773 symV 2772;27E6 SV 274/1000 P{274/0,L:0/0,L:0/1000,L:274/1000,L:274/984,L:167/984,C:66/887/66/984,L:66/104,C:167/20/66/20,L:274/20} P{197/10,L:147/10,L:147/990,L:197/990};27E7 symV 27E6;27E8 eq 2329;27E9 eqsV 2329;27EA SVE 447/1000 P{257/0,L:205/0,L:0/490,L:0/510,L:205/1000,L:257/1000,L:66/500} P{447/0,L:395/0,L:190/490,L:190/510,L:395/1000,L:447/1000,L:256/500};27EB symV 27EA;27EC SV 288/1000 P{235/0,L:0/217,L:0/783,L:235/1000,L:288/1000,L:66/760,L:66/240,L:288/0} P{212/61,L:172/115,L:172/885,L:212/939};27ED symV 27EC;27EE eq 0028;27EF eqsV 0028;2980 SV 270/1000 P{10/30,L:10/970,L:60/970,L:60/30} P{110/30,L:110/970,L:160/970,L:160/30} P{210/30,L:210/970,L:260/970,L:260/30};2983 SVE 335/1000 P{240/0,C:78/134/78/0,L:78/317,C:-10/500/78/500,C:78/613/78/500,L:78/872,C:240/1000/78/1000,L:333/1000,L:333/991,L:240/991,C:129/877/129/1000,L:129/628,C:35/500/129/500,C:129/371/129/500,L:129/134,C:240/9/129/0,L:333/9,L:333/0,L:240/0} P{246/5,L:206/5,L:206/995,L:246/995};2984 symV 2983;2985 SVE 270/1000 P{268/0,C:268/1000/-260/500,L:268/981,C:268/19/-180/500} P{168/114,C:168/886/50/500,L:216/946,C:216/54/90/500};2986 symV 2985;2987 SVE 270/1000 P{268/0,C:268/1000/-260/500,L:268/950,C:268/50/-180/500} P{230/50,L:230/950,L:268/1000,L:268/0};2988 symV 2987;2989 SVE 250/1000 P{244/0,L:0/500,L:244/1000,L:244/910,L:50/500,L:244/90} P{244/0,L:210/80,L:210/920,L:244/1000};298A symV 2989;298B SV 262/1000 P{259/1000,L:0/1000,L:0/950,L:259/950} P{259/900,L:0/900,L:0/0,L:259/0,L:259/50,L:50/50,L:50/850,L:259/850};298C symV 298B;298F SV 262/1000 P{259/0,L:0/0,L:0/1000,L:259/1000,L:259/950,L:85/950,L:199/837,L:163/801,L:50/914,L:50/50,L:259/50};298E symV 298F;298D SV 262/1000 P{259/1000,L:0/1000,L:0/0,L:259/0,L:259/50,L:85/50,L:199/163,L:163/199,L:50/86,L:50/950,L:259/950};2990 symV 298D;2991 SVE 257/1000 P{257/0,L:205/0,L:0/490,L:0/510,L:205/1000,L:257/1000,L:66/500} P{190/500,R:190/500/70};2992 symV 2991;2993 SVE 557/1000 P{557/225,L:0/500,L:557/775,L:557/725,L:100/500,L:557/275} P{491/0,C:491/1000/-30/500,L:507/950,C:507/50/70/500};2994 symV 2993;2996 SVE 557/1000 P{557/225,L:0/500,L:557/775,L:557/725,L:100/500,L:557/275} P{65/50,C:65/950/565/500,L:85/1000,C:85/0/675/500} P{215/50,C:215/950/715/500,L:235/1000,C:235/0/825/500};2995 symV 2996;2997 SV 280/1000 P{250/0,L:0/244,L:0/752,L:250/1000,L:278/1000,L:154/828,L:154/177,L:278/0};2998 symV 2997;29FC SVE 362/1000 P{300/0,C:0/500/280/400,C:300/1000/280/600,L:360/940,C:120/500/320/600,C:360/60/320/400};29FD symV 29FC;;221A SVE 700/1000 P{335/0,L:143/480,C:16/508/100/559,L:4/528,L:160/653,L:179/653,L:388/159,L:646/1000,L:695/1000,L:377/0};2044 SB 499/690 P{0/0,L:453/690,L:499/690,L:49/0};2190 SH 800/410 P{793/180,L:194/180,C:182/123/150/170,L:264/27,L:245/8,C:7/200/190/100,C:245/400/190/300,L:265/380,L:182/284,C:194/220/150/230,L:793/220};2192 symV 2190;2191 SV 390/822 P{215/4,L:175/4,L:175/634,C:120/647/165/680,L:24/564,L:5/585,C:195/822/100/660,C:385/585/290/660,L:366/564,L:271/647,C:215/634/225/680};2193 symH 2191;2194 SH 884/406 P{204/180,C:192/123/160/170,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:680/220,C:692/284/724/230,L:610/380,L:630/398,C:867/200/690/300,C:630/8/690/100,L:610/26,L:691/124,C:679/180/724/170};2195 SV 410/900 P{185/704,C:130/717/175/750,L:34/634,L:15/655,C:205/892/110/730,C:395/655/300/730,L:376/634,L:281/717,C:225/704/235/750,L:225/194,C:281/183/235/135,L:376/264,L:395/244,C:205/6/300/168,C:15/245/110/168,L:34/265,L:130/183,C:185/195/175/135};219E SH 1000/406 P{986/180,L:411/180,C:400/123/370/170,L:481/27,L:461/8,C:280/180/400/100,L:204/180,C:192/123/160/170,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:279/220,C:462/400/400/300,L:482/380,L:400/284,C:412/220/370/230,L:986/220};21A0 symV 219E;219F SV 410/1220 P{225/4,L:185/4,L:185/834,C:130/847/175/880,L:34/764,L:15/785,C:185/990/110/860,L:185/1034,C:130/1047/175/1080,L:34/964,L:15/985,C:205/1222/110/1060,C:395/985/300/1060,L:376/964,L:281/1047,C:225/1034/235/1080,L:225/990,C:395/785/300/860,L:376/764,L:281/847,C:225/834/235/880};21A1 symH 219F;21A2 SH 816/406 P{601/180,L:204/180,C:192/123/160/170,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:601/220,C:783/400/730/300,L:803/380,L:721/284,C:720/123/650/200,L:802/27,L:782/8,C:601/180/730/100};21A3 symV 21A2;21A4 SH 816/406 P{754/180,L:204/180,C:192/123/160/170,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:754/220,L:754/400,L:804/400,L:804/8,L:754/8};21A6 symV 21A4;21A5 SV 410/842 P{185/50,L:185/644,C:130/657/175/690,L:34/574,L:15/595,C:205/832/110/670,C:395/595/300/670,L:376/574,L:281/657,C:225/644/235/690,L:225/50,L:407/50,L:407/10,L:16/10,L:16/50};21A7 symH 21A5;21A8 SV 410/812 P{185/624,C:130/637/175/670,L:34/554,L:15/575,C:205/812/110/650,C:395/575/300/650,L:376/554,L:281/637,C:225/624/235/670,L:225/234,C:281/223/235/175,L:376/304,L:395/284,C:207/46/300/208,L:408/46,L:408/6,L:17/6,L:17/46,L:203/46,C:15/285/110/208,L:34/305,L:130/223,C:185/235/175/175};21A9 SH 818/490 P{626/180,L:204/180,C:192/123/160/170,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:626/220,C:736/335/736/220,C:626/437/736/437,L:545/437,L:545/477,L:640/477,C:780/335/780/477,C:626/180/780/180};21AA symV 21A9;21AB SH 815/555 P{626/240,L:204/240,C:192/183/160/230,L:274/87,L:255/68,C:17/260/200/160,C:255/460/200/360,L:275/440,L:192/344,C:204/280/160/290,L:626/280,C:736/395/736/280,C:640/497/736/497,C:541/384/541/497,L:541/10,L:490/10,L:490/382,C:643/543/500/543,C:790/396/790/543,C:626/240/790/240};21AC symV 21AB;21B0 SV 424/810 P{204/590,C:192/543/160/580,L:274/437,L:255/418,C:17/610/200/510,C:255/810/200/710,L:275/790,L:192/694,C:204/630/160/640,L:407/630,L:407/4,L:367/4,L:367/590};21B1 symV 21B0;21B2 symH 21B0;21B3 symB 21B0;21B4 SB 830/1000 P{660/214,C:716/203/670/155,L:811/284,L:830/264,C:640/26/725/188,C:450/265/545/188,L:470/285,L:565/203,C:620/215/620/155,L:620/846,L:13/846,L:13/886,L:660/886};21B5 SB 820/850 P{204/180,C:192/123/160/160,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:760/220,L:760/842,L:800/842,L:800/180};GGB9 SH 884/750 P{244/180,C:232/123/200/170,L:314/27,L:295/8,C:57/200/240/100,L:57/8,L:17/8,L:17/400,L:57/400,L:57/200,C:295/400/240/300,L:315/380,L:232/284,C:244/220/200/230,L:791/220,L:791/180} P{24/560,L:639/560,C:652/622/684/570,L:570/720,L:590/738,C:827/540/650/640,L:827/738,L:867/738,L:867/738,L:867/347,L:827/347,L:827/540,C:590/347/650/440,L:570/366,L:651/464,C:639/520/684/510,L:24/520};21B9 symV GGB9;21BC SH 880/270 P{864/10,L:17/10,C:315/260/210/120,L:338/230,L:280/170,C:259/50/160/50,L:864/50};21BD symH 21BC;21BE SV 212/850 P{5/14,L:5/832,C:198/594/70/670,L:179/574,L:83/646,C:45/634/45/670,L:45/14};21BF symV 21BE;21C0 symV 21BC;21C1 symB 21BC;21C2 symH 21BE;21C3 symB 21BE;21C4 SH 884/750 P{204/180,C:192/123/160/170,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:791/220,L:791/180} P{24/560,L:679/560,C:692/622/724/570,L:610/720,L:630/738,C:867/540/690/640,C:630/347/690/440,L:610/366,L:691/464,C:679/520/724/510,L:24/520};21C5 SV 745/900 P{185/704,C:130/717/175/750,L:34/634,L:15/625,C:205/892/110/730,C:395/655/300/730,L:376/634,L:281/717,C:225/704/235/750,L:225/6,L:185/6} P{565/194,C:621/183/575/135,L:716/264,L:735/244,C:545/6/640/168,C:345/245/450/168,L:374/265,L:470/183,C:525/195/515/135,L:525/892,L:565/892};21C6 symV 21C4;21C7 SH 884/810 P{204/180,C:192/123/160/170,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:791/220,L:791/180} P{204/580,C:192/523/160/570,L:274/427,L:255/408,C:17/580/200/500,C:255/800/200/700,L:275/780,L:192/684,C:204/620/160/630,L:791/620,L:791/580};21C8 SV 800/900 P{185/704,C:130/717/175/750,L:34/634,L:15/655,C:205/892/110/730,C:395/655/300/730,L:376/634,L:281/717,C:225/704/235/750,L:225/6,L:185/6} P{585/704,C:530/717/575/750,L:434/634,L:415/655,C:605/892/510/730,C:795/655/700/730,L:776/634,L:681/717,C:625/704/635/750,L:625/6,L:585/6};21C9 symV 21C7;21CA symH 21C8;21CB SH 880/490 P{864/290,L:17/290,C:253/490/140/370,L:273/470,L:201/394,C:213/330/160/330,L:864/330} P{17/200,L:864/200,C:626/7/704/110,L:607/26,L:678/122,C:667/160/720/160,L:17/160};21CC symV 21CB;21D0 SH 840/600 P{822/170,L:332/170,C:329/106/280/150,L:403/25,L:382/5,L:16/300,L:382/600,L:403/581,L:328/500,C:332/436/280/470,L:822/436,L:822/370,L:188/370,C:187/236/100/300,L:822/236};21D1 SV 610/850 P{171/14,L:171/516,C:107/519/150/570,L:26/445,L:6/466,L:300/832,L:602/466,L:582/445,L:500/520,C:437/519/450/570,L:437/14,L:371/14,L:371/660,C:237/660/300/770,L:237/14};21D2 symV 21D0;21D3 symH 21D1;21D4 SH 920/550 P{599/140,L:323/140,C:358/33/250/128,L:335/10,L:17/270,L:335/537,L:358/514,C:320/406/250/406,L:600/406,C:561/514/710/406,L:589/537,L:903/270,L:589/10,L:561/31,C:600/140/710/140,L:600/206,L:731/206,C:731/340/850/270,L:188/340,C:188/206/80/270,L:599/206,L:599/140};21D5 SV 610/960 P{171/321,L:171/644,C:107/647/150/680,L:26/573,L:6/594,L:300/960,L:602/594,L:582/573,L:500/647,C:437/647/456/680,L:437/322,C:500/318/456/280,L:582/393,L:602/372,L:310/6,L:6/372,L:26/393,L:107/318,C:171/322/171/280,L:237/322,L:237/177,C:371/177/310/80,L:371/688,C:237/688/310/880,L:237/321};21DA SH 840/810 P{822/170,L:303/170,L:402/27,L:379/11,L:16/400,L:379/794,L:403/779,L:304/639,L:822/639,L:822/570,L:257/570,L:176/484,C:188/436/150/436,L:822/436,L:822/370,L:186/370,C:175/323/150/370,L:256/236,L:822/236};21DB symV 21DA;21E4 SH 810/410 P{244/180,C:232/123/200/170,L:314/27,L:295/8,C:57/200/240/100,L:57/8,L:17/8,L:17/400,L:57/400,L:57/200,C:295/400/240/300,L:315/380,L:232/284,C:244/220/200/230,L:791/220,L:791/180};21E5 symV 21E4;21E6 SH 840/610 P{822/170,L:402/170,L:402/15,L:382/5,L:16/300,L:382/600,L:402/590,L:402/436,L:822/436,L:822/220,L:772/220,L:772/386,L:352/386,L:352/492,L:187/376,C:187/231/100/300,L:352/103,L:352/220,L:822/220};21E7 SV 630/830 P{181/4,L:181/436,L:26/436,L:16/456,L:310/822,L:612/456,L:602/436,L:447/436,L:447/4,L:231/4,L:231/54,L:387/54,L:387/486,L:513/486,L:387/651,C:242/651/310/760,L:114/486,L:231/486,L:231/4};21E8 symV 21E6;21E9 symH 21E7;21EA SV 630/865 P{181/232,L:181/466,L:26/466,L:16/466,L:310/852,L:612/486,L:602/486,L:447/486,L:447/232,L:231/232,L:231/282,L:387/282,L:387/516,L:513/516,L:387/681,C:242/681/310/790,L:114/516,L:231/516,L:231/232} P{181/6,L:181/167,L:447/167,L:447/6,L:231/6,L:231/56,L:397/56,L:397/117,L:231/117,L:231/6};21EB SV 600/935 P{85/11,L:85/63,L:163/63,L:163/640,L:15/640,L:300/923,L:581/640,L:435/640,L:435/63,L:513/63,L:513/11,L:121/11,L:121/23,L:483/23,L:483/47,L:408/47,L:408/655,L:531/655,L:300/888,L:61/655,L:189/655,L:189/47,L:121/47,L:121/23,L:121/23,L:121/11};21EC SV 600/935 P{85/11,L:85/63,L:163/63,L:163/640,L:15/640,L:300/923,L:581/640,L:435/640,L:435/63,L:513/63,L:513/11,L:121/11,L:121/23,L:483/23,L:483/47,L:408/47,L:408/655,L:531/655,L:300/888,L:61/655,L:189/655,L:189/47,L:121/47,L:121/23,L:121/23,L:121/11} P{195/699,L:195/746,L:408/746,L:408/699};21ED SV 600/935 P{85/11,L:85/63,L:163/63,L:163/640,L:15/640,L:300/923,L:581/640,L:435/640,L:435/63,L:513/63,L:513/11,L:121/11,L:121/23,L:483/23,L:483/47,L:408/47,L:408/655,L:531/655,L:300/888,L:61/655,L:189/655,L:189/47,L:121/47,L:121/23,L:121/23,L:121/11} P{273/47,L:273/860,L:333/860,L:333/47};21EE SV 600/1045 P{163/8,L:163/610,L:15/610,L:300/893,L:581/610,L:435/610,L:435/8,L:188/8,L:188/33,L:408/33,L:408/625,L:531/625,L:300/858,L:61/625,L:189/625,L:189/8} P{153/752,L:15/752,L:300/1036,L:581/752,L:441/752,L:419/770,L:531/770,L:300/1001,L:61/770,L:173/770};21EF SV 600/1077 P{85/11,L:85/63,L:163/63,L:163/640,L:15/640,L:300/923,L:581/640,L:435/640,L:435/63,L:513/63,L:513/11,L:121/11,L:121/23,L:483/23,L:483/47,L:408/47,L:408/655,L:531/655,L:300/888,L:61/655,L:189/655,L:189/47,L:121/47,L:121/23,L:121/23,L:121/11} P{153/782,L:15/782,L:300/1066,L:581/782,L:441/782,L:419/800,L:531/800,L:300/1031,L:61/800,L:173/800};21F0 SH 945/600 P{646/165,L:69/165,L:69/87,L:17/87,L:17/515,L:69/515,L:69/437,L:646/437,L:646/585,L:929/300,L:646/19,L:661/69,L:894/300,L:662/539,L:662/411,L:53/411,L:53/479,L:29/479,L:28/117,L:53/117,L:53/192,L:661/192,L:661/69,L:646/18};21F3 SV 600/900 P{163/293,L:163/610,L:15/610,L:300/893,L:581/610,L:435/610,L:435/292,L:581/292,L:300/8,L:15/293,L:61/275,L:300/33,L:531/275,L:408/275,L:408/624,L:531/625,L:300/858,L:61/625,L:189/625,L:189/275,L:60/275,L:16/293};21F5 symV 21C5;GGF6 SH 884/1200 P{204/580,C:192/523/160/570,L:274/427,L:255/408,C:17/600/200/500,C:255/800/200/700,L:275/780,L:192/684,C:204/620/160/630,L:791/620,L:791/580} P{204/980,C:192/923/160/970,L:274/827,L:255/808,C:17/980/200/900,C:255/1200/200/1100,L:275/1180,L:192/1084,C:204/1020/160/1030,L:791/1020,L:791/980} P{204/180,C:192/123/160/170,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:791/220,L:791/180};21F6 symV GGF6;21FD SH 840/400 P{823/170,L:285/170,L:285/12,L:17/200,L:285/394,L:285/237,L:235/237,L:235/289,L:114/200,L:235/116,L:235/236,L:823/236};21FE symV 21FD;21FF SH 900/400 P{625/170,L:275/170,L:275/12,L:7/200,L:275/394,L:275/237,L:225/237,L:225/289,L:104/200,L:225/116,L:225/236,L:625/236,L:625/394,L:893/200,L:625/7,L:625/171,L:675/171,L:675/117,L:796/200,L:675/290,L:675/170};27F0 SV 928/845 P{176/14,L:176/525,L:31/445,L:16/470,C:460/832/270/620,C:912/470/650/620,L:900/444,L:752/525,L:752/14,L:686/14,L:686/571,L:582/659,L:582/14,L:516/14,L:516/711,C:412/711/460/770,L:412/14,L:346/14,L:346/656,L:242/571,L:242/14};27F1 symH 27F0;27F5 SH 1500/415 P{1481/180,L:204/180,C:192/123/160/170,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:1481/220};27F6 symV 27F5;27F7 SH 1500/415 P{204/180,C:192/123/160/170,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:1280/220,C:1292/284/1324/230,L:1210/380,L:1230/398,C:1467/200/1290/300,C:1230/8/1290/100,L:1210/26,L:1291/124,C:1279/180/1324/170};27F8 SH 1500/610 P{1481/170,L:332/170,C:329/106/280/150,L:403/25,L:382/5,L:16/300,L:382/600,L:403/581,L:328/500,C:332/436/280/470,L:1481/436,L:1481/370,L:188/370,C:187/236/100/300,L:1481/236};27F9 symV 27F8;27FA SH 1510/550 P{1200/140,L:323/140,C:358/33/250/128,L:335/10,L:17/270,L:335/537,L:358/514,C:320/406/250/406,L:1200/406,C:1161/514/1300/406,L:1189/537,L:1503/270,L:1189/10,L:1161/31,C:1200/140/1300/140,L:1200/206,L:1331/206,C:1331/340/1450/270,L:188/340,C:188/206/80/270,L:1200/206,L:1200/140};27FB SH 1510/408 P{1454/180,L:204/180,C:192/123/160/170,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:1454/220,L:1454/400,L:1504/400,L:1504/8,L:1454/8};27FC symV 27FB;;27FD SH 1500/605 P{1430/170,L:332/170,C:329/106/280/150,L:403/25,L:382/5,L:16/300,L:382/600,L:403/581,L:328/500,C:332/436/280/470,L:1431/436,L:1431/561,L:1481/561,L:1481/45,L:1431/45,L:1431/370,L:188/370,C:187/236/100/300,L:1430/236};27FE symV 27FD;;290A SV 820/850 P{174/14,L:174/545,L:31/446,L:15/470,C:400/832/220/620,C:798/470/600/620,L:783/446,L:643/545,L:643/14,L:574/14,L:574/581,L:488/670,C:440/660/440/720,L:440/14,L:374/14,L:374/660,C:327/670/374/720,L:240/591,L:240/14};290B symH 290A;;2912 SV 410/885 P{225/14,L:185/14,L:185/644,C:130/657/175/690,L:34/574,L:15/595,C:205/832/110/670,L:15/832,L:15/872,L:406/872,L:406/832,L:206/832,C:395/595/300/670,L:376/574,L:281/657,C:225/644/235/690};2913 symH 2912;;294E SH 880/250 P{864/20,L:17/20,C:254/239/210/130,L:274/210,L:202/114,C:214/60/160/60,L:668/60,C:680/114/710/60,L:608/210,L:628/229,C:864/20/670/130};294F SV 250/900 P{23/14,L:23/872,L:25/872,C:237/594/130/680,L:218/574,L:122/646,C:84/634/84/670,L:84/212,C:122/200/84/180,L:218/270,L:237/252,C:23/14/120/190};2950 symH 294E;;2951 symH 294F;;2952 SH 850/410 P{834/180,L:67/180,L:67/8,L:18/8,L:18/398,L:67/398,L:67/180,C:304/399/260/290,L:324/370,L:252/274,C:264/220/210/220,L:834/220,L:834/180};2953 symV 2952;;2954 SV 420/935 P{200/14,L:200/872,L:14/872,L:14/920,L:405/920,L:405/872,L:200/872,C:407/594/300/680,L:388/574,L:292/646,C:254/634/254/660,L:254/14};2955 symH 2954;;2956 symH 2952;;2957 symB 2952;;2958 symV 2954;;2959 symB 2954;;295A SH 830/410 P{779/180,L:17/180,C:254/399/210/290,L:274/370,L:202/274,C:214/220/160/220,L:779/220,L:779/399,L:820/399,L:820/8,L:779/8};295B symV 295A;;295C SV 420/925 P{200/54,L:200/912,C:407/634/300/720,L:388/614,L:292/686,C:254/674/254/740,L:254/54,L:405/54,L:405/4,L:14/4,L:14/54};295D symH 295C;;295E symH 295A;;295F symB 295A;;2960 symV 295C;;2961 symB 295C;;296E SV 600/820 P{168/4,L:168/614,C:130/626/168/670,L:34/554,L:15/574,C:229/812/129/670,L:229/4} P{373/4,L:373/812,L:434/812,L:434/192,C:472/180/434/130,L:568/252,L:587/232,C:373/4/480/150};296F symV 296E;;005E SHE 430/425 P{4/7,L:215/420,L:426/7,L:215/296} ;030C symH 005E;;005F SH 512/70 P{6/10,L:6/60,L:506/60,L:506/10} ;0332 eq 005F;007E SHE 470/145 P{30/8,L:2/53,C:127/140/43/140,C:244/106/170/140,C:340/72/325/72,C:428/140/390/72,L:464/94,C:339/8/410/8,C:219/51/305/8,C:122/76/175/76,C:30/8/65/76} ;203E SH 560/70 P{10/10,L:10/60,L:550/60,L:550/10} ;00AF eq 203E;23B4 SH 832/210 P{8/10,L:8/202,L:824/202,L:824/10,L:758/10,L:758/136,L:74/136,L:74/10} ;23B5 symH 23B4;;23DC SHE 576/180 P{0/0,C:576/0/288/340,C:0/0/288/215};23DD symH 23DC;;23DE SHE 580/222 P{2/2,C:74/122/26/122,L:211/122,C:290/220/286/122,C:367/122/296/122,L:504/122,C:578/2/546/122,L:575/2,C:486/76/556/76,L:383/76,C:290/170/294/76,C:197/76/291/76,L:103/76,C:5/2/26/76};23DF symH 23DE;;23E0 SH 945/300 P{7/9,L:7/61,L:224/286,L:722/286,L:939/61,L:939/9,L:699/220,L:247/220};23E1 symH 23E0;;;0644 SH 753/1250 P{668/202,C:56/202/46/-150,C:145/500/56/400,C:141/202/101/300,C:621/222/250/0,C:664/302/664/252,L:538/1143,C:581/1278/581/1200,C:651/1190/581/1190,C:593/1099/630/1099,L:682/483,C:668/202/733/280};";
  var f = ".,),(,[,],\\{,\\},|,\\|,\\langle,\\rangle,\\lfloor,\\rfloor,\\lceil,\\rceil,\\lobrk,\\robrk,\\lbbrk,\\rbbrk,\\Lang,\\Rang,\\loang,\\roang,";
  var G = ",),(,[,],{,},|,&Verbar;,&lang;,&rang;,&lfloor;,&rfloor;,&lceil;,&rceil;,&lobrk;,&robrk;,&lbbrk;,&rbbrk;,&Lang;,&Rang;,&loang;,&roang;,";
  var v = "smallmatrix,cases,array,matrix,matrix*,pmatrix,pmatrix*,bmatrix,bmatrix*,Bmatrix,Bmatrix*,vmatrix,vmatrix*,Vmatrix,Vmatrix*";
  var ch = "+,-";
  var eM = "\\mbox,\\textrm,\\textit,\\textbf,\\textbi,\\texttt,\\text,\\emph";
  var a6 = ",arcsinh,arccosh,arctanh,arccsch,arcsech,arccoth,arcsin,arccos,arctan,arccsc,arcsec,arccot,sinh,cosh,tanh,csch,sech,coth,sin,cos,tan,csc,sec,cot,log,ln,lg,min,max,inf,sup,exp,ker,deg,gcd,det,hom,arg,dim,Pr,lim,";
  var ef = "|quad|,|:|;|!| |qquad|thickspace|medspace|thinspace|newline|";
  var dO = "|1em|thin|medium|thick|negativethin|1em|2em|thick|medium|thin|newline|";
  var eg = 1;
  var bG = 2;
  var eJ = 3;
  var dv = 4;
  var H = 5;
  var bY = 6;
  var aM = 7;
  var dL = 8;
  var bN = 9;
  var a3 = 10;
  var dD = 1;
  var c0 = 2;
  var dH = 3;
  var b9 = 4;
  var l = 5;
  var aB = 6;
  var ap = 7;
  var bk = 8;
  var ab = 9;
  var Z = 10;
  var bl = 11;
  var bC = 12;
  var d5 = 13;
  var x = "CHARS";
  var fv = "ENTITIES";
  var dT = "UNICODE";
  var al = "";
  var aC = new cw();
  var b8 = false;
  var bb = false;
  var ca = ",sup,inf,#,$,";
  var e6 = "newline|sfrac|cfrac|prescript";
  var aE = "\\fencedLatex";
  var eo = "\\latexStyle";
  var be = "|mathnormal|mathrm|mathit|mathbfup|mathbf|mathbi|mathsfbi|mathsfb|mathsfi|mathsf|mathtt|mathfrakb|mathfrak|mathcalb|mathcal|mathbbbi|mathbbb|mathbbi|mathbb|mathscrb|mathscr|textcolor|emph|";
  var W = "\\latexFrac";
  var b = "|frac|binom|sfrac|cfrac|";
  var e0 = "\\latexFunction";
  var c1 = "|bar|";
  var aX = "\\latexHardcoded";
  var cS = "\\matrixLatex";
  var cZ = "|array|smallmatrix|matrix|matrix*|pmatrix|pmatrix*|bmatrix|bmatrix*|Bmatrix|Bmatrix*|vmatrix|vmatrix*|Vmatrix|Vmatrix*|cases|";
  var e1 = "\\latexPhantom";
  var dY = "|phantom|hphantom|";
  var C = "\\latexRoot";
  var ev = "|sqrt|";
  var bS = "\\latexSpace";
  var eX = "|nolimits|limits|prescript|";
  var er = "\\latexSubSup";
  var cb = "\\latexTextMode";
  var fl = "|textnormal|textrm|textit|textbf|textbi|textsfbi|textsfb|textsfi|textsf|texttt|textcalb|textcal|textfrakb|textfrak|textbbbi|textbbb|textbbi|textbb|textscrb|textscr|mbox|text|emph|";
  var ar = "(";
  var b5 = ")";
  var P = false;
  var bI = null;
  var dA = false;
  var fs = "";
  var d = "";
  var cn = null;
  var at = 0.2;
  var dU = 0.04;
  var F = -100000;
  
  function eK() {
  }
  
  eK.isWebApp = function () {
    return eE
  };
  eK.setWebApp = function (fw) {
    eE = fw
  };
  eK.getFolderUrlForFonts = function () {
    return d4
  };
  eK.setFolderUrlForFonts = function (fw) {
    d4 = fw
  };
  eK.getFolderUrlForGlyphs = function () {
    return dQ
  };
  eK.setFolderUrlForGlyphs = function (fw) {
    dQ = fw
  };
  function c9(fw) {
    this.acceptMathTag = true;
    this.settings;
    this.idManager;
    this.settings = fw;
    this.idManager = new E()
  }
  
  c9.createBeanStructure = function (fy, fx) {
    var fw = new du();
    fw.setDefaultValues(fx);
    return c9.createBeanStructureStyle(fy, fx, fw)
  };
  c9.createBeanStructureStyle = function (fD, fC, fA) {
    var fy = new c9(fC);
    var fz = fy.createBeans(fD);
    var fw = fz;
    if (fw instanceof fi) {
      fw.copyParentStyle(fA);
      return fw
    }
    var fx = fw;
    var fB = new fi(null);
    fB.setCurrentDefStyle(fx.getCurrentDefStyle());
    fB.addChild(fw);
    fB.copyParentStyle(fA);
    return fB
  };
  c9.prototype.createBeans = function (fw) {
    cP.ignoreWhitespace = false;
    cP.prettyPrinting = false;
    fw = fu.deleteText(fw, "<!--", "-->");
    return this.createFromXML(aH.parse(fw))
  };
  c9.prototype.createFromXML = function (fw) {
    var fy = new c4(this.settings);
    fw = fy.replaceContentWithPresentation(fw);
    var fx = this.loadNode(fw, null);
    return fx
  };
  c9.prototype.loadNode = function (fz, fy) {
    var fx = null;
    var fw = fz.localName();
    if (fw == null) {
      fx = this.loadText(fz, fy)
    } else {
      fw = fw.toLowerCase();
      if (fw == "math" || fw == "mathml") {
        if (this.acceptMathTag) {
          this.acceptMathTag = false
        } else {
          fw = "mrow"
        }
      }
      if (fw == "mrow") {
        fx = this.loadMrow(fz, fy)
      } else {
        if (fw == "math" || fw == "mathml") {
          fx = this.loadMath(fz, fy)
        } else {
          if (fw == "mstyle") {
            fx = this.loadMStyle(fz, fy)
          } else {
            if (fw == "mglyph") {
              fx = this.loadMglyph(fz, fy)
            } else {
              if (fw == "mi") {
                fx = this.loadMi(fz, fy)
              } else {
                if (fw == "mn") {
                  fx = this.loadMn(fz, fy)
                } else {
                  if (fw == "mo") {
                    fx = this.loadMo(fz, fy)
                  } else {
                    if (fw == "mtext") {
                      fx = this.loadMtext(fz, fy)
                    } else {
                      if (fw == "mspace") {
                        fx = this.loadMSpace(fz, fy)
                      } else {
                        if (fw == "ms") {
                          fx = this.loadMs(fz, fy)
                        } else {
                          if (fw == "mfrac") {
                            fx = this.loadMfrac(fz, fy)
                          } else {
                            if (fw == "msqrt") {
                              fx = this.loadMSqrt(fz, fy)
                            } else {
                              if (fw == "mroot") {
                                fx = this.loadMRoot(fz, fy)
                              } else {
                                if (fw == "merror") {
                                  fx = this.loadMError(fz, fy)
                                } else {
                                  if (fw == "mpadded") {
                                    fx = this.loadMPadded(fz, fy)
                                  } else {
                                    if (fw == "mphantom") {
                                      fx = this.loadMPhantom(fz, fy)
                                    } else {
                                      if (fw == "mfenced") {
                                        fx = this.loadMfenced(fz, fy)
                                      } else {
                                        if (fw == "menclose") {
                                          fx = this.loadMenclose(fz, fy)
                                        } else {
                                          if (fw == "msub") {
                                            fx = this.loadMSub(fz, fy)
                                          } else {
                                            if (fw == "msup") {
                                              fx = this.loadMSup(fz, fy)
                                            } else {
                                              if (fw == "msubsup") {
                                                fx = this.loadMSubSup(fz, fy)
                                              } else {
                                                if (fw == "munder") {
                                                  fx = this.loadMUnder(fz, fy)
                                                } else {
                                                  if (fw == "mover") {
                                                    fx = this.loadMOver(fz, fy)
                                                  } else {
                                                    if (fw == "munderover") {
                                                      fx = this.loadMUnderOver(fz, fy)
                                                    } else {
                                                      if (fw == "mmultiscripts") {
                                                        fx = this.loadMMultiscript(fz, fy)
                                                      } else {
                                                        if (fw == "mprescripts") {
                                                          fx = new o(fy)
                                                        } else {
                                                          if (fw == "mtable") {
                                                            fx = this.loadMTable(fz, fy)
                                                          } else {
                                                            if (fw == "mlabeledtr") {
                                                              fx = this.loadMlabeledtr(fz, fy)
                                                            } else {
                                                              if (fw == "mtr") {
                                                                fx = this.loadMTr(fz, fy)
                                                              } else {
                                                                if (fw == "mtd") {
                                                                  fx = this.loadMTd(fz, fy)
                                                                } else {
                                                                  if (fw == "maligngroup") {
                                                                    fx = this.loadMaligngroup(fz, fy)
                                                                  } else {
                                                                    if (fw == "malignmark") {
                                                                      fx = this.loadMalignmark(fz, fy)
                                                                    } else {
                                                                      if (fw == "mstack") {
                                                                        fx = this.loadMStack(fz, fy)
                                                                      } else {
                                                                        if (fw == "mlongdiv") {
                                                                          fx = this.loadMLongdiv(fz, fy)
                                                                        } else {
                                                                          if (fw == "msgroup") {
                                                                            fx = this.loadMSGroup(fz, fy)
                                                                          } else {
                                                                            if (fw == "msrow") {
                                                                              fx = this.loadMSRow(fz, fy)
                                                                            } else {
                                                                              if (fw == "mscarries") {
                                                                                fx = this.loadMSCarries(fz, fy)
                                                                              } else {
                                                                                if (fw == "mscarry") {
                                                                                  fx = this.loadMSCarry(fz, fy)
                                                                                } else {
                                                                                  if (fw == "msline") {
                                                                                    fx = this.loadMSLine(fz, fy)
                                                                                  } else {
                                                                                    if (fw == "none") {
                                                                                      fx = new aI(fy)
                                                                                    } else {
                                                                                      if (fw == "maction") {
                                                                                        fx = this.loadMaction(fz, fy)
                                                                                      } else {
                                                                                        return null
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (fx == null) {
      return null
    }
    this.loadAttributes(fz, fx);
    this.addChildren(fz, fx);
    return fx
  };
  c9.isPresentation = function (fw) {
    if (fw == "math" || fw == "mathml" || fw == "mrow" || fw == "mstyle" || fw == "mglyph" || fw == "mi" || fw == "mn" || fw == "mo" || fw == "mtext" || fw == "mspace" || fw == "ms" || fw == "mfrac" || fw == "msqrt" || fw == "mroot" || fw == "merror" || fw == "mpadded" || fw == "mphantom" || fw == "mfenced" || fw == "menclose" || fw == "msub" || fw == "msup" || fw == "msubsup" || fw == "munder" || fw == "mover" || fw == "munderover" || fw == "mmultiscripts" || fw == "mprescripts" || fw == "mtable" || fw == "mlabeledtr" || fw == "mtr" || fw == "mtd" || fw == "maligngroup" || fw == "malignmark" || fw == "mstack" || fw == "mlongdiv" || fw == "msgroup" || fw == "msrow" || fw == "mscarries" || fw == "mscarry" || fw == "msline" || fw == "none" || fw == "maction") {
      return true
    }
    return false
  };
  c9.prototype.getText = function (fw) {
    var fx = fw.toString();
    fx = fu.trim(fx);
    fx = bB.convertToCharsExcept(fx, ",&nbsp;,");
    if (fx == null || fx.length == 0) {
      return null
    }
    return fx
  };
  c9.prototype.getDefaultSettings = function (fy, fx) {
    var fw = new aS();
    if (fx != null && fx.getCurrentDefStyle() != null) {
      fw = fx.getCurrentDefStyle().getCopy()
    }
    if (fy.attribute("scriptlevel").length > 0) {
      fw.setScriptlevel(fy.attribute("scriptlevel"))
    }
    if (fy.attribute("displaystyle").length > 0) {
      fw.setDisplaystyle(fy.attribute("displaystyle"))
    }
    if (fy.attribute("scriptsizemultiplier").length > 0) {
      fw.setScriptsizemultiplier(ej.getDoubleValue(fy.attribute("scriptsizemultiplier"), 0.7071))
    } else {
      fw.setScriptsizemultiplier(this.settings.getScriptsizemultiplier())
    }
    if (fy.attribute("scriptminsize").length > 0) {
      fw.setScriptminsize(fy.attribute("scriptminsize"))
    } else {
      fw.setScriptminsize(this.settings.getScriptminsize() + "")
    }
    if (fy.attribute("infixlinebreakstyle").length > 0) {
      fw.setInfixlinebreakstyle(fy.attribute("infixlinebreakstyle"))
    }
    if (fy.attribute("decimalpoint").length > 0) {
      fw.setDecimalpoint(bB.convertToChars(fy.attribute("decimalpoint")))
    } else {
      fw.setDecimalpoint(bB.convertToChars(this.settings.getDecimalpoint()))
    }
    if (fy.attribute("accent").length > 0) {
      fw.setAccent(fy.attribute("accent"))
    }
    if (fy.attribute("accentunder").length > 0) {
      fw.setAccentunder(fy.attribute("accentunder"))
    }
    if (fy.attribute("align").length > 0) {
      fw.setAlign(fy.attribute("align"))
    }
    if (fy.attribute("alignmentscope").length > 0) {
      fw.setAlignmentscope(fy.attribute("alignmentscope"))
    }
    if (fy.attribute("bevelled").length > 0) {
      fw.setBevelled(fy.attribute("bevelled"))
    }
    if (fy.attribute("charalign").length > 0) {
      fw.setCharalign(fy.attribute("charalign"))
    }
    if (fy.attribute("charspacing").length > 0) {
      fw.setCharspacing(fy.attribute("charspacing"))
    }
    if (fy.attribute("close").length > 0) {
      fw.setClose(fy.attribute("close"))
    }
    if (fy.attribute("columnalign").length > 0) {
      fw.setColumnalign(fy.attribute("columnalign"))
    }
    if (fy.attribute("columnlines").length > 0) {
      fw.setColumnlines(fy.attribute("columnlines"))
    }
    if (fy.attribute("columnspacing").length > 0) {
      fw.setColumnspacing(fy.attribute("columnspacing"))
    }
    if (fy.attribute("columnspan").length > 0) {
      fw.setColumnspan(fy.attribute("columnspan"))
    }
    if (fy.attribute("columnwidth").length > 0) {
      fw.setColumnwidth(fy.attribute("columnwidth"))
    }
    if (fy.attribute("crossout").length > 0) {
      fw.setCrossout(fy.attribute("crossout"))
    }
    if (fy.attribute("denomalign").length > 0) {
      fw.setDenomalign(fy.attribute("denomalign"))
    }
    if (fy.attribute("depth").length > 0) {
      fw.setDepth(fy.attribute("depth"))
    }
    if (fy.attribute("dir").length > 0) {
      fw.setDir(fy.attribute("dir"))
    } else {
      fw.setDir(this.settings.getDir())
    }
    if (fy.attribute("edge").length > 0) {
      fw.setEdge(fy.attribute("edge"))
    }
    if (fy.attribute("equalcolumns").length > 0) {
      fw.setEqualcolumns(fy.attribute("equalcolumns"))
    }
    if (fy.attribute("equalrows").length > 0) {
      fw.setEqualrows(fy.attribute("equalrows"))
    }
    if (fy.attribute("fence").length > 0) {
      fw.setFence(fy.attribute("fence"))
    }
    if (fy.attribute("form").length > 0) {
      fw.setForm(fy.attribute("form"))
    }
    if (fy.attribute("frame").length > 0) {
      fw.setFrame(fy.attribute("frame"))
    }
    if (fy.attribute("framespacing").length > 0) {
      fw.setFramespacing(fy.attribute("framespacing"))
    }
    if (fy.attribute("groupalign").length > 0) {
      fw.setGroupalign(fy.attribute("groupalign"))
    }
    if (fy.attribute("height").length > 0) {
      fw.setHeight(fy.attribute("height"))
    }
    if (fy.attribute("indentalign").length > 0) {
      fw.setIndentalign(fy.attribute("indentalign"))
    }
    if (fy.attribute("indentalignfirst").length > 0) {
      fw.setIndentalignfirst(fy.attribute("indentalignfirst"))
    }
    if (fy.attribute("indentalignlast").length > 0) {
      fw.setIndentalignlast(fy.attribute("indentalignlast"))
    }
    if (fy.attribute("indentshift").length > 0) {
      fw.setIndentshift(fy.attribute("indentshift"))
    }
    if (fy.attribute("indentshiftfirst").length > 0) {
      fw.setIndentshiftfirst(fy.attribute("indentshiftfirst"))
    }
    if (fy.attribute("indentshiftlast").length > 0) {
      fw.setIndentshiftlast(fy.attribute("indentshiftlast"))
    }
    if (fy.attribute("indenttarget").length > 0) {
      fw.setIndenttarget(fy.attribute("indenttarget"))
    }
    if (fy.attribute("largeop").length > 0) {
      fw.setLargeop(fy.attribute("largeop"))
    }
    if (fy.attribute("leftoverhang").length > 0) {
      fw.setLeftoverhang(fy.attribute("leftoverhang"))
    }
    if (fy.attribute("length").length > 0) {
      fw.setLength(fy.attribute("length"))
    }
    if (fy.attribute("linebreak").length > 0) {
      fw.setLinebreak(fy.attribute("linebreak"))
    }
    if (fy.attribute("linebreakmultchar").length > 0) {
      fw.setLinebreakmultchar(fy.attribute("linebreakmultchar"))
    }
    if (fy.attribute("linebreakstyle").length > 0) {
      fw.setLinebreakstyle(fy.attribute("linebreakstyle"))
    }
    if (fy.attribute("lineleading").length > 0) {
      fw.setLineleading(fy.attribute("lineleading"))
    }
    if (fy.attribute("linethickness").length > 0) {
      fw.setLinethickness(fy.attribute("linethickness"))
    }
    if (fy.attribute("location").length > 0) {
      fw.setLocation(fy.attribute("location"))
    }
    if (fy.attribute("longdivstyle").length > 0) {
      fw.setLongdivstyle(fy.attribute("longdivstyle"))
    }
    if (fy.attribute("lquote").length > 0) {
      fw.setLquote(fy.attribute("lquote"))
    }
    if (fw.getLquote() == null) {
      fw.setLquote(this.settings.getLquote())
    }
    if (fy.attribute("lspace").length > 0) {
      fw.setLspace(fy.attribute("lspace"))
    }
    if (fy.attribute("maxsize").length > 0) {
      fw.setMaxsize(fy.attribute("maxsize"))
    }
    if (fy.attribute("minlabelspacing").length > 0) {
      fw.setMinlabelspacing(fy.attribute("minlabelspacing"))
    }
    if (fy.attribute("minsize").length > 0) {
      fw.setMinsize(fy.attribute("minsize"))
    }
    if (fy.attribute("movablelimits").length > 0) {
      fw.setMovablelimits(fy.attribute("movablelimits"))
    }
    if (fy.attribute("mslinethickness").length > 0) {
      fw.setMslinethickness(fy.attribute("mslinethickness"))
    }
    if (fy.attribute("notation").length > 0) {
      fw.setNotation(fy.attribute("notation"))
    }
    if (fy.attribute("numalign").length > 0) {
      fw.setNumalign(fy.attribute("numalign"))
    }
    if (fy.attribute("open").length > 0) {
      fw.setOpen(fy.attribute("open"))
    }
    if (fy.attribute("position").length > 0) {
      fw.setPosition(fy.attribute("position"))
    }
    if (fy.attribute("rightoverhang").length > 0) {
      fw.setRightoverhang(fy.attribute("rightoverhang"))
    }
    if (fy.attribute("rowalign").length > 0) {
      fw.setRowalign(fy.attribute("rowalign"))
    }
    if (fy.attribute("rowlines").length > 0) {
      fw.setRowlines(fy.attribute("rowlines"))
    }
    if (fy.attribute("rowspacing").length > 0) {
      fw.setRowspacing(fy.attribute("rowspacing"))
    }
    if (fy.attribute("rowspan").length > 0) {
      fw.setRowspan(fy.attribute("rowspan"))
    }
    if (fy.attribute("rquote").length > 0) {
      fw.setRquote(fy.attribute("rquote"))
    }
    if (fw.getRquote() == null) {
      fw.setRquote(this.settings.getRquote())
    }
    if (fy.attribute("rspace").length > 0) {
      fw.setRspace(fy.attribute("rspace"))
    }
    if (fy.attribute("selection").length > 0) {
      fw.setSelection(fy.attribute("selection"))
    }
    if (fy.attribute("separators").length > 0) {
      fw.setSeparators(fy.attribute("separators"))
    }
    if (fy.attribute("shift").length > 0) {
      fw.setShift(fy.attribute("shift"))
    }
    if (fy.attribute("side").length > 0) {
      fw.setSide(fy.attribute("side"))
    }
    if (fy.attribute("stackalign").length > 0) {
      fw.setStackalign(fy.attribute("stackalign"))
    }
    if (fy.attribute("stretchy").length > 0) {
      fw.setStretchy(fy.attribute("stretchy"))
    }
    if (fy.attribute("subscriptshift").length > 0) {
      fw.setSubscriptshift(fy.attribute("subscriptshift"))
    }
    if (fy.attribute("superscriptshift").length > 0) {
      fw.setSuperscriptshift(fy.attribute("superscriptshift"))
    }
    if (fy.attribute("symmetric").length > 0) {
      fw.setSymmetric(fy.attribute("symmetric"))
    }
    if (fy.attribute("valign").length > 0) {
      fw.setValign(fy.attribute("valign"))
    }
    if (fy.attribute("voffset").length > 0) {
      fw.setVoffset(fy.attribute("voffset"))
    }
    if (fy.attribute("width").length > 0) {
      fw.setWidth(fy.attribute("width"))
    }
    if (fy.attribute("enclosethickness").length > 0) {
      fw.setEnclosethickness(fy.attribute("enclosethickness"))
    }
    if (fy.attribute("enclosespace").length > 0) {
      fw.setEnclosespace(fy.attribute("enclosespace"))
    }
    return fw
  };
  c9.prototype.loadAttributes = function (fx, fw) {
    this.loadCommunAttributes(fx, fw);
    this.loadMathML1Attributes(fx, fw);
    c9.loadStyleAttributes(fx.attribute("style"), fw);
    this.loadMathML3Attributes(fx, fw);
    this.loadDeprecatedFMathAttributes(fx, fw)
  };
  c9.prototype.loadDeprecatedFMathAttributes = function (fy, fx) {
    var fz = fx;
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("border").length > 0) {
      fz.getCssstyle().setBorder(fy.attribute("border"))
    }
    if (fy.attribute("bordercolor").length > 0) {
      fz.getCssstyle().setBorderColor(fy.attribute("bordercolor"))
    }
    if (fy.attribute("shiftX").length > 0) {
      fz.getCssstyle().setPaddingLeft(fy.attribute("shiftX"))
    }
    if (fy.attribute("shiftY").length > 0) {
      fz.getCssstyle().setPaddingTop(fy.attribute("shiftY"))
    }
    if (fy.attribute("baseline").length > 0) {
      fz.getStyle().setDrawBaseline(true)
    } else {
      fz.getStyle().setDrawBaseline(fw.isDrawBaseline())
    }
    if (fy.attribute("axisline").length > 0) {
      fz.getStyle().setDrawAxisline(true)
    } else {
      fz.getStyle().setDrawAxisline(fw.isDrawAxisline())
    }
    if (fy.attribute("superscriptline").length > 0) {
      fz.getStyle().setDrawSuperscriptline(true)
    } else {
      fz.getStyle().setDrawSuperscriptline(fw.isDrawSuperscriptline())
    }
    if (fy.attribute("maxwidthline").length > 0) {
      fz.getStyle().setDrawMaxwidthline(true)
    } else {
      fz.getStyle().setDrawMaxwidthline(fw.isDrawMaxwidthline())
    }
  };
  c9.prototype.loadCommunAttributes = function (fx, fw) {
    if (fx.attribute("id").length > 0) {
      fw.setId(fx.attribute("id"));
      fw.setAttribute("id", fx.attribute("id"))
    } else {
      fw.setId(this.idManager.nextId())
    }
    if (fx.attribute("xref").length > 0) {
      fw.setXref(fx.attribute("xref"))
    }
    if (fx.attribute("href").length > 0) {
      fw.setHref(fx.attribute("href"))
    }
    if (fx.attribute("mathcolor").length > 0) {
      fw.setAttribute("mathcolor", fx.attribute("mathcolor"))
    }
    if (fx.attribute("color").length > 0) {
      fw.setAttribute("mathcolor", fx.attribute("color"))
    }
    if (fx.attribute("mathbackground").length > 0) {
      fw.setAttribute("mathbackground", fx.attribute("mathbackground"))
    }
    if (fx.attribute("background").length > 0) {
      fw.setAttribute("mathbackground", fx.attribute("background"))
    }
    if (fx.attribute("editorSelected").length > 0) {
      fw.setAttribute("editorSelected", fx.attribute("editorSelected"))
    }
    if (fx.attribute("toSelect").length > 0) {
      fw.setAttribute("toSelect", fx.attribute("toSelect"))
    }
  };
  c9.prototype.loadMathML1Attributes = function (fx, fw) {
    if (fx.attribute("fontfamily").length > 0) {
      fw.setAttribute("mathvariant", fx.attribute("fontfamily"))
    }
    if (fx.attribute("fontweight").length > 0) {
      fw.setAttribute("fontweight", fx.attribute("fontweight"))
    }
    if (fx.attribute("fontstyle").length > 0) {
      fw.setAttribute("fontstyle", fx.attribute("fontstyle"))
    }
    if (fx.attribute("fontsize").length > 0) {
      fw.setAttribute("mathsize", fx.attribute("fontsize"))
    }
  };
  c9.loadStyleAttributes = function (fH, fz) {
    if (fH == null) {
      return
    }
    var fC = fH.toLowerCase().split(";");
    fz.setAttribute("style", fH);
    for (var fy = 0; fy < fC.length; fy++) {
      var fE = fC[fy];
      if (fE.toLowerCase().indexOf("font-family") > -1) {
        var fB = fC[fy];
        if (fB.indexOf(":") > -1) {
          fB = fB.substring(fB.indexOf(":") + 1, fB.length);
          fB = fu.trim(fB);
          fz.setAttribute("mathvariant", fB)
        }
        break
      }
    }
    var fD = fz;
    for (var fx = 0; fx < fC.length; fx++) {
      var fw = fC[fx];
      if (fw.indexOf(":") > -1) {
        var fA = fw.indexOf(":");
        var fG = fw.substring(0, fA);
        fG = fu.trim(fG);
        var fF = fw.substring(fA + 1, fw.length);
        fF = fu.trim(fF);
        if (fG == "font-size") {
          fz.setAttribute("mathsize", fF)
        } else {
          if (fG == "font-weight") {
            fz.setAttribute("fontweight", fF)
          } else {
            if (fG == "font-style") {
              fz.setAttribute("fontstyle", fF)
            } else {
              if (fG == "color") {
                fz.setAttribute("mathcolor", fF)
              } else {
                if (fG == "background") {
                  fz.setAttribute("mathbackground", fF)
                } else {
                  if (fG == "border") {
                    fD.getCssstyle().setBorder(fF)
                  } else {
                    if (fG == "border-top") {
                      fD.getCssstyle().setBorderTop(fF)
                    } else {
                      if (fG == "border-bottom") {
                        fD.getCssstyle().setBorderBottom(fF)
                      } else {
                        if (fG == "border-left") {
                          fD.getCssstyle().setBorderLeft(fF)
                        } else {
                          if (fG == "border-right") {
                            fD.getCssstyle().setBorderRight(fF)
                          } else {
                            if (fG == "border-top-color") {
                              fD.getCssstyle().setBorderTopColor(fF)
                            } else {
                              if (fG == "border-top-style") {
                                fD.getCssstyle().setBorderTopStyle(fF)
                              } else {
                                if (fG == "border-top-width") {
                                  fD.getCssstyle().setBorderTopWidth(fF)
                                } else {
                                  if (fG == "border-bottom-color") {
                                    fD.getCssstyle().setBorderBottomColor(fF)
                                  } else {
                                    if (fG == "border-bottom-style") {
                                      fD.getCssstyle().setBorderBottomStyle(fF)
                                    } else {
                                      if (fG == "border-bottom-width") {
                                        fD.getCssstyle().setBorderBottomWidth(fF)
                                      } else {
                                        if (fG == "border-left-color") {
                                          fD.getCssstyle().setBorderLeftColor(fF)
                                        } else {
                                          if (fG == "border-left-style") {
                                            fD.getCssstyle().setBorderLeftStyle(fF)
                                          } else {
                                            if (fG == "border-left-width") {
                                              fD.getCssstyle().setBorderLeftWidth(fF)
                                            } else {
                                              if (fG == "border-right-color") {
                                                fD.getCssstyle().setBorderRightColor(fF)
                                              } else {
                                                if (fG == "border-right-style") {
                                                  fD.getCssstyle().setBorderRightStyle(fF)
                                                } else {
                                                  if (fG == "border-right-width") {
                                                    fD.getCssstyle().setBorderRightWidth(fF)
                                                  } else {
                                                    if (fG == "border-color") {
                                                      fD.getCssstyle().setBorderColor(fF)
                                                    } else {
                                                      if (fG == "border-style") {
                                                        fD.getCssstyle().setBorderStyle(fF)
                                                      } else {
                                                        if (fG == "border-width") {
                                                          fD.getCssstyle().setBorderWidth(fF)
                                                        } else {
                                                          if (fG == "margin") {
                                                            fD.getCssstyle().setMargin(fF)
                                                          } else {
                                                            if (fG == "margin-top") {
                                                              fD.getCssstyle().setMarginTop(fF)
                                                            } else {
                                                              if (fG == "margin-bottom") {
                                                                fD.getCssstyle().setMarginBottom(fF)
                                                              } else {
                                                                if (fG == "margin-left") {
                                                                  fD.getCssstyle().setMarginLeft(fF)
                                                                } else {
                                                                  if (fG == "margin-right") {
                                                                    fD.getCssstyle().setMarginRight(fF)
                                                                  } else {
                                                                    if (fG == "padding") {
                                                                      fD.getCssstyle().setPadding(fF)
                                                                    } else {
                                                                      if (fG == "padding-top") {
                                                                        fD.getCssstyle().setPaddingTop(fF)
                                                                      } else {
                                                                        if (fG == "padding-bottom") {
                                                                          fD.getCssstyle().setPaddingBottom(fF)
                                                                        } else {
                                                                          if (fG == "padding-left") {
                                                                            fD.getCssstyle().setPaddingLeft(fF)
                                                                          } else {
                                                                            if (fG == "padding-right") {
                                                                              fD.getCssstyle().setMarginRight(fF)
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  c9.prototype.loadMathML3Attributes = function (fx, fw) {
    if (fx.attribute("mathvariant").length > 0) {
      fw.setAttribute("mathvariant", fx.attribute("mathvariant"))
    }
    if (fx.attribute("mathsize").length > 0) {
      fw.setAttribute("mathsize", fx.attribute("mathsize"))
    }
    if (fx.attribute("dir").length > 0) {
      fw.setAttribute("dir", fx.attribute("dir"))
    }
  };
  c9.prototype.loadMath = function (fy, fx) {
    var fz = new fi(fx);
    fz.setCurrentDefStyle(this.getDefaultSettings(fy, fz));
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("display").length > 0) {
      fw.setDisplaystyle(fy.attribute("display") == "inline" ? "false" : "true")
    }
    if (fy.attribute("mode").length > 0) {
      fw.setDisplaystyle(fy.attribute("mode") == "inline" ? "false" : "true")
    }
    if (fy.attribute("maxwidth").length > 0) {
      fz.setMaxwidth(fy.attribute("maxwidth"))
    }
    if (fy.attribute("overflow").length > 0) {
      fz.setOverflow(fy.attribute("overflow"))
    }
    this.loadMrowAttributes(fy, fz);
    return fz
  };
  c9.prototype.loadMStyle = function (fx, fw) {
    var fy = new au(fw);
    fy.setCurrentDefStyle(this.getDefaultSettings(fx, fw));
    this.loadMrowAttributes(fx, fy);
    return fy
  };
  c9.prototype.addChildren = function (fy, fx) {
    for (var fw = 0; fw < fy.getChildren().length; fw++) {
      var fz = this.loadNode(fy.getChildren()[fw], fx);
      if (fz != null) {
        fx.addChild(fz)
      }
    }
  };
  c9.prototype.loadMglyph = function (fx, fw) {
    var fy = new cr(fw);
    if (fx.attribute("src").length > 0) {
      fy.setSrc(fx.attribute("src"))
    }
    if (fx.attribute("width").length > 0) {
      fy.setWidth(fx.attribute("width"))
    }
    if (fx.attribute("height").length > 0) {
      fy.setHeight(fx.attribute("height"))
    }
    if (fx.attribute("valign").length > 0) {
      fy.setValign(fx.attribute("valign"))
    }
    if (fx.attribute("alt").length > 0) {
      fy.setAlt(fx.attribute("alt"))
    }
    return fy
  };
  c9.prototype.loadMi = function (fx, fw) {
    var fy = new ey(fw);
    return fy
  };
  c9.prototype.loadMn = function (fx, fw) {
    var fy = new cF(fw);
    return fy
  };
  c9.prototype.loadMtext = function (fx, fw) {
    var fy = new A(fw);
    return fy
  };
  c9.prototype.loadMs = function (fy, fx) {
    var fz = new ac(fx);
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("lquote").length > 0) {
      fz.setLquote(fy.attribute("lquote"))
    } else {
      if (fw.getLquote() != null) {
        fz.setLquote(fw.getLquote())
      }
    }
    if (fz.getLquote() != null) {
      fz.setLquote(bB.convertToChars(fz.getLquote()))
    }
    if (fy.attribute("rquote").length > 0) {
      fz.setRquote(fy.attribute("rquote"))
    } else {
      if (fw.getRquote() != null) {
        fz.setRquote(fw.getRquote())
      }
    }
    if (fz.getRquote() != null) {
      fz.setRquote(bB.convertToChars(fz.getRquote()))
    }
    return fz
  };
  c9.prototype.loadMo = function (fy, fx) {
    var fz = new cf(fx);
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("form").length > 0) {
      fz.setForm(fy.attribute("form"))
    } else {
      if (fw.getForm() != null) {
        fz.setForm(fw.getForm())
      }
    }
    if (fy.attribute("fence").length > 0) {
      fz.setFence(fy.attribute("fence"))
    } else {
      if (fw.getFence() != null) {
        fz.setFence(fw.getFence())
      }
    }
    if (fy.attribute("separator").length > 0) {
      fz.setSeparator(fy.attribute("separator"))
    } else {
      if (fw.getSeparator() != null) {
        fz.setSeparator(fw.getSeparator())
      }
    }
    if (fy.attribute("lspace").length > 0) {
      fz.setLspace(fy.attribute("lspace"))
    } else {
      if (fw.getLspace() != null) {
        fz.setLspace(fw.getLspace())
      }
    }
    if (fy.attribute("rspace").length > 0) {
      fz.setRspace(fy.attribute("rspace"))
    } else {
      if (fw.getRspace() != null) {
        fz.setRspace(fw.getRspace())
      }
    }
    if (fy.attribute("accent").length > 0) {
      fz.setAccent(fy.attribute("accent"))
    } else {
      if (fw.getAccent() != null) {
        fz.setAccent(fw.getAccent())
      }
    }
    if (fy.attribute("stretchy").length > 0) {
      fz.setStretchy(fy.attribute("stretchy"))
    } else {
      if (fw.getStretchy() != null) {
        fz.setStretchy(fw.getStretchy())
      }
    }
    if (fy.attribute("symmetric").length > 0) {
      fz.setSymmetric(fy.attribute("symmetric"))
    } else {
      if (fw.getSymmetric() != null) {
        fz.setSymmetric(fw.getSymmetric())
      }
    }
    if (fy.attribute("maxsize").length > 0) {
      fz.setMaxsize(fy.attribute("maxsize"))
    } else {
      if (fw.getMaxsize() != null) {
        fz.setMaxsize(fw.getMaxsize())
      }
    }
    if (fy.attribute("minsize").length > 0) {
      fz.setMinsize(fy.attribute("minsize"))
    } else {
      if (fw.getMinsize() != null) {
        fz.setMinsize(fw.getMinsize())
      }
    }
    if (fy.attribute("largeop").length > 0) {
      fz.setLargeop(fy.attribute("largeop"))
    } else {
      if (fw.getLargeop() != null) {
        fz.setLargeop(fw.getLargeop())
      }
    }
    if (fy.attribute("movablelimits").length > 0) {
      fz.setMovablelimits(fy.attribute("movablelimits"))
    } else {
      if (fw.getMovablelimits() != null) {
        fz.setMovablelimits(fw.getMovablelimits())
      }
    }
    if (fy.attribute("largeOpMultiplier").length > 0) {
      fz.setLargeOpMultiplier(fy.attribute("largeOpMultiplier"))
    } else {
      fz.setLargeOpMultiplier(this.settings.getLargeOpMultiplier())
    }
    if (fy.attribute("linebreakmultchar").length > 0) {
      fz.setLinebreakmultchar(bB.convertToChars(fy.attribute("linebreakmultchar")))
    } else {
      if (fw.getLinebreakmultchar() != null) {
        fz.setLinebreakmultchar(bB.convertToChars(fw.getLinebreakmultchar()))
      }
    }
    this.loadIndent(fy, fz);
    return fz
  };
  c9.prototype.loadIndent = function (fx, fy) {
    var fw = fy.getCurrentDefStyle();
    if (fx.attribute("linebreak").length > 0) {
      fy.setLinebreak(fx.attribute("linebreak"))
    } else {
      if (fw.getLinebreak() != null) {
        fy.setLinebreak(fw.getLinebreak())
      }
    }
    if (fx.attribute("lineleading").length > 0) {
      fy.setLineleading(fx.attribute("lineleading"))
    } else {
      if (fw.getLineleading() != null) {
        fy.setLineleading(fw.getLineleading())
      }
    }
    if (fx.attribute("linebreakstyle").length > 0) {
      if ("infixlinebreakstyle" == fx.attribute("linebreakstyle")) {
        fy.setLinebreakstyle(fw.getInfixlinebreakstyle())
      } else {
        fy.setLinebreakstyle(fx.attribute("linebreakstyle"))
      }
    } else {
      if (fw.getLinebreakstyle() != null) {
        fy.setLinebreakstyle(fw.getLinebreakstyle())
      }
    }
    if (fx.attribute("indentalign").length > 0) {
      fy.setIndentalign(fx.attribute("indentalign"))
    } else {
      if (fw.getIndentalign() != null) {
        fy.setIndentalign(fw.getIndentalign())
      }
    }
    if (fx.attribute("indentshift").length > 0) {
      fy.setIndentshift(fx.attribute("indentshift"))
    } else {
      if (fw.getIndentshift() != null) {
        fy.setIndentshift(fw.getIndentshift())
      }
    }
    if (fx.attribute("indenttarget").length > 0) {
      fy.setIndenttarget(fx.attribute("indenttarget"))
    } else {
      if (fw.getIndenttarget() != null) {
        fy.setIndenttarget(fw.getIndenttarget())
      }
    }
    if (fx.attribute("indentalignfirst").length > 0) {
      fy.setIndentalignfirst(fx.attribute("indentalignfirst"))
    } else {
      if (fw.getIndentalignfirst() != null) {
        fy.setIndentalignfirst(fw.getIndentalignfirst())
      }
    }
    if (fx.attribute("indentshiftfirst").length > 0) {
      fy.setIndentshiftfirst(fx.attribute("indentshiftfirst"))
    } else {
      if (fw.getIndentshiftfirst() != null) {
        fy.setIndentshiftfirst(fw.getIndentshiftfirst())
      }
    }
    if (fx.attribute("indentalignlast").length > 0) {
      fy.setIndentalignlast(fx.attribute("indentalignlast"))
    } else {
      if (fw.getIndentalignlast() != null) {
        fy.setIndentalignlast(fw.getIndentalignlast())
      }
    }
    if (fx.attribute("indentshiftlast").length > 0) {
      fy.setIndentshiftlast(fx.attribute("indentshiftlast"))
    } else {
      if (fw.getIndentshiftlast() != null) {
        fy.setIndentshiftlast(fw.getIndentshiftlast())
      }
    }
  };
  c9.prototype.loadText = function (fx, fw) {
    var fz = this.getText(fx);
    if (fz == null) {
      return null
    }
    if (fw instanceof bH) {
      var fy = new cy(fw);
      fy.setText(fz);
      return fy
    }
    return null
  };
  c9.prototype.loadMSpace = function (fy, fx) {
    var fz = new j(fx);
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("width").length > 0) {
      fz.setWidth(fy.attribute("width"))
    } else {
      if (fw.getWidth() != null) {
        fz.setWidth(fw.getWidth())
      }
    }
    if (fy.attribute("height").length > 0) {
      fz.setHeight(fy.attribute("height"))
    } else {
      if (fw.getHeight() != null) {
        fz.setHeight(fw.getHeight())
      }
    }
    if (fy.attribute("depth").length > 0) {
      fz.setDepth(fy.attribute("depth"))
    } else {
      if (fw.getDepth() != null) {
        fz.setDepth(fw.getDepth())
      }
    }
    if (fy.attribute("linebreak").length > 0) {
      fz.setLinebreak(fy.attribute("linebreak"))
    } else {
      if (fw.getLinebreak() != null) {
        fz.setLinebreak(fw.getLinebreak())
      }
    }
    this.loadIndent(fy, fz);
    return fz
  };
  c9.prototype.loadMrow = function (fx, fw) {
    var fy = new aN(fw);
    this.loadMrowAttributes(fx, fy);
    return fy
  };
  c9.prototype.loadMrowAttributes = function (fx, fy) {
    var fw = fy.getCurrentDefStyle();
    if (fx.attribute("rowalign").length > 0) {
      fy.setRowalign(fx.attribute("rowalign"))
    }
    if (fx.attribute("linestyle").length > 0) {
      fy.setLinestyle(fx.attribute("linestyle"))
    }
    if (fw.getIndentalignfirst() != null) {
      fy.setIndentalignfirst(fw.getIndentalignfirst())
    }
    if (fw.getIndentshiftfirst() != null) {
      fy.setIndentshiftfirst(fw.getIndentshiftfirst())
    }
    if (fw.getIndentalignlast() != null) {
      fy.setIndentalignlast(fw.getIndentalignlast())
    }
    if (fw.getIndentshiftlast() != null) {
      fy.setIndentshiftlast(fw.getIndentshiftlast())
    }
    if (fx.attribute("lineleading").length > 0) {
      fy.setLineleading(fx.attribute("lineleading"))
    } else {
      fy.setLineleading(this.settings.getLineleading())
    }
  };
  c9.prototype.loadMfrac = function (fy, fx) {
    var fz = new ft(fx);
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("linethickness").length > 0) {
      fz.setLinethickness(fy.attribute("linethickness"))
    } else {
      if (fw.getLinethickness() != null) {
        fz.setLinethickness(fw.getLinethickness())
      }
    }
    if (fz.getLinethickness() == null) {
      fz.setLinethickness(this.settings.getLinethickness())
    }
    if (fy.attribute("linecapmargin").length > 0) {
      fz.setLineCapMargin(fy.attribute("linecapmargin"))
    } else {
      fz.setLineCapMargin(this.settings.getFractionLineCapMargin())
    }
    if (fy.attribute("space").length > 0) {
      fz.setSpace(fy.attribute("space"))
    } else {
      fz.setSpace(this.settings.getFractionSpace())
    }
    if (fy.attribute("bevelled").length > 0) {
      fz.setBevelled(ej.getBooleanValue(fy.attribute("bevelled"), false))
    } else {
      if (fw.getBevelled() != null) {
        fz.setBevelled(ej.getBooleanValue(fw.getBevelled(), false))
      }
    }
    if (fy.attribute("numalign").length > 0) {
      fz.setNumalign(fy.attribute("numalign"))
    } else {
      if (fw.getNumalign() != null) {
        fz.setNumalign(fw.getNumalign())
      }
    }
    if (fy.attribute("denomalign").length > 0) {
      fz.setDenomalign(fy.attribute("denomalign"))
    } else {
      if (fw.getDenomalign() != null) {
        fz.setDenomalign(fw.getDenomalign())
      }
    }
    return fz
  };
  c9.prototype.loadMSqrt = function (fx, fw) {
    var fy = new dh(fw);
    this.loadMrowAttributes(fx, fy);
    if (fx.attribute("closed").length > 0) {
      fy.setClosed(ej.getBooleanValue(fx.attribute("closed"), false))
    } else {
      fy.setClosed(this.settings.isSqrtClosed())
    }
    if (fx.attribute("closedlength").length > 0) {
      fy.setClosedLength(fx.attribute("closedlength"))
    } else {
      fy.setClosedLength(this.settings.getSqrtClosedLength())
    }
    return fy
  };
  c9.prototype.loadMRoot = function (fx, fw) {
    var fy = new an(fw);
    if (fx.attribute("closed").length > 0) {
      fy.setClosed(ej.getBooleanValue(fx.attribute("closed"), false))
    } else {
      fy.setClosed(this.settings.isSqrtClosed())
    }
    if (fx.attribute("closedlength").length > 0) {
      fy.setClosedLength(fx.attribute("closedlength"))
    } else {
      fy.setClosedLength(this.settings.getSqrtClosedLength())
    }
    return fy
  };
  c9.prototype.loadMError = function (fx, fw) {
    var fy = new eO(fw);
    fy.setAttribute("mathcolor", this.settings.getErrorColor());
    this.loadMrowAttributes(fx, fy);
    return fy
  };
  c9.prototype.loadMPadded = function (fy, fx) {
    var fz = new e3(fx);
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("width").length > 0) {
      fz.setWidth(fy.attribute("width"))
    } else {
      if (fw.getWidth() != null) {
        fz.setWidth(fw.getWidth())
      }
    }
    if (fy.attribute("lspace").length > 0) {
      fz.setLspace(fy.attribute("lspace"))
    } else {
      if (fw.getLspace() != null) {
        fz.setLspace(fw.getLspace())
      }
    }
    if (fy.attribute("height").length > 0) {
      fz.setHeight(fy.attribute("height"))
    } else {
      if (fw.getHeight() != null) {
        fz.setHeight(fw.getHeight())
      }
    }
    if (fy.attribute("depth").length > 0) {
      fz.setDepth(fy.attribute("depth"))
    } else {
      if (fw.getDepth() != null) {
        fz.setDepth(fw.getDepth())
      }
    }
    if (fy.attribute("voffset").length > 0) {
      fz.setVoffset(fy.attribute("voffset"))
    } else {
      if (fw.getVoffset() != null) {
        fz.setVoffset(fw.getVoffset())
      }
    }
    this.loadMrowAttributes(fy, fz);
    return fz
  };
  c9.prototype.loadMPhantom = function (fx, fw) {
    var fy = new b3(fw);
    this.loadMrowAttributes(fx, fy);
    return fy
  };
  c9.prototype.loadMfenced = function (fy, fx) {
    var fz = new fk(fx);
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("open").length > 0) {
      fz.setOpen(fy.attribute("open"))
    } else {
      if (fw.getOpen() != null) {
        fz.setOpen(fw.getOpen())
      }
    }
    if (fz.getOpen() != null) {
      fz.setOpen(bB.convertToChars(fz.getOpen()))
    }
    if (fy.attribute("close").length > 0) {
      fz.setClose(fy.attribute("close"))
    } else {
      if (fw.getClose() != null) {
        fz.setClose(fw.getClose())
      }
    }
    if (fz.getClose() != null) {
      fz.setClose(bB.convertToChars(fz.getClose()))
    }
    if (fy.attribute("separators").length > 0) {
      fz.setSeparators(fy.attribute("separators"))
    } else {
      if (fw.getSeparators() != null) {
        fz.setSeparators(fw.getSeparators())
      }
    }
    if (fz.getSeparators() != null) {
      fz.setSeparators(bB.convertToChars(fz.getSeparators()))
    }
    this.loadMrowAttributes(fy, fz);
    return fz
  };
  c9.prototype.loadMenclose = function (fy, fx) {
    var fz = new bt(fx);
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("notation").length > 0) {
      fz.setNotation(fy.attribute("notation"))
    } else {
      if (fw.getNotation() != null) {
        fz.setNotation(fw.getNotation())
      }
    }
    if (fz.getNotation() == null) {
      fz.setNotation(this.settings.getNotation())
    }
    if (fy.attribute("linethickness").length > 0) {
      fz.setLinethickness(fy.attribute("linethickness"))
    } else {
      if (fw.getEnclosethickness() != null) {
        fz.setLinethickness(fw.getEnclosethickness())
      }
    }
    if (fz.getLinethickness() == null) {
      fz.setLinethickness(this.settings.getEnclosethickness())
    }
    if (fy.attribute("space").length > 0) {
      fz.setSpace(fy.attribute("space"))
    } else {
      if (fw.getEnclosespace() != null) {
        fz.setSpace(fw.getEnclosespace())
      }
    }
    if (fz.getSpace() == null) {
      fz.setSpace(this.settings.getEnclosespace())
    }
    if (fy.attribute("rounded").length > 0) {
      fz.setRounded(fy.attribute("rounded"))
    } else {
      if (fw.getEnclosespace() != null) {
        fz.setRounded(fw.getEncloserounded())
      }
    }
    if (fz.getRounded() == null) {
      fz.setRounded(this.settings.getEncloserounded())
    }
    this.loadMrowAttributes(fy, fz);
    return fz
  };
  c9.prototype.loadMSub = function (fy, fx) {
    var fz = new ce(fx);
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("subscriptshift").length > 0) {
      fz.setSubscriptshift(fy.attribute("subscriptshift"))
    } else {
      if (fw.getSubscriptshift() != null) {
        fz.setSubscriptshift(fw.getSubscriptshift())
      }
    }
    fz.setSubscriptPostion(this.settings.getSubscriptPostion());
    return fz
  };
  c9.prototype.loadMSup = function (fy, fx) {
    var fz = new cl(fx);
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("superscriptshift").length > 0) {
      fz.setSuperscriptshift(fy.attribute("superscriptshift"))
    } else {
      if (fw.getSuperscriptshift() != null) {
        fz.setSuperscriptshift(fw.getSuperscriptshift())
      }
    }
    fz.setSuperscriptPostion(this.settings.getSuperscriptPostion());
    return fz
  };
  c9.prototype.loadMSubSup = function (fy, fx) {
    var fz = new av(fx);
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("subscriptshift").length > 0) {
      fz.setSubscriptshift(fy.attribute("subscriptshift"))
    } else {
      if (fw.getSubscriptshift() != null) {
        fz.setSubscriptshift(fw.getSubscriptshift())
      }
    }
    if (fy.attribute("superscriptshift").length > 0) {
      fz.setSuperscriptshift(fy.attribute("superscriptshift"))
    } else {
      if (fw.getSuperscriptshift() != null) {
        fz.setSuperscriptshift(fw.getSuperscriptshift())
      }
    }
    fz.setSuperscriptPostion(this.settings.getSuperscriptPostion());
    fz.setSubscriptPostion(this.settings.getSubscriptPostion());
    return fz
  };
  c9.prototype.loadMUnder = function (fy, fx) {
    var fz = new bL(fx);
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("accentunder").length > 0) {
      fz.setAccentunder(fy.attribute("accentunder"))
    } else {
      if (fw.getAccentunder() != null) {
        fz.setAccentunder(fw.getAccentunder())
      }
    }
    if (fy.attribute("align").length > 0) {
      fz.setAlign(fy.attribute("align"))
    } else {
      if (fw.getAlign() != null) {
        fz.setAlign(fw.getAlign())
      }
    }
    if (fy.attribute("underspace").length > 0) {
      fz.setUnderSpace(fy.attribute("underspace"))
    } else {
      fz.setUnderSpace(this.settings.getUnderSpace())
    }
    return fz
  };
  c9.prototype.loadMOver = function (fy, fx) {
    var fz = new g(fx);
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("accent").length > 0) {
      fz.setAccent(fy.attribute("accent"))
    } else {
      if (fw.getAccent() != null) {
        fz.setAccent(fw.getAccent())
      }
    }
    if (fy.attribute("align").length > 0) {
      fz.setAlign(fy.attribute("align"))
    } else {
      if (fw.getAlign() != null) {
        fz.setAlign(fw.getAlign())
      }
    }
    if (fy.attribute("overspace").length > 0) {
      fz.setOverSpace(fy.attribute("overspace"))
    } else {
      fz.setOverSpace(this.settings.getOverSpace())
    }
    return fz
  };
  c9.prototype.loadMUnderOver = function (fy, fx) {
    var fz = new b1(fx);
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("accent").length > 0) {
      fz.setAccent(fy.attribute("accent"))
    } else {
      if (fw.getAccent() != null) {
        fz.setAccent(fw.getAccent())
      }
    }
    if (fy.attribute("accentunder").length > 0) {
      fz.setAccentunder(fy.attribute("accentunder"))
    } else {
      if (fw.getAccentunder() != null) {
        fz.setAccentunder(fw.getAccentunder())
      }
    }
    if (fy.attribute("align").length > 0) {
      fz.setAlign(fy.attribute("align"))
    } else {
      if (fw.getAlign() != null) {
        fz.setAlign(fw.getAlign())
      }
    }
    if (fy.attribute("overspace").length > 0) {
      fz.setOverSpace(fy.attribute("overspace"))
    } else {
      fz.setOverSpace(this.settings.getOverSpace())
    }
    if (fy.attribute("underspace").length > 0) {
      fz.setUnderSpace(fy.attribute("underspace"))
    } else {
      fz.setUnderSpace(this.settings.getUnderSpace())
    }
    return fz
  };
  c9.prototype.loadMMultiscript = function (fy, fx) {
    var fz = new u(fx);
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("subscriptshift").length > 0) {
      fz.setSubscriptshift(fy.attribute("subscriptshift"))
    } else {
      if (fw.getSubscriptshift() != null) {
        fz.setSubscriptshift(fw.getSubscriptshift())
      }
    }
    if (fy.attribute("superscriptshift").length > 0) {
      fz.setSupscriptshift(fy.attribute("superscriptshift"))
    } else {
      if (fw.getSuperscriptshift() != null) {
        fz.setSupscriptshift(fw.getSuperscriptshift())
      }
    }
    fz.setSubscriptPostion(this.settings.getSubscriptPostion());
    fz.setSupscriptPostion(this.settings.getSuperscriptPostion());
    return fz
  };
  c9.prototype.loadMTable = function (fy, fx) {
    var fz = new cW(fx);
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("align").length > 0) {
      fz.setAlign(fy.attribute("align"))
    } else {
      if (fw.getAlign() != null) {
        fz.setAlign(fw.getAlign())
      }
    }
    if (fz.getAlign() == null) {
      fz.setAlign("axis")
    }
    if (fy.attribute("rowalign").length > 0) {
      fz.setRowalign(fy.attribute("rowalign"))
    } else {
      if (fw.getRowalign() != null) {
        fz.setRowalign(fw.getRowalign())
      }
    }
    if (fz.getRowalign() == null) {
      fz.setRowalign("baseline")
    }
    if (fy.attribute("columnalign").length > 0) {
      fz.setColumnalign(fy.attribute("columnalign"))
    } else {
      if (fw.getColumnalign() != null) {
        fz.setColumnalign(fw.getColumnalign())
      }
    }
    if (fy.attribute("groupalign").length > 0) {
      fz.setGroupalign(fy.attribute("groupalign"))
    } else {
      if (fw.getGroupalign() != null) {
        fz.setGroupalign(fw.getGroupalign())
      }
    }
    if (fy.attribute("alignmentscope").length > 0) {
      fz.setAlignmentscope(fy.attribute("alignmentscope"))
    } else {
      if (fw.getAlignmentscope() != null) {
        fz.setAlignmentscope(fw.getAlignmentscope())
      }
    }
    if (fy.attribute("columnwidth").length > 0) {
      fz.setColumnwidth(fy.attribute("columnwidth"))
    } else {
      fz.setColumnwidth("auto")
    }
    if (fy.attribute("width").length > 0) {
      fz.setWidth(fy.attribute("width"))
    }
    if (fy.attribute("height").length > 0) {
      fz.setHeight(fy.attribute("height"))
    }
    if (fy.attribute("rowspacing").length > 0) {
      fz.setRowspacing(fy.attribute("rowspacing"))
    } else {
      if (fw.getRowspacing() != null) {
        fz.setRowspacing(fw.getRowspacing())
      }
    }
    if (fz.getRowspacing() == null) {
      fz.setRowspacing(this.settings.getRowspacing())
    }
    if (fy.attribute("columnspacing").length > 0) {
      fz.setColumnspacing(fy.attribute("columnspacing"))
    } else {
      if (fw.getColumnspacing() != null) {
        fz.setColumnspacing(fw.getColumnspacing())
      }
    }
    if (fz.getColumnspacing() == null) {
      fz.setColumnspacing(this.settings.getColumnspacing())
    }
    if (fy.attribute("rowlines").length > 0) {
      fz.setRowlines(fy.attribute("rowlines"))
    } else {
      if (fw.getRowlines() != null) {
        fz.setRowlines(fw.getRowlines())
      }
    }
    if (fz.getRowlines() == null) {
      fz.setRowlines(this.settings.getRowlines())
    }
    if (fy.attribute("rowlinescolor").length > 0) {
      fz.setRowlinescolor(fy.attribute("rowlinescolor"))
    }
    if (fy.attribute("rowlinethickness").length > 0) {
      fz.setRowlinesthickness(fy.attribute("rowlinethickness"))
    } else {
      fz.setRowlinesthickness(this.settings.getRowlinesthickness())
    }
    if (fy.attribute("columnlines").length > 0) {
      fz.setColumnlines(fy.attribute("columnlines"))
    } else {
      if (fw.getColumnlines() != null) {
        fz.setColumnlines(fw.getColumnlines())
      }
    }
    if (fz.getColumnlines() == null) {
      fz.setColumnlines(this.settings.getColumnlines())
    }
    if (fy.attribute("columnlinescolor").length > 0) {
      fz.setColumnlinescolor(fy.attribute("columnlinescolor"))
    }
    if (fy.attribute("columnlinethickness").length > 0) {
      fz.setColumnlinesthickness(fy.attribute("columnlinethickness"))
    } else {
      fz.setColumnlinesthickness(this.settings.getColumnlinesthickness())
    }
    if (fy.attribute("frame").length > 0) {
      fz.setFrame(fy.attribute("frame"))
    } else {
      if (fw.getFrame() != null) {
        fz.setFrame(fw.getFrame())
      }
    }
    if (fz.getFrame() == null) {
      fz.setFrame(this.settings.getFrame())
    }
    if (fy.attribute("framecolor").length > 0) {
      fz.setFramecolor(fy.attribute("framecolor"))
    }
    if (fy.attribute("framelinethickness").length > 0) {
      fz.setFramethickness(fy.attribute("framelinethickness"))
    } else {
      fz.setFramethickness(this.settings.getFramelinesthickness())
    }
    if (fy.attribute("framespacing").length > 0) {
      fz.setFramespacing(fy.attribute("framespacing"))
    } else {
      if (fw.getFramespacing() != null) {
        fz.setFramespacing(fw.getFramespacing())
      }
    }
    if (fz.getFramespacing() == null) {
      fz.setFramespacing(this.settings.getFramespacing())
    }
    if (fy.attribute("equalrows").length > 0) {
      fz.setEqualrows(fy.attribute("equalrows"))
    } else {
      if (fw.getEqualrows() != null) {
        fz.setEqualrows(fw.getEqualrows())
      }
    }
    if (fz.getEqualrows() == null) {
      fz.setEqualrows("false")
    }
    if (fy.attribute("equalcolumns").length > 0) {
      fz.setEqualcolumns(fy.attribute("equalcolumns"))
    } else {
      if (fw.getEqualcolumns() != null) {
        fz.setEqualcolumns(fw.getEqualcolumns())
      }
    }
    if (fz.getEqualcolumns() == null) {
      fz.setEqualcolumns("false")
    }
    if (fy.attribute("side").length > 0) {
      fz.setSide(fy.attribute("side"))
    } else {
      if (fw.getSide() != null) {
        fz.setSide(fw.getSide())
      }
    }
    if (fz.getSide() == null) {
      fz.setSide(this.settings.getSide())
    }
    if (fy.attribute("minlabelspacing").length > 0) {
      fz.setMinlabelspacing(fy.attribute("minlabelspacing"))
    } else {
      if (fw.getMinlabelspacing() != null) {
        fz.setMinlabelspacing(fw.getMinlabelspacing())
      }
    }
    if (fz.getMinlabelspacing() == null) {
      fz.setMinlabelspacing(this.settings.getMinlabelspacing())
    }
    fz.setLabelspacing(this.settings.getLabelspacing());
    return fz
  };
  c9.prototype.loadMTr = function (fx, fw) {
    var fy = new bR(fw);
    this.loadMTrAttributes(fy, fx, fw);
    return fy
  };
  c9.prototype.loadMlabeledtr = function (fx, fw) {
    var fy = new a1(fw);
    this.loadMTrAttributes(fy, fx, fw);
    return fy
  };
  c9.prototype.loadMTrAttributes = function (fy, fx, fw) {
    if (fx.attribute("rowalign").length > 0) {
      fy.setRowalign(fx.attribute("rowalign"))
    }
    if (fx.attribute("columnalign").length > 0) {
      fy.setColumnalign(fx.attribute("columnalign"))
    }
    if (fx.attribute("columnspacing").length > 0) {
      fy.setColumnspacing(fx.attribute("columnspacing"))
    }
  };
  c9.prototype.loadMTd = function (fy, fx) {
    var fz = new bF(fx);
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("rowalign").length > 0) {
      fz.setRowalign(fy.attribute("rowalign"))
    }
    if (fy.attribute("columnalign").length > 0) {
      fz.setColumnalign(fy.attribute("columnalign"))
    }
    if (fy.attribute("rowspan").length > 0) {
      fz.setRowspan(fy.attribute("rowspan"))
    }
    if (fy.attribute("columnspan").length > 0) {
      fz.setColumnspan(fy.attribute("columnspan"))
    }
    if (fy.attribute("groupalign").length > 0) {
      fz.setGroupalign(fy.attribute("groupalign"))
    } else {
      if (fw.getGroupalign() != null) {
        fz.setGroupalign(fw.getGroupalign())
      }
    }
    this.loadMrowAttributes(fy, fz);
    return fz
  };
  c9.prototype.loadMalignmark = function (fy, fx) {
    var fz = new dN(fx);
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("edge").length > 0) {
      fz.setEdge(fy.attribute("edge"))
    } else {
      if (fw.getEdge() != null) {
        fz.setEdge(fw.getEdge())
      }
    }
    return fz
  };
  c9.prototype.loadMaligngroup = function (fy, fx) {
    var fz = new bm(fx);
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("groupalign").length > 0) {
      fz.setGroupalign(fy.attribute("groupalign"))
    } else {
      if (fw.getGroupalign() != null) {
        fz.setGroupalign(fw.getGroupalign())
      }
    }
    return fz
  };
  c9.prototype.loadMStack = function (fy, fx) {
    var fz = new ea(fx);
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("align").length > 0) {
      fz.setAlign(fy.attribute("align"))
    } else {
      if (fw.getAlign() != null) {
        fz.setAlign(fw.getAlign())
      }
    }
    if (fy.attribute("stackalign").length > 0) {
      fz.setStackalign(fy.attribute("stackalign"))
    } else {
      if (fw.getStackalign() != null) {
        fz.setStackalign(fw.getStackalign())
      }
    }
    if (fy.attribute("charalign").length > 0) {
      fz.setCharalign(fy.attribute("charalign"))
    } else {
      if (fw.getCharalign() != null) {
        fz.setCharalign(fw.getCharalign())
      }
    }
    if (fz.getCharalign() == null) {
      fz.setCharalign(this.settings.getCharalign())
    }
    if (fy.attribute("charspacing").length > 0) {
      fz.setCharspacing(fy.attribute("charspacing"))
    } else {
      if (fw.getCharspacing() != null) {
        fz.setCharspacing(fw.getCharspacing())
      }
    }
    if (fz.getCharspacing() == null) {
      fz.setCharspacing(this.settings.getCharspacing())
    }
    if (fy.attribute("rowspacing").length > 0) {
      fz.setRowspacing(fy.attribute("rowspacing"))
    }
    if (fz.getRowspacing() == null) {
      fz.setRowspacing(this.settings.getMrowspacing())
    }
    return fz
  };
  c9.prototype.loadMLongdiv = function (fy, fx) {
    var fz = new d6(fx);
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("align").length > 0) {
      fz.setAlign(fy.attribute("align"))
    } else {
      if (fw.getAlign() != null) {
        fz.setAlign(fw.getAlign())
      }
    }
    if (fy.attribute("stackalign").length > 0) {
      fz.setStackalign(fy.attribute("stackalign"))
    } else {
      if (fw.getStackalign() != null) {
        fz.setStackalign(fw.getStackalign())
      }
    }
    if (fy.attribute("charalign").length > 0) {
      fz.setCharalign(fy.attribute("charalign"))
    } else {
      if (fw.getCharalign() != null) {
        fz.setCharalign(fw.getCharalign())
      }
    }
    if (fz.getCharalign() == null) {
      fz.setCharalign(this.settings.getCharalign())
    }
    if (fy.attribute("charspacing").length > 0) {
      fz.setCharspacing(fy.attribute("charspacing"))
    } else {
      if (fw.getCharspacing() != null) {
        fz.setCharspacing(fw.getCharspacing())
      }
    }
    if (fz.getCharspacing() == null) {
      fz.setCharspacing(this.settings.getCharspacing())
    }
    if (fy.attribute("rowspacing").length > 0) {
      fz.setRowspacing(fy.attribute("rowspacing"))
    }
    if (fz.getRowspacing() == null) {
      fz.setRowspacing(this.settings.getMrowspacing())
    }
    if (fy.attribute("longdivstyle").length > 0) {
      fz.setLongdivstyle(fy.attribute("longdivstyle"))
    } else {
      if (fw.getLongdivstyle() != null) {
        fz.setLongdivstyle(fw.getLongdivstyle())
      }
    }
    return fz
  };
  c9.prototype.loadMSGroup = function (fx, fw) {
    var fy = new c2(fw);
    if (fx.attribute("position").length > 0) {
      fy.setPosition(cT.getLength(fx.attribute("position"), 0))
    }
    if (fx.attribute("shift").length > 0) {
      fy.setShift(cT.getLength(fx.attribute("shift"), 0))
    }
    return fy
  };
  c9.prototype.loadMSRow = function (fx, fw) {
    var fy = new ct(fw);
    if (fx.attribute("position").length > 0) {
      fy.setPosition(cT.getLength(fx.attribute("position"), 0))
    }
    return fy
  };
  c9.prototype.loadMSCarries = function (fy, fx) {
    var fz = new eY(fx);
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("position").length > 0) {
      fz.setPosition(cT.getLength(fy.attribute("position"), 0))
    }
    if (fy.attribute("location").length > 0) {
      fz.setLocation(fy.attribute("location"))
    } else {
      if (fw.getLocation() != null) {
        fz.setLocation(fw.getLocation())
      }
    }
    if (fz.getLocation() == null) {
      fz.setLocation(this.settings.getLocation())
    }
    if (fy.attribute("crossout").length > 0) {
      fz.setCrossout(fy.attribute("crossout"))
    } else {
      if (fw.getCrossout() != null) {
        fz.setCrossout(fw.getCrossout())
      }
    }
    if (fz.getCrossout() == null) {
      fz.setCrossout(this.settings.getCrossout())
    }
    if (fy.attribute("carrythickness").length > 0) {
      fz.setCarrythickness(fy.attribute("carrythickness"))
    } else {
      if (fw.getCarrythickness() != null) {
        fz.setCarrythickness(fw.getCarrythickness())
      }
    }
    if (fz.getCarrythickness() == null) {
      fz.setCarrythickness(this.settings.getCarrythickness())
    }
    if (fy.attribute("scriptsizemultiplier").length > 0) {
      fz.setScriptsizemultiplier(fy.attribute("scriptsizemultiplier"))
    }
    if (fz.getScriptsizemultiplier() == null) {
      fz.setScriptsizemultiplier(this.settings.getMscriptsizemultiplier() + "")
    }
    return fz
  };
  c9.prototype.loadMSCarry = function (fx, fw) {
    var fy = new cO(fw);
    if (fx.attribute("location").length > 0) {
      fy.setLocation(fx.attribute("location"))
    }
    if (fx.attribute("crossout").length > 0) {
      fy.setCrossout(fx.attribute("crossout"))
    }
    if (fx.attribute("carrythickness").length > 0) {
      fy.setCarrythickness(fx.attribute("carrythickness"))
    }
    this.loadMrowAttributes(fx, fy);
    return fy
  };
  c9.prototype.loadMSLine = function (fy, fx) {
    var fz = new ay(fx);
    var fw = fz.getCurrentDefStyle();
    if (fy.attribute("position").length > 0) {
      fz.setPosition(fy.attribute("position"))
    }
    if (fy.attribute("length").length > 0) {
      fz.setLength(cT.getLength(fy.attribute("length"), 0))
    }
    if (fy.attribute("leftoverhang").length > 0) {
      fz.setLeftoverhang(fy.attribute("leftoverhang"))
    } else {
      if (fw.getLeftoverhang() != null) {
        fz.setLeftoverhang(fw.getLeftoverhang())
      }
    }
    if (fy.attribute("rightoverhang").length > 0) {
      fz.setRightoverhang(fy.attribute("rightoverhang"))
    } else {
      if (fw.getRightoverhang() != null) {
        fz.setRightoverhang(fw.getRightoverhang())
      }
    }
    if (fy.attribute("mslinethickness").length > 0) {
      fz.setMslinethickness(fy.attribute("mslinethickness"))
    } else {
      if (fw.getMslinethickness() != null) {
        fz.setMslinethickness(fw.getMslinethickness())
      }
    }
    if (fz.getMslinethickness() == null) {
      fz.setMslinethickness(this.settings.getMslinethickness())
    }
    return fz
  };
  c9.prototype.loadMaction = function (fx, fw) {
    var fy = new aF(fw);
    if (fx.attribute("actiontype").length > 0) {
      fy.setActiontype(fx.attribute("actiontype"))
    }
    if (fx.attribute("selection").length > 0) {
      fy.setSelection(fx.attribute("selection"))
    }
    return fy
  };
  c9.getOBean = function (fy, fz) {
    var fx = new cf(fy);
    c9.addStyleToBean(fx, fy);
    var fw = new cy(fy);
    fw.setText(fz);
    c9.addStyleToBean(fw, fy);
    fx.addChild(fw);
    fx.copyParentStyle(fy.getStyle());
    return fx
  };
  c9.getTBean = function (fy, fz) {
    var fw = new A(fy);
    c9.addStyleToBean(fw, fy);
    var fx = new cy(fy);
    fx.setText(fz);
    c9.addStyleToBean(fx, fy);
    fw.addChild(fx);
    fw.copyParentStyle(fy.getStyle());
    return fw
  };
  c9.getTextBean = function (fy, fz) {
    if (fz == null) {
      return null
    }
    var fw = fu.trim(fz);
    if (fw.length == 0) {
      return null
    }
    var fx = new cy(fy);
    fx.setText(fz);
    c9.addStyleToBean(fx, fy);
    fx.copyParentStyle(fy.getStyle());
    return fx
  };
  c9.addStyleToBean = function (fw, fx) {
    fw.getStyle().setDir(fx.getStyle().getDir());
    fw.getStyle().setDisplaystyle(fx.getStyle().isDisplaystyle());
    fw.getStyle().setScriptlevel(fx.getStyle().getScriptlevel());
    fw.setCurrentDefStyle(fx.getCurrentDefStyle())
  };
  function bd(fw, fx) {
    this.type;
    this.prettyFormat;
    this.type = fw;
    this.prettyFormat = fx;
    if (this.type == null) {
      this.type = fv
    }
  }
  
  bd.getMathml = function (fw, fx, fz) {
    var fy = new cw();
    var fA = new bd(fx, fz);
    var fB = fA.processBeans(fw, 0, fy);
    if (fx == fv) {
      fB = bB.convToEntities(fB)
    } else {
      if (fx == dT) {
        fB = bB.convToUnicode(fB)
      }
    }
    return fB
  };
  bd.prototype.processBeans = function (fw, fy, fx) {
    if (fw.isDynamicCreated() || fw.getAttribute("ignoreNode") != null) {
      return ""
    }
    if (fw instanceof fi) {
      return this.getMathBean(fw, fy, fx)
    } else {
      if (fw instanceof cr) {
        return this.getMGlyphBean(fw, fy, fx)
      } else {
        if (fw instanceof ey) {
          return this.getMiBean(fw, fy, fx)
        } else {
          if (fw instanceof cF) {
            return this.getMnBean(fw, fy, fx)
          } else {
            if (fw instanceof cf) {
              return this.getMoBean(fw, fy, fx)
            } else {
              if (fw instanceof A) {
                return this.getMTBean(fw, fy, fx)
              } else {
                if (fw instanceof cy) {
                  return this.getMTextBean(fw, fy, fx)
                } else {
                  if (fw instanceof j) {
                    return this.getMSpaceBean(fw, fy, fx)
                  } else {
                    if (fw instanceof ac) {
                      return this.getMsBean(fw, fy, fx)
                    } else {
                      if (fw instanceof ft) {
                        return this.getMFracBean(fw, fy, fx)
                      } else {
                        if (fw instanceof dh) {
                          return this.getMsqrtBean(fw, fy, fx)
                        } else {
                          if (fw instanceof an) {
                            return this.getMrootBean(fw, fy, fx)
                          } else {
                            if (fw instanceof eO) {
                              return this.getMerrorBean(fw, fy, fx)
                            } else {
                              if (fw instanceof e3) {
                                return this.getMpaddedBean(fw, fy, fx)
                              } else {
                                if (fw instanceof b3) {
                                  return this.getMphantomBean(fw, fy, fx)
                                } else {
                                  if (fw instanceof fk) {
                                    return this.getMfencedBean(fw, fy, fx)
                                  } else {
                                    if (fw instanceof bt) {
                                      return this.getMencloseBean(fw, fy, fx)
                                    } else {
                                      if (fw instanceof ce) {
                                        return this.getMsubBean(fw, fy, fx)
                                      } else {
                                        if (fw instanceof cl) {
                                          return this.getMsupBean(fw, fy, fx)
                                        } else {
                                          if (fw instanceof av) {
                                            return this.getMsubsupBean(fw, fy, fx)
                                          } else {
                                            if (fw instanceof bL) {
                                              return this.getMunderBean(fw, fy, fx)
                                            } else {
                                              if (fw instanceof g) {
                                                return this.getMoverBean(fw, fy, fx)
                                              } else {
                                                if (fw instanceof b1) {
                                                  return this.getMunderoverBean(fw, fy, fx)
                                                } else {
                                                  if (fw instanceof u) {
                                                    return this.getMmultiscriptBean(fw, fy, fx)
                                                  } else {
                                                    if (fw instanceof o) {
                                                      return this.getMprescriptBean(fw, fy, fx)
                                                    } else {
                                                      if (fw instanceof cW) {
                                                        return this.getMtableBean(fw, fy, fx)
                                                      } else {
                                                        if (fw instanceof a1) {
                                                          return this.getMtrlabelBean(fw, fy, fx)
                                                        } else {
                                                          if (fw instanceof bR) {
                                                            return this.getMtrBean(fw, fy, fx)
                                                          } else {
                                                            if (fw instanceof bF) {
                                                              return this.getMtdBean(fw, fy, fx)
                                                            } else {
                                                              if (fw instanceof bm) {
                                                                return this.getMaligngroupBean(fw, fy, fx)
                                                              } else {
                                                                if (fw instanceof dN) {
                                                                  return this.getMalignmarkBean(fw, fy, fx)
                                                                } else {
                                                                  if (fw instanceof ea) {
                                                                    return this.getMstackBean(fw, fy, fx)
                                                                  } else {
                                                                    if (fw instanceof d6) {
                                                                      return this.getMlongdivBean(fw, fy, fx)
                                                                    } else {
                                                                      if (fw instanceof c2) {
                                                                        return this.getMsgroupBean(fw, fy, fx)
                                                                      } else {
                                                                        if (fw instanceof ct) {
                                                                          return this.getMsrowBean(fw, fy, fx)
                                                                        } else {
                                                                          if (fw instanceof eY) {
                                                                            return this.getMscarriesBean(fw, fy, fx)
                                                                          } else {
                                                                            if (fw instanceof cO) {
                                                                              return this.getMscarryBean(fw, fy, fx)
                                                                            } else {
                                                                              if (fw instanceof ay) {
                                                                                return this.getMslineBean(fw, fy, fx)
                                                                              } else {
                                                                                if (fw instanceof aI) {
                                                                                  return this.getMnoneBean(fw, fy, fx)
                                                                                } else {
                                                                                  if (fw instanceof aF) {
                                                                                    return this.getMactionBean(fw, fy, fx)
                                                                                  } else {
                                                                                    if (fw instanceof au) {
                                                                                      return this.getMStyleBean(fw, fy, fx)
                                                                                    } else {
                                                                                      if (fw instanceof aN) {
                                                                                        return this.getRowBean(fw, fy, fx)
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return ""
  };
  bd.prototype.getMactionBean = function (fw, fB, fy) {
    var fA = fw;
    var fz = new cE("");
    var fx = this.loadCommunAttributes(fA, fy);
    fx = this.addAttribute1(fx, "actiontype", fA.getActiontype());
    fx = this.addAttribute1(fx, "selection", fA.getSelection());
    fz.append(fu.addTabs(fB, this.prettyFormat) + "<maction" + this.getPrittyAtt(fx));
    fz.append(this.getChildren(fw, fB, fy));
    fz.append(fu.addTabs(fB, this.prettyFormat) + "</maction" + fu.addNewLine(">", this.prettyFormat));
    return fz.toString()
  };
  bd.prototype.getMnoneBean = function (fw, fz, fx) {
    var fy = new cE("");
    fy.append(fu.addTabs(fz, this.prettyFormat) + "<none/" + fu.addNewLine(">", this.prettyFormat));
    return fy.toString()
  };
  bd.prototype.getMslineBean = function (fw, fB, fz) {
    var fy = fw;
    var fA = new cE("");
    var fx = this.loadCommunAttributes(fy, fz);
    fx = this.addAttribute3(fx, "position", fy.getPosition(), "0");
    fx = this.addAttribute3(fx, "length", fy.getLength() + "", "0");
    fx = this.addAttribute3(fx, "leftoverhang", fy.getLeftoverhang(), fy.getCurrentDefStyle().getLeftoverhang());
    fx = this.addAttribute3(fx, "rightoverhang", fy.getRightoverhang(), fy.getCurrentDefStyle().getRightoverhang());
    fx = this.addAttribute2(fx, "mslinethickness", fy.getMslinethickness(), fy.getCurrentDefStyle().getMslinethickness(), fz.getMslinethickness());
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<msline" + this.getAtt(fx) + "></msline" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMscarryBean = function (fx, fB, fz) {
    var fw = fx;
    var fA = new cE("");
    var fy = this.loadMrowAttributes(fw, fz);
    fy = this.addAttribute1(fy, "location", fw.getLocation() + "");
    fy = this.addAttribute1(fy, "crossout", fw.getCrossout() + "");
    fy = this.addAttribute1(fy, "carrythickness", fw.getCarrythickness() + "");
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<mscarry" + this.getPrittyAtt(fy));
    fA.append(this.getRowChildren(fx, fB, fz));
    fA.append(fu.addTabs(fB, this.prettyFormat) + "</mscarry" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMscarriesBean = function (fx, fB, fz) {
    var fw = fx;
    var fA = new cE("");
    var fy = this.loadCommunAttributes(fw, fz);
    fy = this.addAttribute4(fy, "position", fw.getPosition(), 0);
    fy = this.addAttribute2(fy, "location", fw.getLocation(), fw.getCurrentDefStyle().getLocation(), fz.getLocation());
    fy = this.addAttribute2(fy, "crossout", fw.getCrossout(), fw.getCurrentDefStyle().getCrossout(), fz.getCrossout());
    fy = this.addAttribute2(fy, "carrythickness", fw.getCarrythickness() + "", fw.getCurrentDefStyle().getCarrythickness(), fz.getCarrythickness());
    fy = this.addAttribute1(fy, "scriptsizemultiplier", fw.getScriptsizemultiplier());
    fy = this.addAttribute3(fy, "scriptsizemultiplier", fw.getScriptsizemultiplier(), fz.getMscriptsizemultiplier() + "");
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<mscarries" + this.getPrittyAtt(fy));
    fA.append(this.getChildren(fx, fB, fz));
    fA.append(fu.addTabs(fB, this.prettyFormat) + "</mscarries" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMsrowBean = function (fw, fB, fy) {
    var fA = fw;
    var fz = new cE("");
    var fx = this.loadCommunAttributes(fA, fy);
    fx = this.addAttribute4(fx, "position", fA.getPosition(), 0);
    fz.append(fu.addTabs(fB, this.prettyFormat) + "<msrow" + this.getPrittyAtt(fx));
    fz.append(this.getChildren(fw, fB, fy));
    fz.append(fu.addTabs(fB, this.prettyFormat) + "</msrow" + fu.addNewLine(">", this.prettyFormat));
    return fz.toString()
  };
  bd.prototype.mergeChildren = function (fw) {
  };
  bd.prototype.getMsgroupBean = function (fw, fB, fz) {
    var fy = fw;
    var fA = new cE("");
    var fx = this.loadCommunAttributes(fy, fz);
    fx = this.addAttribute4(fx, "position", fy.getPosition(), 0);
    fx = this.addAttribute4(fx, "shift", fy.getShift(), 0);
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<msgroup" + this.getPrittyAtt(fx));
    fA.append(this.getChildren(fw, fB, fz));
    fA.append(fu.addTabs(fB, this.prettyFormat) + "</msgroup" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMlongdivBean = function (fw, fB, fz) {
    var fy = fw;
    var fA = new cE("");
    var fx = this.loadCommunAttributes(fy, fz);
    fx = this.addAttribute3(fx, "align", fy.getAlign(), fy.getCurrentDefStyle().getAlign());
    fx = this.addAttribute3(fx, "stackalign", fy.getStackalign(), fy.getCurrentDefStyle().getStackalign());
    fx = this.addAttribute2(fx, "charalign", fy.getCharalign(), fy.getCurrentDefStyle().getCharalign(), fz.getCharalign());
    fx = this.addAttribute2(fx, "charspacing", fy.getCharspacing(), fy.getCurrentDefStyle().getCharspacing(), fz.getCharspacing());
    fx = this.addAttribute3(fx, "rowspacing", fy.getRowspacing(), fz.getMrowspacing());
    fx = this.addAttribute3(fx, "longdivstyle", fy.getLongdivstyle(), fy.getCurrentDefStyle().getLongdivstyle());
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<mlongdiv" + this.getPrittyAtt(fx));
    fA.append(this.getChildren(fw, fB, fz));
    fA.append(fu.addTabs(fB, this.prettyFormat) + "</mlongdiv" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMstackBean = function (fx, fB, fz) {
    var fw = fx;
    var fA = new cE("");
    var fy = this.loadCommunAttributes(fw, fz);
    fy = this.addAttribute3(fy, "align", fw.getAlign(), fw.getCurrentDefStyle().getAlign());
    fy = this.addAttribute3(fy, "stackalign", fw.getStackalign(), fw.getCurrentDefStyle().getStackalign());
    fy = this.addAttribute2(fy, "charalign", fw.getCharalign(), fw.getCurrentDefStyle().getCharalign(), fz.getCharalign());
    fy = this.addAttribute2(fy, "charspacing", fw.getCharspacing(), fw.getCurrentDefStyle().getCharspacing(), fz.getCharspacing());
    fy = this.addAttribute3(fy, "rowspacing", fw.getRowspacing(), fz.getMrowspacing());
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<mstack" + this.getPrittyAtt(fy));
    fA.append(this.getChildren(fx, fB, fz));
    fA.append(fu.addTabs(fB, this.prettyFormat) + "</mstack" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMalignmarkBean = function (fw, fB, fy) {
    var fz = fw;
    var fA = new cE("");
    var fx = this.loadCommunAttributes(fz, fy);
    fx = this.addAttribute3(fx, "edge", fz.getEdge(), fz.getCurrentDefStyle().getEdge());
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<malignmark" + this.getAtt(fx) + fu.addNewLine("/>", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMaligngroupBean = function (fw, fB, fz) {
    var fy = fw;
    var fA = new cE("");
    var fx = this.loadCommunAttributes(fy, fz);
    fx = this.addAttribute3(fx, "groupalign", fy.getGroupalign(), fy.getCurrentDefStyle().getGroupalign());
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<maligngroup" + this.getAtt(fx) + fu.addNewLine("/>", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMtdBean = function (fx, fB, fz) {
    var fw = fx;
    var fA = new cE("");
    var fy = this.loadMrowAttributes(fw, fz);
    fy = this.addAttribute1(fy, "columnalign", fw.getColumnalign());
    fy = this.addAttribute1(fy, "rowspan", fw.getRowspan());
    fy = this.addAttribute1(fy, "columnspan", fw.getColumnspan());
    fy = this.addAttribute3(fy, "groupalign", fw.getGroupalign(), fw.getCurrentDefStyle().getGroupalign());
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<mtd" + this.getPrittyAtt(fy));
    fA.append(this.getRowChildren(fx, fB, fz));
    fA.append(fu.addTabs(fB, this.prettyFormat) + "</mtd" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMtrBean = function (fw, fB, fy) {
    var fz = fw;
    var fA = new cE("");
    var fx = this.loadMTrAttributes(fz, fy);
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<mtr" + this.getPrittyAtt(fx));
    fA.append(this.getChildren(fw, fB, fy));
    fA.append(fu.addTabs(fB, this.prettyFormat) + "</mtr" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMtrlabelBean = function (fw, fB, fz) {
    var fy = fw;
    var fA = new cE("");
    var fx = this.loadMTrAttributes(fy, fz);
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<mlabeledtr" + this.getPrittyAtt(fx));
    fA.append(this.processBeans(fy.getLabel(), fB + 1, fz));
    fA.append(this.getChildren(fw, fB, fz));
    fA.append(fu.addTabs(fB, this.prettyFormat) + "</mlabeledtr" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.loadMTrAttributes = function (fy, fx) {
    var fw = this.loadCommunAttributes(fy, fx);
    fw = this.addAttribute1(fw, "rowalign", fy.getRowalign());
    fw = this.addAttribute1(fw, "columnalign", fy.getColumnalign());
    fw = this.addAttribute1(fw, "columnspacing", fy.getColumnspacing());
    return fw
  };
  bd.prototype.getMtableBean = function (fx, fB, fz) {
    var fw = fx;
    var fA = new cE("");
    var fy = this.loadCommunAttributes(fw, fz);
    fy = this.addAttribute2(fy, "align", fw.getAlign(), fw.getCurrentDefStyle().getAlign(), "axis");
    fy = this.addAttribute2(fy, "rowalign", fw.getRowalign(), fw.getCurrentDefStyle().getRowalign(), "baseline");
    fy = this.addAttribute3(fy, "columnalign", fw.getColumnalign(), fw.getCurrentDefStyle().getColumnalign());
    fy = this.addAttribute3(fy, "groupalign", fw.getGroupalign(), fw.getCurrentDefStyle().getGroupalign());
    fy = this.addAttribute3(fy, "alignmentscope", fw.getAlignmentscope(), fw.getCurrentDefStyle().getAlignmentscope());
    fy = this.addAttribute3(fy, "columnwidth", fw.getColumnwidth(), "auto");
    fy = this.addAttribute1(fy, "width", fw.getWidth());
    fy = this.addAttribute1(fy, "height", fw.getHeight());
    fy = this.addAttribute2(fy, "rowspacing", fw.getRowspacing(), fw.getCurrentDefStyle().getRowspacing(), fz.getRowspacing());
    fy = this.addAttribute2(fy, "columnspacing", fw.getColumnspacing(), fw.getCurrentDefStyle().getColumnspacing(), fz.getColumnspacing());
    fy = this.addAttribute2(fy, "rowlines", fw.getRowlines(), fw.getCurrentDefStyle().getRowlines(), fz.getRowlines());
    fy = this.addAttribute3(fy, "rowlinescolor", fw.getRowlinescolor(), fw.getStyle().getColor());
    fy = this.addAttribute3(fy, "rowlineswidth", fw.getRowlinesthickness(), fz.getRowlinesthickness());
    fy = this.addAttribute2(fy, "columnlines", fw.getColumnlines(), fw.getCurrentDefStyle().getColumnlines(), fz.getColumnlines());
    fy = this.addAttribute3(fy, "columnlinescolor", fw.getColumnlinescolor(), fw.getStyle().getColor());
    fy = this.addAttribute3(fy, "columnlineswidth", fw.getColumnlinesthickness(), fz.getColumnlinesthickness());
    fy = this.addAttribute2(fy, "frame", fw.getFrame(), fw.getCurrentDefStyle().getFrame(), fz.getFrame());
    fy = this.addAttribute3(fy, "framecolor", fw.getFramecolor(), fw.getStyle().getColor());
    fy = this.addAttribute3(fy, "framewidth", fw.getFramethickness(), fz.getFramelinesthickness());
    fy = this.addAttribute2(fy, "framespacing", fw.getFramespacing(), fw.getCurrentDefStyle().getFramespacing(), fz.getFramespacing());
    fy = this.addAttribute2(fy, "equalrows", fw.getEqualrows(), fw.getCurrentDefStyle().getEqualrows(), "false");
    fy = this.addAttribute2(fy, "equalcolumns", fw.getEqualcolumns(), fw.getCurrentDefStyle().getEqualcolumns(), "false");
    fy = this.addAttribute2(fy, "side", fw.getSide(), fw.getCurrentDefStyle().getSide(), fz.getSide());
    fy = this.addAttribute2(fy, "minlabelspacing", fw.getMinlabelspacing(), fw.getCurrentDefStyle().getMinlabelspacing(), fz.getMinlabelspacing());
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<mtable" + this.getPrittyAtt(fy));
    fA.append(this.getChildren(fx, fB, fz));
    fA.append(fu.addTabs(fB, this.prettyFormat) + "</mtable" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMprescriptBean = function (fw, fz, fx) {
    var fy = new cE("");
    fy.append(fu.addTabs(fz, this.prettyFormat) + "<mprescripts/" + fu.addNewLine(">", this.prettyFormat));
    return fy.toString()
  };
  bd.prototype.getMmultiscriptBean = function (fw, fB, fy) {
    var fz = fw;
    var fA = new cE("");
    var fx = this.loadCommunAttributes(fz, fy);
    fx = this.addAttribute3(fx, "superscriptshift", fz.getSupscriptshift(), fz.getCurrentDefStyle().getSuperscriptshift());
    fx = this.addAttribute3(fx, "subscriptshift", fz.getSubscriptshift(), fz.getCurrentDefStyle().getSubscriptshift());
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<mmultiscripts" + this.getPrittyAtt(fx));
    fA.append(this.getChildren(fw, fB, fy));
    fA.append(fu.addTabs(fB, this.prettyFormat) + "</mmultiscripts" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMunderoverBean = function (fD, fx, fy) {
    var fw = fD;
    var fA = new cE("");
    var fz = this.loadCommunAttributes(fw, fy);
    var fB = fw.getCurrentDefStyle().getAccentunder();
    if (fB != null) {
      var fE = fw.isAccentunder() + "";
      if (!fB == fE) {
        fz = fz + 'accentunder="' + fE + '" '
      }
    } else {
      if (fw.isAccentunder()) {
        if (!fw.getSub().isAccent()) {
          fz = fz + 'accentunder="' + fw.isAccentunder() + '" '
        }
      }
    }
    var fF = fw.getCurrentDefStyle().getAccent();
    if (fF != null) {
      var fC = fw.isAccent() + "";
      if (!fF == fC) {
        fz = fz + 'accent="' + fC + '" '
      }
    } else {
      if (fw.isAccent()) {
        if (!fw.getExp().isAccent()) {
          fz = fz + 'accent="' + fw.isAccent() + '" '
        }
      }
    }
    fz = this.addAttribute3(fz, "align", fw.getAlign(), fw.getCurrentDefStyle().getAlign());
    fz = this.addAttribute3(fz, "underspace", fw.getUnderSpace(), fy.getUnderSpace());
    fz = this.addAttribute3(fz, "overspace", fw.getOverSpace(), fy.getOverSpace());
    fA.append(fu.addTabs(fx, this.prettyFormat) + "<munderover" + this.getPrittyAtt(fz));
    fA.append(this.processBeans(fw.getBase(), fx + 1, fy));
    fA.append(this.processBeans(fw.getSub(), fx + 1, fy));
    fA.append(this.processBeans(fw.getExp(), fx + 1, fy));
    fA.append(fu.addTabs(fx, this.prettyFormat) + "</munderover" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMoverBean = function (fx, fD, fA) {
    var fB = fx;
    var fC = new cE("");
    var fz = this.loadCommunAttributes(fB, fA);
    var fw = fB.getCurrentDefStyle().getAccent();
    if (fw != null) {
      var fy = fB.isAccent() + "";
      if (!fw == fy) {
        fz = fz + 'accent="' + fy + '" '
      }
    } else {
      if (fB.isAccent()) {
        if (!fB.getExp().isAccent()) {
          fz = fz + 'accent="' + fB.isAccent() + '" '
        }
      }
    }
    fz = this.addAttribute3(fz, "align", fB.getAlign(), fB.getCurrentDefStyle().getAlign());
    fz = this.addAttribute3(fz, "overspace", fB.getOverSpace(), fA.getOverSpace());
    fC.append(fu.addTabs(fD, this.prettyFormat) + "<mover" + this.getPrittyAtt(fz));
    fC.append(this.processBeans(fB.getBase(), fD + 1, fA));
    fC.append(this.processBeans(fB.getExp(), fD + 1, fA));
    fC.append(fu.addTabs(fD, this.prettyFormat) + "</mover" + fu.addNewLine(">", this.prettyFormat));
    return fC.toString()
  };
  bd.prototype.getMunderBean = function (fw, fD, fz) {
    var fA = fw;
    var fC = new cE("");
    var fx = this.loadCommunAttributes(fA, fz);
    var fB = fA.getCurrentDefStyle().getAccentunder();
    if (fB != null) {
      var fy = fA.isAccentunder() + "";
      if (!fB == fy) {
        fx = fx + 'accentunder="' + fy + '" '
      }
    } else {
      if (fA.isAccentunder()) {
        if (!fA.getSub().isAccent()) {
          fx = fx + 'accentunder="' + fA.isAccentunder() + '" '
        }
      }
    }
    fx = this.addAttribute3(fx, "align", fA.getAlign(), fA.getCurrentDefStyle().getAlign());
    fx = this.addAttribute3(fx, "underspace", fA.getUnderSpace(), fz.getUnderSpace());
    fC.append(fu.addTabs(fD, this.prettyFormat) + "<munder" + this.getPrittyAtt(fx));
    fC.append(this.processBeans(fA.getBase(), fD + 1, fz));
    fC.append(this.processBeans(fA.getSub(), fD + 1, fz));
    fC.append(fu.addTabs(fD, this.prettyFormat) + "</munder" + fu.addNewLine(">", this.prettyFormat));
    return fC.toString()
  };
  bd.prototype.getMsubsupBean = function (fw, fB, fy) {
    var fz = fw;
    var fA = new cE("");
    var fx = this.loadCommunAttributes(fz, fy);
    fx = this.addAttribute3(fx, "superscriptshift", fz.getSuperscriptshift(), fz.getCurrentDefStyle().getSuperscriptshift());
    fx = this.addAttribute3(fx, "subscriptshift", fz.getSubscriptshift(), fz.getCurrentDefStyle().getSubscriptshift());
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<msubsup" + this.getPrittyAtt(fx));
    fA.append(this.processBeans(fz.getBase(), fB + 1, fy));
    fA.append(this.processBeans(fz.getSub(), fB + 1, fy));
    fA.append(this.processBeans(fz.getExp(), fB + 1, fy));
    fA.append(fu.addTabs(fB, this.prettyFormat) + "</msubsup" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMsupBean = function (fx, fB, fz) {
    var fw = fx;
    var fA = new cE("");
    var fy = this.loadCommunAttributes(fw, fz);
    fy = this.addAttribute3(fy, "superscriptshift", fw.getSuperscriptshift(), fw.getCurrentDefStyle().getSuperscriptshift());
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<msup" + this.getPrittyAtt(fy));
    fA.append(this.processBeans(fw.getBase(), fB + 1, fz));
    fA.append(this.processBeans(fw.getExp(), fB + 1, fz));
    fA.append(fu.addTabs(fB, this.prettyFormat) + "</msup" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMsubBean = function (fw, fB, fz) {
    var fy = fw;
    var fA = new cE("");
    var fx = this.loadCommunAttributes(fy, fz);
    fx = this.addAttribute3(fx, "subscriptshift", fy.getSubscriptshift(), fy.getCurrentDefStyle().getSubscriptshift());
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<msub" + this.getPrittyAtt(fx));
    fA.append(this.processBeans(fy.getBase(), fB + 1, fz));
    fA.append(this.processBeans(fy.getSub(), fB + 1, fz));
    fA.append(fu.addTabs(fB, this.prettyFormat) + "</msub" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMencloseBean = function (fw, fB, fy) {
    var fz = fw;
    var fA = new cE("");
    var fx = this.loadMrowAttributes(fz, fy);
    fx = this.addAttribute2(fx, "notation", fz.getNotation(), fy.getNotation(), fz.getCurrentDefStyle().getNotation());
    fx = this.addAttribute2(fx, "linethickness", fz.getLinethickness(), fy.getLinethickness(), fz.getCurrentDefStyle().getEnclosethickness());
    fx = this.addAttribute2(fx, "space", fz.getSpace(), fy.getEnclosespace(), fz.getCurrentDefStyle().getEnclosespace());
    fx = this.addAttribute2(fx, "rounded", fz.getRounded(), fy.getEncloserounded(), fz.getCurrentDefStyle().getEncloserounded());
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<menclose" + this.getPrittyAtt(fx));
    fA.append(this.getRowChildren(fw, fB, fy));
    fA.append(fu.addTabs(fB, this.prettyFormat) + "</menclose" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMfencedBean = function (fw, fB, fz) {
    var fy = fw;
    var fA = new cE("");
    var fx = this.loadMrowAttributes(fy, fz);
    if (fy.getCurrentDefStyle().getOpen() == null) {
      fx = this.addAttribute3(fx, "open", fy.getOpen(), "(")
    } else {
      fx = this.addAttribute3(fx, "open", fy.getOpen(), fy.getCurrentDefStyle().getOpen())
    }
    if (fy.getCurrentDefStyle().getClose() == null) {
      fx = this.addAttribute3(fx, "close", fy.getClose(), ")")
    } else {
      fx = this.addAttribute3(fx, "close", fy.getClose(), fy.getCurrentDefStyle().getClose())
    }
    fx = this.addAttribute3(fx, "separators", fy.getSeparators(), fy.getCurrentDefStyle().getSeparators());
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<mfenced" + this.getPrittyAtt(fx));
    fA.append(this.getRowChildren(fw, fB, fz));
    fA.append(fu.addTabs(fB, this.prettyFormat) + "</mfenced" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMphantomBean = function (fw, fB, fy) {
    var fA = fw;
    var fz = new cE("");
    var fx = this.loadMrowAttributes(fA, fy);
    fz.append(fu.addTabs(fB, this.prettyFormat) + "<mphantom" + this.getPrittyAtt(fx));
    fz.append(this.getRowChildren(fw, fB, fy));
    fz.append(fu.addTabs(fB, this.prettyFormat) + "</mphantom" + fu.addNewLine(">", this.prettyFormat));
    return fz.toString()
  };
  bd.prototype.getMpaddedBean = function (fw, fB, fy) {
    var fz = fw;
    var fA = new cE("");
    var fx = this.loadMrowAttributes(fz, fy);
    fx = this.addAttribute1(fx, "width", fz.getWidth());
    fx = this.addAttribute1(fx, "lspace", fz.getLspace());
    fx = this.addAttribute1(fx, "height", fz.getHeight());
    fx = this.addAttribute1(fx, "depth", fz.getDepth());
    fx = this.addAttribute1(fx, "voffset", fz.getVoffset());
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<mpadded" + this.getPrittyAtt(fx));
    fA.append(this.getRowChildren(fw, fB, fy));
    fA.append(fu.addTabs(fB, this.prettyFormat) + "</mpadded" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMerrorBean = function (fw, fD, fB) {
    var fz = fw;
    var fC = new cE("");
    var fx = this.loadMrowAttributes(fz, fB);
    var fA = ' mathcolor="' + fB.getErrorColor() + '"';
    if (fx.indexOf(fA) > -1) {
      var fy = fx.indexOf(fA);
      fx = fx.substring(0, fy) + fx.substring(fy + fA.length, fx.length)
    }
    fC.append(fu.addTabs(fD, this.prettyFormat) + "<merror" + this.getPrittyAtt(fx));
    fC.append(this.getRowChildren(fw, fD, fB));
    fC.append(fu.addTabs(fD, this.prettyFormat) + "</merror" + fu.addNewLine(">", this.prettyFormat));
    return fC.toString()
  };
  bd.prototype.getMrootBean = function (fw, fB, fy) {
    var fz = fw;
    var fA = new cE("");
    var fx = this.loadCommunAttributes(fz, fy);
    if (fz.isClosed() != fy.isSqrtClosed()) {
      fx = fx + 'closed="' + fz.isClosed() + '" '
    }
    fx = this.addAttribute3(fx, "closedlength", fz.getClosedLength(), fy.getSqrtClosedLength());
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<mroot" + this.getPrittyAtt(fx));
    fA.append(this.processBeans(fz.getBase(), fB + 1, fy));
    fA.append(this.processBeans(fz.getIndex(), fB + 1, fy));
    fA.append(fu.addTabs(fB, this.prettyFormat) + "</mroot" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMsqrtBean = function (fx, fB, fz) {
    var fw = fx;
    var fA = new cE("");
    var fy = this.loadMrowAttributes(fw, fz);
    if (fw.isClosed() != fz.isSqrtClosed()) {
      fy = fy + 'closed="' + fw.isClosed() + '" '
    }
    fy = this.addAttribute3(fy, "closedlength", fw.getClosedLength(), fz.getSqrtClosedLength());
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<msqrt" + this.getPrittyAtt(fy));
    fA.append(this.getRowChildren(fx, fB, fz));
    fA.append(fu.addTabs(fB, this.prettyFormat) + "</msqrt" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMFracBean = function (fx, fD, fz) {
    var fw = fx;
    var fC = new cE("");
    var fy = this.loadCommunAttributes(fw, fz);
    fy = this.addAttribute2(fy, "linethickness", fw.getLinethickness(), fz.getLinethickness(), fw.getCurrentDefStyle().getLinethickness());
    fy = this.addAttribute3(fy, "lineCapMargin", fw.getLineCapMargin(), fz.getFractionLineCapMargin());
    fy = this.addAttribute3(fy, "space", fw.getSpace(), fz.getFractionSpace());
    var fA = fw.getCurrentDefStyle().getBevelled();
    if (fA != null) {
      var fB = fw.isBevelled() + "";
      if (!fA == fB) {
        fy = fy + 'bevelled="' + fB + '" '
      }
    } else {
      if (fw.isBevelled()) {
        fy = fy + 'bevelled="' + fw.isBevelled() + '" '
      }
    }
    fy = this.addAttribute3(fy, "numalign", fw.getNumalign(), fw.getCurrentDefStyle().getNumalign());
    fy = this.addAttribute3(fy, "denomalign", fw.getDenomalign(), fw.getCurrentDefStyle().getDenomalign());
    fC.append(fu.addTabs(fD, this.prettyFormat) + "<mfrac" + this.getPrittyAtt(fy));
    fC.append(this.processBeans(fw.getNum(), fD + 1, fz));
    fC.append(this.processBeans(fw.getDenum(), fD + 1, fz));
    fC.append(fu.addTabs(fD, this.prettyFormat) + "</mfrac" + fu.addNewLine(">", this.prettyFormat));
    return fC.toString()
  };
  bd.prototype.getMsBean = function (fw, fC, fy) {
    var fz = fw;
    var fB = new cE("");
    var fx = this.loadCommunAttributes(fz, fy);
    if (!('"' == fz.getLquote())) {
      fx = this.addAttribute3(fx, "lquote", fz.getLquote(), fz.getCurrentDefStyle().getLquote())
    }
    if (!('"' == fz.getRquote())) {
      fx = this.addAttribute3(fx, "rquote", fz.getRquote(), fz.getCurrentDefStyle().getRquote())
    }
    var fA = this.getChildren(fw, fC, fy);
    fA = fA.substring(fz.getLquote().length, fA.length - fz.getRquote().length);
    fB.append(fu.addTabs(fC, this.prettyFormat) + "<ms" + this.getAtt(fx) + ">" + fA + "</ms" + fu.addNewLine(">", this.prettyFormat));
    return fB.toString()
  };
  bd.prototype.getMSpaceBean = function (fx, fB, fz) {
    var fw = fx;
    var fA = new cE("");
    var fy = this.loadIndent(fw, fz);
    fy = this.addAttribute3(fy, "width", fw.getWidth(), fw.getCurrentDefStyle().getWidth());
    fy = this.addAttribute3(fy, "height", fw.getHeight(), fw.getCurrentDefStyle().getHeight());
    fy = this.addAttribute3(fy, "depth", fw.getDepth(), fw.getCurrentDefStyle().getDepth());
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<mspace" + this.getAtt(fy) + "></mspace" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMTextBean = function (fw, fz, fy) {
    var fx = fw;
    return this.replaceXML(fx.getText())
  };
  bd.prototype.replaceXML = function (fw) {
    fw = fu.replace(fw, "<", "&lt;");
    fw = fu.replace(fw, ">", "&gt;");
    return fw
  };
  bd.prototype.getMTBean = function (fx, fB, fz) {
    var fw = fx;
    var fA = new cE("");
    var fy = this.loadCommunAttributes(fw, fz);
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<mtext" + this.getAtt(fy) + ">" + this.getChildren(fx, fB, fz) + "</mtext" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMoBean = function (fw, fB, fz) {
    var fy = fw;
    var fA = new cE("");
    var fx = this.loadIndent(fy, fz);
    fx = this.addAttribute3(fx, "form", fy.getFormS(), fy.getCurrentDefStyle().getForm());
    fx = this.addAttribute3(fx, "fence", fy.getFenceS(), fy.getCurrentDefStyle().getFence());
    fx = this.addAttribute3(fx, "separator", fy.getSeparatorS(), fy.getCurrentDefStyle().getSeparator());
    fx = this.addAttribute3(fx, "lspace", fy.getLspaceS(), fy.getCurrentDefStyle().getLspace());
    fx = this.addAttribute3(fx, "rspace", fy.getRspaceS(), fy.getCurrentDefStyle().getRspace());
    fx = this.addAttribute3(fx, "accent", fy.getAccentS(), fy.getCurrentDefStyle().getAccent());
    fx = this.addAttribute3(fx, "stretchy", fy.getStretchyS(), fy.getCurrentDefStyle().getStretchy());
    fx = this.addAttribute3(fx, "maxsize", fy.getMaxsize(), fy.getCurrentDefStyle().getMaxsize());
    fx = this.addAttribute3(fx, "minsize", fy.getMinsize(), fy.getCurrentDefStyle().getMinsize());
    fx = this.addAttribute3(fx, "largeop", fy.getLargeopS(), fy.getCurrentDefStyle().getLargeop());
    fx = this.addAttribute3(fx, "movablelimits", fy.getMovablelimitsS(), fy.getCurrentDefStyle().getMovablelimits());
    fx = this.addAttribute3(fx, "linebreakmultchar", fy.getLinebreakmultchar(), fy.getCurrentDefStyle().getLinebreakmultchar());
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<mo" + this.getAtt(fx) + ">" + this.getChildren(fw, fB, fz) + "</mo" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.addAttribute2 = function (fA, fx, fz, fy, fw) {
    if (fz != null) {
      if (!(fz == fy)) {
        if (!(fz == fw)) {
          fA = fA + fx + '="' + fz + '" '
        }
      }
    }
    return fA
  };
  bd.prototype.addAttribute1 = function (fy, fw, fx) {
    if (fx != null) {
      fy = fy + fw + '="' + fx + '" '
    }
    return fy
  };
  bd.prototype.addAttribute3 = function (fz, fw, fy, fx) {
    if (fy != null) {
      if (!(fy == fx)) {
        fz = fz + fw + '="' + fy + '" '
      }
    }
    return fz
  };
  bd.prototype.addAttribute4 = function (fz, fw, fy, fx) {
    if (fy != fx) {
      fz = fz + fw + '="' + fy + '" '
    }
    return fz
  };
  bd.prototype.addAttribute5 = function (fA, fx, fz, fy, fw) {
    if (fz != fy && fz != fw) {
      fA = fA + fx + '="' + fz + '" '
    }
    return fA
  };
  bd.prototype.addAttribute6 = function (fA, fx, fz, fy, fw) {
    if (fz != null) {
      if (!(fz == fy)) {
        if (!(fz == fw)) {
          fA = fA + fx + '="' + fz + '" '
        }
      }
    }
    return fA
  };
  bd.prototype.loadIndent = function (fx, fz) {
    var fy = this.loadCommunAttributes(fx, fz);
    fy = this.addAttribute3(fy, "linebreak", fx.getLinebreak(), fx.getCurrentDefStyle().getLinebreak());
    fy = this.addAttribute3(fy, "lineleading", fx.getLineleading(), fx.getCurrentDefStyle().getLineleading());
    if (fx.getLinebreakstyle() != null) {
      var fw = fx.getLinebreakstyle();
      var fA = fx.getCurrentDefStyle().getInfixlinebreakstyle();
      var fB = fx.getCurrentDefStyle().getLinebreakstyle();
      if (fw == fA) {
        fy = fy + 'linebreakstyle="infixlinebreakstyle" '
      } else {
        if (!fw == fB) {
          fy = fy + 'linebreakstyle="' + fw + '" '
        }
      }
    }
    fy = this.addAttribute3(fy, "indentalign", fx.getIndentalign(), fx.getCurrentDefStyle().getIndentalign());
    fy = this.addAttribute3(fy, "indentshift", fx.getIndentshift(), fx.getCurrentDefStyle().getIndentshift());
    fy = this.addAttribute3(fy, "indenttarget", fx.getIndenttarget(), fx.getCurrentDefStyle().getIndenttarget());
    fy = this.addAttribute3(fy, "indentalignfirst", fx.getIndentalignfirst(), fx.getCurrentDefStyle().getIndentalignfirst());
    fy = this.addAttribute3(fy, "indentshiftfirst", fx.getIndentshiftfirst(), fx.getCurrentDefStyle().getIndentshiftfirst());
    fy = this.addAttribute3(fy, "indentalignlast", fx.getIndentalignlast(), fx.getCurrentDefStyle().getIndentalignlast());
    fy = this.addAttribute3(fy, "indentshiftlast", fx.getIndentshiftlast(), fx.getCurrentDefStyle().getIndentshiftlast());
    return fy
  };
  bd.prototype.getMnBean = function (fw, fB, fy) {
    var fz = fw;
    var fA = new cE("");
    var fx = this.loadCommunAttributes(fz, fy);
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<mn" + this.getAtt(fx) + ">" + this.getChildren(fw, fB, fy) + "</mn" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMiBean = function (fx, fC, fz) {
    var fw = fx;
    var fB = new cE("");
    var fy = "";
    if (fw.hasOneCharText() && fw.getStyle().isItalic()) {
      fw.getStyle().setItalic(false);
      var fA = fw.getAttribute("mathvariant");
      if ("italic" == fA) {
        fw.clearAttribute("mathvariant")
      } else {
        if (fA != null) {
          fA = du.getItalic(fA, false);
          fw.setAttribute("mathvariant", fA)
        }
      }
      fy = this.loadCommunAttributes(fw, fz);
      fw.getStyle().setItalic(true)
    } else {
      fy = this.loadCommunAttributes(fw, fz)
    }
    fB.append(fu.addTabs(fC, this.prettyFormat) + "<mi" + this.getAtt(fy) + ">" + this.getChildren(fx, fC, fz) + "</mi" + fu.addNewLine(">", this.prettyFormat));
    return fB.toString()
  };
  bd.prototype.getMGlyphBean = function (fw, fB, fy) {
    var fz = fw;
    var fx = this.loadCommunAttributes(fz, fy);
    fx = this.addAttribute1(fx, "src", fz.getSrc());
    fx = this.addAttribute1(fx, "width", fz.getWidth());
    fx = this.addAttribute1(fx, "height", fz.getHeight());
    fx = this.addAttribute1(fx, "valign", fz.getValign());
    fx = this.addAttribute1(fx, "alt", fz.getAlt());
    var fA = new cE("");
    fA.append("<mglyph" + this.getAtt(fx) + "/>");
    return fA.toString()
  };
  bd.prototype.getMStyleBean = function (fw, fB, fz) {
    var fy = fw;
    var fA = new cE("");
    var fx = this.loadMrowAttributes(fy, fz);
    fx = fx + this.addStyleAttributes(fy, fz);
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<mstyle" + this.getPrittyAtt(fx));
    fA.append(this.getRowChildren(fw, fB, fz));
    fA.append(fu.addTabs(fB, this.prettyFormat) + "</mstyle" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getRowBean = function (fx, fB, fz) {
    var fw = fx;
    var fA = new cE("");
    var fy = this.loadMrowAttributes(fw, fz);
    fA.append(fu.addTabs(fB, this.prettyFormat) + "<mrow" + this.getPrittyAtt(fy));
    fA.append(this.getRowChildren(fx, fB, fz));
    fA.append(fu.addTabs(fB, this.prettyFormat) + "</mrow" + fu.addNewLine(">", this.prettyFormat));
    return fA.toString()
  };
  bd.prototype.getMathBean = function (fw, fC, fA) {
    var fz = fw;
    var fB = new cE("");
    var fy = this.loadMrowAttributes(fz, fA);
    fy = fy + this.addStyleAttributes(fz, fA);
    var fx = fz.getCurrentDefStyle().getDisplaystyle();
    if (fx != null) {
      if ("false" == fx) {
        fy = fy + 'display="inline" '
      } else {
        fy = fy + 'display="block" '
      }
    }
    fy = this.addAttribute1(fy, "maxwidth", fz.getMaxwidth());
    fy = this.addAttribute1(fy, "overflow", fz.getOverflow());
    fB.append(fu.addTabs(fC, this.prettyFormat) + "<math" + this.getPrittyAtt(fy));
    fB.append(this.getRowChildren(fw, fC, fA));
    fB.append(fu.addTabs(fC, this.prettyFormat) + "</math>");
    return fB.toString()
  };
  bd.prototype.loadMrowAttributes = function (fw, fy) {
    var fx = this.loadCommunAttributes(fw, fy);
    fx = this.addAttribute1(fx, "rowalign", fw.getRowalign());
    fx = this.addAttribute1(fx, "linestyle", fw.getLinestyle());
    fx = this.addAttribute3(fx, "lineleading", fw.getLineleading(), fy.getLineleading());
    return fx
  };
  bd.prototype.loadCommunAttributes = function (fw, fy) {
    var fx = this.loadMathML1Attributes(fw, fy);
    if (fw.getAttribute("id") != null) {
      fx = fx + 'id="' + fw.getAttribute("id") + '" '
    }
    fx = this.addAttribute1(fx, "xref", fw.getXref());
    fx = this.addAttribute1(fx, "href", fw.getHref());
    if (!this.existAttributeInStyle(fw, "color")) {
      fx = this.addAttribute1(fx, "mathcolor", fw.getAttribute("mathcolor"))
    }
    if (!this.existAttributeInStyle(fw, "background")) {
      fx = this.addAttribute1(fx, "mathbackground", fw.getAttribute("mathbackground"))
    }
    if (fw.getAttribute("editorSelected") != null) {
      fx = this.addAttribute1(fx, "editorSelected", fw.getAttribute("editorSelected"))
    }
    if (fw.getAttribute("toSelect") != null) {
      fx = this.addAttribute1(fx, "toSelect", fw.getAttribute("toSelect"))
    }
    return fx
  };
  bd.prototype.existAttributeInStyle = function (fw, fy) {
    var fx = fw.getAttribute("style");
    if (fx == null || fx.length == 0) {
      return false
    }
    if (fx.indexOf(fy + ":") == 0) {
      return true
    }
    if (fx.indexOf(";" + fy + ":") > -1) {
      return true
    }
    return false
  };
  bd.prototype.loadMathML1Attributes = function (fw, fy) {
    var fx = bd.loadStyleAttributes(fw, fy);
    fx = this.addAttribute1(fx, "mathvariant", fw.getAttribute("mathvariant"));
    fx = this.addAttribute1(fx, "fontweight", fw.getAttribute("fontweight"));
    fx = this.addAttribute1(fx, "fontstyle", fw.getAttribute("fontstyle"));
    fx = this.addAttribute1(fx, "mathsize", fw.getAttribute("mathsize"));
    fx = this.addAttribute1(fx, "dir", fw.getAttribute("dir"));
    return fx
  };
  bd.loadStyleAttributes = function (fw, fz) {
    var fy = " ";
    var fx = fw.getAttribute("style");
    if ((fx != null) && (fx.length > 0)) {
      fy = fy + 'style="' + fx + '" '
    }
    return fy
  };
  bd.prototype.getRowChildren = function (fw, fC, fz) {
    var fB = new cE("");
    var fy = fw.getChildren();
    if (fy != null) {
      for (var fx = 0; fx < fy.size(); fx++) {
        var fA = fy.get(fx);
        fB.append(this.getChildren(fA, fC, fz))
      }
    }
    return fB.toString()
  };
  bd.prototype.getChildren = function (fw, fC, fz) {
    var fB = new cE("");
    var fy = fw.getChildren();
    if (fy != null) {
      for (var fx = 0; fx < fy.size(); fx++) {
        var fA = fy.get(fx);
        fB.append(this.processBeans(fA, fC + 1, fz))
      }
    }
    return fB.toString()
  };
  bd.prototype.addStyleAttributes = function (fw, fA) {
    var fz = fw.getCurrentDefStyle();
    var fy = new aS();
    if (fw.getParentBean() != null) {
      var fB = fw.getParentBean();
      fy = fB.getCurrentDefStyle()
    }
    var fx = "";
    fx = this.addAttribute3(fx, "scriptlevel", fz.getScriptlevel(), fy.getScriptlevel());
    fx = this.addAttribute3(fx, "displaystyle", fz.getDisplaystyle(), fy.getDisplaystyle());
    fx = this.addAttribute5(fx, "scriptsizemultiplier", fz.getScriptsizemultiplier(), fy.getScriptsizemultiplier(), fA.getScriptsizemultiplier());
    fx = this.addAttribute6(fx, "scriptminsize", fz.getScriptminsize(), fy.getScriptminsize(), fA.getScriptminsize() + "");
    fx = this.addAttribute3(fx, "infixlinebreakstyle", fz.getInfixlinebreakstyle(), fy.getInfixlinebreakstyle());
    fx = this.addAttribute6(fx, "decimalpoint", fz.getDecimalpoint(), fy.getDecimalpoint(), fA.getDecimalpoint());
    fx = this.addAttribute3(fx, "accent", fz.getAccent(), fy.getAccent());
    fx = this.addAttribute3(fx, "accentunder", fz.getAccentunder(), fy.getAccentunder());
    fx = this.addAttribute3(fx, "align", fz.getAlign(), fy.getAlign());
    fx = this.addAttribute3(fx, "alignmentscope", fz.getAlignmentscope(), fy.getAlignmentscope());
    fx = this.addAttribute3(fx, "bevelled", fz.getBevelled(), fy.getBevelled());
    fx = this.addAttribute3(fx, "charalign", fz.getCharalign(), fy.getCharalign());
    fx = this.addAttribute3(fx, "charspacing", fz.getCharspacing(), fy.getCharspacing());
    fx = this.addAttribute3(fx, "close", fz.getClose(), fy.getClose());
    fx = this.addAttribute3(fx, "columnalign", fz.getColumnalign(), fy.getColumnalign());
    fx = this.addAttribute3(fx, "columnlines", fz.getColumnlines(), fy.getColumnlines());
    fx = this.addAttribute3(fx, "columnspacing", fz.getColumnspacing(), fy.getColumnspacing());
    fx = this.addAttribute3(fx, "columnspan", fz.getColumnspan(), fy.getColumnspan());
    fx = this.addAttribute3(fx, "columnwidth", fz.getColumnwidth(), fy.getColumnwidth());
    fx = this.addAttribute3(fx, "crossout", fz.getCrossout(), fy.getCrossout());
    fx = this.addAttribute3(fx, "denomalign", fz.getDenomalign(), fy.getDenomalign());
    fx = this.addAttribute3(fx, "depth", fz.getDepth(), fy.getDepth());
    fx = this.addAttribute3(fx, "dir", fz.getDir(), fy.getDir());
    fx = this.addAttribute3(fx, "edge", fz.getEdge(), fy.getEdge());
    fx = this.addAttribute3(fx, "equalcolumns", fz.getEqualcolumns(), fy.getEqualcolumns());
    fx = this.addAttribute3(fx, "equalrows", fz.getEqualrows(), fy.getEqualrows());
    fx = this.addAttribute3(fx, "fence", fz.getFence(), fy.getFence());
    fx = this.addAttribute3(fx, "form", fz.getForm(), fy.getForm());
    fx = this.addAttribute3(fx, "frame", fz.getFrame(), fy.getFrame());
    fx = this.addAttribute3(fx, "framespacing", fz.getFramespacing(), fy.getFramespacing());
    fx = this.addAttribute3(fx, "groupalign", fz.getGroupalign(), fy.getGroupalign());
    fx = this.addAttribute3(fx, "height", fz.getHeight(), fy.getHeight());
    fx = this.addAttribute3(fx, "indentalign", fz.getIndentalign(), fy.getIndentalign());
    fx = this.addAttribute3(fx, "indentalignfirst", fz.getIndentalignfirst(), fy.getIndentalignfirst());
    fx = this.addAttribute3(fx, "indentalignlast", fz.getIndentalignlast(), fy.getIndentalignlast());
    fx = this.addAttribute3(fx, "indentshift", fz.getIndentshift(), fy.getIndentshift());
    fx = this.addAttribute3(fx, "indentshiftfirst", fz.getIndentshiftfirst(), fy.getIndentshiftfirst());
    fx = this.addAttribute3(fx, "indentshiftlast", fz.getIndentshiftlast(), fy.getIndentshiftlast());
    fx = this.addAttribute3(fx, "indenttarget", fz.getIndenttarget(), fy.getIndenttarget());
    fx = this.addAttribute3(fx, "largeop", fz.getLargeop(), fy.getLargeop());
    fx = this.addAttribute3(fx, "leftoverhang", fz.getLeftoverhang(), fy.getLeftoverhang());
    fx = this.addAttribute3(fx, "length", fz.getLength(), fy.getLength());
    fx = this.addAttribute3(fx, "linebreak", fz.getLinebreak(), fy.getLinebreak());
    fx = this.addAttribute3(fx, "linebreakmultchar", fz.getLinebreakmultchar(), fy.getLinebreakmultchar());
    fx = this.addAttribute3(fx, "linebreakstyle", fz.getLinebreakstyle(), fy.getLinebreakstyle());
    fx = this.addAttribute3(fx, "lineleading", fz.getLineleading(), fy.getLineleading());
    fx = this.addAttribute3(fx, "linethickness", fz.getLinethickness(), fy.getLinethickness());
    fx = this.addAttribute3(fx, "location", fz.getLocation(), fy.getLocation());
    fx = this.addAttribute3(fx, "longdivstyle", fz.getLongdivstyle(), fy.getLongdivstyle());
    fx = this.addAttribute6(fx, "lquote", fz.getLquote(), fy.getLquote(), fA.getLquote());
    fx = this.addAttribute3(fx, "lspace", fz.getLspace(), fy.getLspace());
    fx = this.addAttribute3(fx, "maxsize", fz.getMaxsize(), fy.getMaxsize());
    fx = this.addAttribute3(fx, "minlabelspacing", fz.getMinlabelspacing(), fy.getMinlabelspacing());
    fx = this.addAttribute3(fx, "minsize", fz.getMinsize(), fy.getMinsize());
    fx = this.addAttribute3(fx, "movablelimits", fz.getMovablelimits(), fy.getMovablelimits());
    fx = this.addAttribute3(fx, "mslinethickness", fz.getMslinethickness(), fy.getMslinethickness());
    fx = this.addAttribute3(fx, "notation", fz.getNotation(), fy.getNotation());
    fx = this.addAttribute3(fx, "numalign", fz.getNumalign(), fy.getNumalign());
    fx = this.addAttribute3(fx, "open", fz.getOpen(), fy.getOpen());
    fx = this.addAttribute3(fx, "position", fz.getPosition(), fy.getPosition());
    fx = this.addAttribute3(fx, "rightoverhang", fz.getRightoverhang(), fy.getRightoverhang());
    fx = this.addAttribute3(fx, "rowalign", fz.getRowalign(), fy.getRowalign());
    fx = this.addAttribute3(fx, "rowlines", fz.getRowlines(), fy.getRowlines());
    fx = this.addAttribute3(fx, "rowspacing", fz.getRowspacing(), fy.getRowspacing());
    fx = this.addAttribute3(fx, "rowspan", fz.getRowspan(), fy.getRowspan());
    fx = this.addAttribute6(fx, "rquote", fz.getRquote(), fy.getRquote(), fA.getRquote());
    fx = this.addAttribute3(fx, "rspace", fz.getRspace(), fy.getRspace());
    fx = this.addAttribute3(fx, "selection", fz.getSelection(), fy.getSelection());
    fx = this.addAttribute3(fx, "separators", fz.getSeparators(), fy.getSeparators());
    fx = this.addAttribute3(fx, "shift", fz.getShift(), fy.getShift());
    fx = this.addAttribute3(fx, "side", fz.getSide(), fy.getSide());
    fx = this.addAttribute3(fx, "stackalign", fz.getStackalign(), fy.getStackalign());
    fx = this.addAttribute3(fx, "stretchy", fz.getStretchy(), fy.getStretchy());
    fx = this.addAttribute3(fx, "subscriptshift", fz.getSubscriptshift(), fy.getSubscriptshift());
    fx = this.addAttribute3(fx, "superscriptshift", fz.getSuperscriptshift(), fy.getSuperscriptshift());
    fx = this.addAttribute3(fx, "symmetric", fz.getSymmetric(), fy.getSymmetric());
    fx = this.addAttribute3(fx, "valign", fz.getValign(), fy.getValign());
    fx = this.addAttribute3(fx, "voffset", fz.getVoffset(), fy.getVoffset());
    fx = this.addAttribute3(fx, "width", fz.getWidth(), fy.getWidth());
    fx = this.addAttribute3(fx, "enclosethickness", fz.getEnclosethickness(), fy.getEnclosethickness());
    fx = this.addAttribute3(fx, "enclosespace", fz.getEnclosespace(), fy.getEnclosespace());
    return fx
  };
  bd.prototype.getPrittyAtt = function (fx) {
    var fw = fu.trim(fx);
    if (fw.length > 0) {
      fw = " " + fw
    }
    fw = fw + fu.addNewLine(">", this.prettyFormat);
    return fw
  };
  bd.prototype.getAtt = function (fx) {
    var fw = fu.trim(fx);
    if (fw.length > 0) {
      fw = " " + fw
    }
    return fw
  };
  function K() {
    this.acceptedStyles = ",dashed,dotted,solid,";
    this.padding_bottom;
    this.padding_left;
    this.padding_right;
    this.padding_top;
    this.border_color_bottom;
    this.border_color_left;
    this.border_color_right;
    this.border_color_top;
    this.border_style_bottom;
    this.border_style_left;
    this.border_style_right;
    this.border_style_top;
    this.border_width_bottom;
    this.border_width_left;
    this.border_width_right;
    this.border_width_top;
    this.margin_bottom;
    this.margin_left;
    this.margin_right;
    this.margin_top
  }
  
  K.prototype.borderWidthSet = function () {
    return (this.border_width_bottom != null || this.border_width_left != null || this.border_width_right != null || this.border_width_top != null)
  };
  K.prototype.setBorder = function (fy) {
    fy = fy.toLowerCase();
    var fw = fy.split(" ");
    if (fw.length == 1) {
      if (cT.isLength(fw[0])) {
        this.border_width_bottom = fw[0];
        this.border_width_top = fw[0];
        this.border_width_left = fw[0];
        this.border_width_right = fw[0]
      } else {
        if (this.acceptedStyles.indexOf("," + fw[0] + ",") > -1) {
          this.border_style_bottom = fw[0];
          this.border_style_top = fw[0];
          this.border_style_left = fw[0];
          this.border_style_right = fw[0]
        } else {
          this.border_color_bottom = aw.getColor(fw[0], 0);
          this.border_color_top = aw.getColor(fw[0], 0);
          this.border_color_left = aw.getColor(fw[0], 0);
          this.border_color_right = aw.getColor(fw[0], 0)
        }
      }
    } else {
      if (fw.length == 2) {
        if (cT.isLength(fw[0])) {
          this.border_width_bottom = fw[0];
          this.border_width_top = fw[0];
          this.border_width_left = fw[0];
          this.border_width_right = fw[0];
          if (this.acceptedStyles.indexOf("," + fw[1] + ",") > -1) {
            this.border_style_bottom = fw[1];
            this.border_style_top = fw[1];
            this.border_style_left = fw[1];
            this.border_style_right = fw[1]
          } else {
            this.border_color_bottom = aw.getColor(fw[1], 0);
            this.border_color_top = aw.getColor(fw[1], 0);
            this.border_color_left = aw.getColor(fw[1], 0);
            this.border_color_right = aw.getColor(fw[1], 0)
          }
        } else {
          var fx = fw[0];
          this.border_style_bottom = fx;
          this.border_style_top = fx;
          this.border_style_left = fx;
          this.border_style_right = fx;
          this.border_color_bottom = aw.getColor(fw[1], 0);
          this.border_color_top = aw.getColor(fw[1], 0);
          this.border_color_left = aw.getColor(fw[1], 0);
          this.border_color_right = aw.getColor(fw[1], 0)
        }
      } else {
        if (fw.length >= 3) {
          this.border_width_bottom = fw[0];
          this.border_width_top = fw[0];
          this.border_width_left = fw[0];
          this.border_width_right = fw[0];
          var fx = fw[1];
          this.border_style_bottom = fx;
          this.border_style_top = fx;
          this.border_style_left = fx;
          this.border_style_right = fx;
          this.border_color_bottom = aw.getColor(fw[2], 0);
          this.border_color_top = aw.getColor(fw[2], 0);
          this.border_color_left = aw.getColor(fw[2], 0);
          this.border_color_right = aw.getColor(fw[2], 0)
        }
      }
    }
  };
  K.prototype.setBorderTop = function (fy) {
    fy = fy.toLowerCase();
    var fw = fy.split(" ");
    if (fw.length == 1) {
      if (cT.isLength(fw[0])) {
        this.border_width_top = fw[0]
      } else {
        if (this.acceptedStyles.indexOf("," + fw[0] + ",") > -1) {
          this.border_style_top = fw[0]
        } else {
          this.border_color_top = aw.getColor(fw[0], 0)
        }
      }
    } else {
      if (fw.length == 2) {
        if (cT.isLength(fw[0])) {
          this.border_width_top = fw[0];
          if (this.acceptedStyles.indexOf("," + fw[1] + ",") > -1) {
            this.border_style_top = fw[1]
          } else {
            this.border_color_top = aw.getColor(fw[1], 0)
          }
        } else {
          var fx = fw[0];
          this.border_style_top = fx;
          this.border_color_top = aw.getColor(fw[1], 0)
        }
      } else {
        if (fw.length >= 3) {
          this.border_width_top = fw[0];
          var fx = fw[1];
          this.border_style_top = fx;
          this.border_color_top = aw.getColor(fw[2], 0)
        }
      }
    }
  };
  K.prototype.setBorderBottom = function (fy) {
    fy = fy.toLowerCase();
    var fw = fy.split(" ");
    if (fw.length == 1) {
      if (cT.isLength(fw[0])) {
        this.border_width_bottom = fw[0]
      } else {
        if (this.acceptedStyles.indexOf("," + fw[0] + ",") > -1) {
          this.border_style_bottom = fw[0]
        } else {
          this.border_color_bottom = aw.getColor(fw[0], 0)
        }
      }
    } else {
      if (fw.length == 2) {
        if (cT.isLength(fw[0])) {
          this.border_width_bottom = fw[0];
          if (this.acceptedStyles.indexOf("," + fw[1] + ",") > -1) {
            this.border_style_bottom = fw[1]
          } else {
            this.border_color_bottom = aw.getColor(fw[1], 0)
          }
        } else {
          var fx = fw[0];
          this.border_style_bottom = fx;
          this.border_color_bottom = aw.getColor(fw[1], 0)
        }
      } else {
        if (fw.length >= 3) {
          this.border_width_bottom = fw[0];
          var fx = fw[1];
          this.border_style_bottom = fx;
          this.border_color_bottom = aw.getColor(fw[2], 0)
        }
      }
    }
  };
  K.prototype.setBorderLeft = function (fy) {
    fy = fy.toLowerCase();
    var fw = fy.split(" ");
    if (fw.length == 1) {
      if (cT.isLength(fw[0])) {
        this.border_width_left = fw[0]
      } else {
        if (this.acceptedStyles.indexOf("," + fw[0] + ",") > -1) {
          this.border_style_left = fw[0]
        } else {
          this.border_color_left = aw.getColor(fw[0], 0)
        }
      }
    } else {
      if (fw.length == 2) {
        if (cT.isLength(fw[0])) {
          this.border_width_left = fw[0];
          if (this.acceptedStyles.indexOf("," + fw[1] + ",") > -1) {
            this.border_style_left = fw[1]
          } else {
            this.border_color_left = aw.getColor(fw[1], 0)
          }
        } else {
          var fx = fw[0];
          this.border_style_left = fx;
          this.border_color_left = aw.getColor(fw[1], 0)
        }
      } else {
        if (fw.length >= 3) {
          this.border_width_left = fw[0];
          var fx = fw[1];
          this.border_style_left = fx;
          this.border_color_left = aw.getColor(fw[2], 0)
        }
      }
    }
  };
  K.prototype.setBorderRight = function (fy) {
    fy = fy.toLowerCase();
    var fw = fy.split(" ");
    if (fw.length == 1) {
      if (cT.isLength(fw[0])) {
        this.border_width_right = fw[0]
      } else {
        if (this.acceptedStyles.indexOf("," + fw[0] + ",") > -1) {
          this.border_style_right = fw[0]
        } else {
          this.border_color_right = aw.getColor(fw[0], 0)
        }
      }
    } else {
      if (fw.length == 2) {
        if (cT.isLength(fw[0])) {
          this.border_width_right = fw[0];
          if (this.acceptedStyles.indexOf("," + fw[1] + ",") > -1) {
            this.border_style_right = fw[1]
          } else {
            this.border_color_right = aw.getColor(fw[1], 0)
          }
        } else {
          var fx = fw[0];
          this.border_style_right = fx;
          this.border_color_right = aw.getColor(fw[1], 0)
        }
      } else {
        if (fw.length >= 3) {
          this.border_width_right = fw[0];
          var fx = fw[1];
          this.border_style_right = fx;
          this.border_color_right = aw.getColor(fw[2], 0)
        }
      }
    }
  };
  K.prototype.setBorderTopColor = function (fw) {
    this.border_color_top = aw.getColor(fw, 0)
  };
  K.prototype.setBorderBottomColor = function (fw) {
    this.border_color_bottom = aw.getColor(fw, 0)
  };
  K.prototype.setBorderLeftColor = function (fw) {
    this.border_color_left = aw.getColor(fw, 0)
  };
  K.prototype.setBorderRightColor = function (fw) {
    this.border_color_right = aw.getColor(fw, 0)
  };
  K.prototype.setBorderTopStyle = function (fw) {
    this.border_style_top = fw
  };
  K.prototype.setBorderBottomStyle = function (fw) {
    this.border_style_bottom = fw
  };
  K.prototype.setBorderLeftStyle = function (fw) {
    this.border_style_left = fw
  };
  K.prototype.setBorderRightStyle = function (fw) {
    this.border_style_right = fw
  };
  K.prototype.setBorderTopWidth = function (fw) {
    this.border_width_top = fw
  };
  K.prototype.setBorderBottomWidth = function (fw) {
    this.border_width_bottom = fw
  };
  K.prototype.setBorderLeftWidth = function (fw) {
    this.border_width_left = fw
  };
  K.prototype.setBorderRightWidth = function (fw) {
    this.border_width_right = fw
  };
  K.prototype.setBorderColor = function (fx) {
    var fw = fx.split(" ");
    if (fw.length == 1) {
      this.border_color_bottom = aw.getColor(fw[0], 0);
      this.border_color_top = aw.getColor(fw[0], 0);
      this.border_color_left = aw.getColor(fw[0], 0);
      this.border_color_right = aw.getColor(fw[0], 0)
    } else {
      if (fw.length == 2) {
        this.border_color_bottom = aw.getColor(fw[0], 0);
        this.border_color_top = aw.getColor(fw[0], 0);
        this.border_color_left = aw.getColor(fw[1], 0);
        this.border_color_right = aw.getColor(fw[1], 0)
      } else {
        if (fw.length == 3) {
          this.border_color_bottom = aw.getColor(fw[2], 0);
          this.border_color_top = aw.getColor(fw[0], 0);
          this.border_color_left = aw.getColor(fw[1], 0);
          this.border_color_right = aw.getColor(fw[1], 0)
        } else {
          if (fw.length > 3) {
            this.border_color_bottom = aw.getColor(fw[2], 0);
            this.border_color_top = aw.getColor(fw[0], 0);
            this.border_color_left = aw.getColor(fw[3], 0);
            this.border_color_right = aw.getColor(fw[1], 0)
          }
        }
      }
    }
  };
  K.prototype.setBorderStyle = function (fx) {
    var fw = fx.split(" ");
    if (fw.length == 1) {
      this.border_style_bottom = fw[0];
      this.border_style_top = fw[0];
      this.border_style_left = fw[0];
      this.border_style_right = fw[0]
    } else {
      if (fw.length == 2) {
        this.border_style_bottom = fw[0];
        this.border_style_top = fw[0];
        this.border_style_left = fw[1];
        this.border_style_right = fw[1]
      } else {
        if (fw.length == 3) {
          this.border_style_bottom = fw[2];
          this.border_style_top = fw[0];
          this.border_style_left = fw[1];
          this.border_style_right = fw[1]
        } else {
          if (fw.length > 3) {
            this.border_style_bottom = fw[2];
            this.border_style_top = fw[0];
            this.border_style_left = fw[3];
            this.border_style_right = fw[1]
          }
        }
      }
    }
  };
  K.prototype.setBorderWidth = function (fx) {
    var fw = fx.split(" ");
    if (fw.length == 1) {
      this.border_width_bottom = fw[0];
      this.border_width_top = fw[0];
      this.border_width_left = fw[0];
      this.border_width_right = fw[0]
    } else {
      if (fw.length == 2) {
        this.border_width_bottom = fw[0];
        this.border_width_top = fw[0];
        this.border_width_left = fw[1];
        this.border_width_right = fw[1]
      } else {
        if (fw.length == 3) {
          this.border_width_bottom = fw[2];
          this.border_width_top = fw[0];
          this.border_width_left = fw[1];
          this.border_width_right = fw[1]
        } else {
          if (fw.length > 3) {
            this.border_width_bottom = fw[2];
            this.border_width_top = fw[0];
            this.border_width_left = fw[3];
            this.border_width_right = fw[1]
          }
        }
      }
    }
  };
  K.prototype.setMargin = function (fx) {
    var fw = fx.split(" ");
    if (fw.length == 1) {
      this.margin_bottom = fw[0];
      this.margin_top = fw[0];
      this.margin_left = fw[0];
      this.margin_right = fw[0]
    } else {
      if (fw.length == 2) {
        this.margin_bottom = fw[0];
        this.margin_top = fw[0];
        this.margin_left = fw[1];
        this.margin_right = fw[1]
      } else {
        if (fw.length == 3) {
          this.margin_bottom = fw[2];
          this.margin_top = fw[0];
          this.margin_left = fw[1];
          this.margin_right = fw[1]
        } else {
          if (fw.length > 3) {
            this.margin_bottom = fw[2];
            this.margin_top = fw[0];
            this.margin_left = fw[3];
            this.margin_right = fw[1]
          }
        }
      }
    }
  };
  K.prototype.setMarginTop = function (fw) {
    this.margin_top = fw
  };
  K.prototype.setMarginBottom = function (fw) {
    this.margin_bottom = fw
  };
  K.prototype.setMarginRight = function (fw) {
    this.margin_right = fw
  };
  K.prototype.setMarginLeft = function (fw) {
    this.margin_left = fw
  };
  K.prototype.setPadding = function (fx) {
    var fw = fx.split(" ");
    if (fw.length == 1) {
      this.padding_bottom = fw[0];
      this.padding_top = fw[0];
      this.padding_left = fw[0];
      this.padding_right = fw[0]
    } else {
      if (fw.length == 2) {
        this.padding_bottom = fw[0];
        this.padding_top = fw[0];
        this.padding_left = fw[1];
        this.padding_right = fw[1]
      } else {
        if (fw.length == 3) {
          this.padding_bottom = fw[2];
          this.padding_top = fw[0];
          this.padding_left = fw[1];
          this.padding_right = fw[1]
        } else {
          if (fw.length > 3) {
            this.padding_bottom = fw[2];
            this.padding_top = fw[0];
            this.padding_left = fw[3];
            this.padding_right = fw[1]
          }
        }
      }
    }
  };
  K.prototype.setPaddingTop = function (fw) {
    this.padding_top = fw
  };
  K.prototype.setPaddingBottom = function (fw) {
    this.padding_bottom = fw
  };
  K.prototype.setPaddingRight = function (fw) {
    this.padding_right = fw
  };
  K.prototype.setPaddingLeft = function (fw) {
    this.padding_left = fw
  };
  K.prototype.getBorder_style_bottom = function () {
    if (this.border_style_bottom != null) {
      return this.border_style_bottom.toLowerCase()
    }
    return this.border_style_bottom
  };
  K.prototype.setBorder_style_bottom = function (fw) {
    this.border_style_bottom = fw
  };
  K.prototype.getBorder_width_bottom = function (fw) {
    return cT.getLength(this.border_width_bottom, fw)
  };
  K.prototype.getBorder_style_left = function () {
    if (this.border_style_left != null) {
      return this.border_style_left.toLowerCase()
    }
    return this.border_style_left
  };
  K.prototype.setBorder_style_left = function (fw) {
    this.border_style_left = fw
  };
  K.prototype.getBorder_width_left = function (fw) {
    return cT.getLength(this.border_width_left, fw)
  };
  K.prototype.getBorder_style_right = function () {
    if (this.border_style_right != null) {
      return this.border_style_right.toLowerCase()
    }
    return this.border_style_right
  };
  K.prototype.setBorder_style_right = function (fw) {
    this.border_style_right = fw
  };
  K.prototype.getBorder_width_right = function (fw) {
    return cT.getLength(this.border_width_right, fw)
  };
  K.prototype.getBorder_style_top = function () {
    if (this.border_style_top != null) {
      return this.border_style_top.toLowerCase()
    }
    return this.border_style_top
  };
  K.prototype.setBorder_style_top = function (fw) {
    this.border_style_top = fw
  };
  K.prototype.getBorder_width_top = function (fw) {
    return cT.getLength(this.border_width_top, fw)
  };
  K.prototype.getMargin_bottom = function (fw) {
    return cT.getLength(this.margin_bottom, fw)
  };
  K.prototype.getMargin_left = function (fw) {
    return cT.getLength(this.margin_left, fw)
  };
  K.prototype.getMargin_right = function (fw) {
    return cT.getLength(this.margin_right, fw)
  };
  K.prototype.getMargin_top = function (fw) {
    return cT.getLength(this.margin_top, fw)
  };
  K.prototype.getPadding_bottom = function (fw) {
    return cT.getLength(this.padding_bottom, fw)
  };
  K.prototype.getPadding_left = function (fw) {
    return cT.getLength(this.padding_left, fw)
  };
  K.prototype.getPadding_right = function (fw) {
    return cT.getLength(this.padding_right, fw)
  };
  K.prototype.getPadding_top = function (fw) {
    return cT.getLength(this.padding_top, fw)
  };
  K.prototype.getBorder_color_bottom = function () {
    return this.border_color_bottom
  };
  K.prototype.setBorder_color_bottom = function (fw) {
    this.border_color_bottom = fw
  };
  K.prototype.getBorder_color_left = function () {
    return this.border_color_left
  };
  K.prototype.setBorder_color_left = function (fw) {
    this.border_color_left = fw
  };
  K.prototype.getBorder_color_right = function () {
    return this.border_color_right
  };
  K.prototype.setBorder_color_right = function (fw) {
    this.border_color_right = fw
  };
  K.prototype.getBorder_color_top = function () {
    return this.border_color_top
  };
  K.prototype.setBorder_color_top = function (fw) {
    this.border_color_top = fw
  };
  function dW() {
  }
  
  function ds() {
  }
  
  ds.getCharFromHexCode = function (fw) {
    return ej.getCharFromHexCode(fw)
  };
  ds.getCharFromIntCode = function (fw) {
    return ej.getCharFromIntCode(fw)
  };
  ds.getIntFromHexCode = function (fw) {
    return ej.getIntFromHexCode(fw)
  };
  ds.getHexCodeFromChar = function (fw) {
    var fx = fw.charCodeAt(0);
    return ds.getHexCodeFromInt(fx)
  };
  ds.getHexCodeFromInt = function (fx) {
    var fw = ej.getHexCodeFromInt(fx);
    fw = fw.toUpperCase();
    return fw
  };
  ds.getHexCodeFromText = function (fy, fw) {
    if (fw > (fy.length - 1) || fw < 0) {
      return ""
    }
    var fx = fy.charCodeAt(fw);
    return ds.getHexCodeFromInt(fx)
  };
  function aw() {
  }
  
  aw.getColor = function (fx, fz) {
    if (fx == null) {
      return null
    }
    var fy = fx;
    if (fy.charAt(0) != "#") {
      fy = aw.getColorCode(fx)
    }
    fy = fy.substring(1, fy.length);
    var fw = aw.getColorName(fy);
    return new N(fy, fw)
  };
  aw.getColorCode = function (fx) {
    if (fx == null) {
      return "#000000"
    }
    if (fx.charAt(0) == "#") {
      return fx
    }
    fx = fx.toLowerCase();
    var fy = dr;
    if (fy.indexOf(";" + fx + "=") > -1) {
      var fw = fy.indexOf(";" + fx + "=");
      var fz = fy.indexOf(";", fw + 1);
      return "#" + fy.substring(fw + 2 + fx.length, fz)
    }
    return "#000000"
  };
  aw.getColorName = function (fx) {
    if (fx == null) {
      return null
    }
    if (fx.charAt(0) == "#") {
      fx = fx.substring(1, fx.length)
    }
    fx = fx.toUpperCase();
    var fy = dr;
    if (fy.indexOf("=" + fx + ";") > -1) {
      var fw = fy.indexOf("=" + fx + ";");
      var fz = fy.lastIndexOf(";", fw);
      return fy.substring(fz + 1, fw)
    }
    return fx
  };
  function br() {
  }
  
  br.hasSymbolsStartWith = function (fx) {
    var fw = D;
    return fw.indexOf("|" + fx) > -1
  };
  br.hasSymbol = function (fx) {
    var fw = D;
    return fw.indexOf("|" + fx + "|") > -1
  };
  br.getUnicodeCharForCode = function (fw) {
    var fx = br.getUnicodeValueForCode(fw);
    if (fx == null) {
      return null
    }
    return ds.getCharFromHexCode(fx)
  };
  br.getUnicodeValueForCode = function (fy) {
    var fx = D;
    var fw = fx.indexOf("|" + fy + "|");
    if (fw == -1) {
      return null
    }
    var fz = fx.lastIndexOf("|", fw - 1);
    return fx.substring(fz + 1, fw)
  };
  br.getCodeFromUnicodeChar = function (fy) {
    if (fy.length < 1) {
      return ""
    }
    var fw = fy.charCodeAt(0);
    var fx = ej.getHexCodeFromInt(fw).toUpperCase();
    return br.getCodeFromUnicodeValue(fx)
  };
  br.getCodeFromUnicodeValue = function (fx) {
    while (fx.indexOf("0") == 0) {
      fx = fx.substring(1, fx.length)
    }
    if (dz.size() == 0) {
      var fw = ai.split(",");
      var fB = fj.split(",");
      for (var fA = 0; fA < fw.length; fA++) {
        var fD = bB.getUnicode(fw[fA]);
        dz.add(fD);
        aZ.add(fB[fA])
      }
    }
    for (var fA = 0; fA < dz.size(); fA++) {
      if (fx == dz.get(fA)) {
        return "\\" + aZ.get(fA)
      }
    }
    var fz = D;
    var fy = fz.indexOf("|" + fx + "|");
    if (fy == -1) {
      return ""
    }
    fy = fy + fx.length + 2;
    var fC = fz.indexOf("|", fy);
    return fz.substring(fy, fC)
  };
  br.isBrace = function (fy) {
    if (fy == null || fy.length > 1) {
      return false
    }
    var fw = fy.charCodeAt(0);
    var fx = ej.getHexCodeFromInt(fw).toUpperCase();
    if (("23DF" == fx) || ("FE38" == fx)) {
      return true
    }
    if (("23DE" == fx) || ("FE37" == fx)) {
      return true
    }
    return false
  };
  br.isBracket = function (fw) {
    if (fw == null || fw.length < 1) {
      return false
    }
    if (fw == "\\tbrk") {
      return true
    }
    if (fw == "\\bbrk") {
      return true
    }
    return false
  };
  br.isVector = function (fx) {
    if (fx == null || fx.length < 1) {
      return false
    }
    if (fx == "\\to") {
      return true
    }
    var fw = fx.charCodeAt(0);
    if (fw == 8594) {
      return true
    }
    return false
  };
  br.isDot = function (fw) {
    if (fw == null || fw.length < 1) {
      return false
    }
    if (fw == ".") {
      return true
    }
    return false
  };
  br.convToEntities = function (fB) {
    if (fB == null) {
      return ""
    }
    var fA = new cE("");
    for (var fy = 0; fy < fB.length; fy++) {
      var fx = fB.charAt(fy);
      var fw = fB.charCodeAt(fy);
      if (fw == 160) {
        fw = 32;
        fx = " "
      }
      if (fw == 8739) {
        fA.append(fx + "");
        continue
      }
      if (fw > 127) {
        var fz = br.getCodeFromUnicodeChar(fx + "");
        if (fz.length > 0) {
          fA.append(fz)
        } else {
          fz = bB.getFirstCodeForNumber(fw);
          if (fz.length > 0) {
            fA.append("\\" + fz)
          } else {
            fA.append(fx + "")
          }
        }
      } else {
        fA.append(fx + "")
      }
    }
    return fA.toString()
  };
  function bB() {
  }
  
  bB.getCodesForNumber = function (fw) {
    var fx = ej.getHexCodeFromInt(fw).toUpperCase();
    return bB.getCodesForUnicode(fx)
  };
  bB.getFirstCodeForNumber = function (fw) {
    var fx = bB.getCodesForNumber(fw);
    if (fx.size() == 0) {
      return ""
    }
    return fx.get(0)
  };
  bB.getFirstCodeForUnicode = function (fw) {
    var fx = bB.getCodesForUnicode(fw);
    if (fx.size() == 0) {
      return ""
    }
    return fx.get(0)
  };
  bB.changeCharForCode = function (fx) {
    var fw = "";
    if (fx.indexOf("&#x") == 0 && (fx.indexOf(";") == (fx.length - 1))) {
      fx = fx.substring(3, fx.length - 1);
      fw = ds.getCharFromHexCode(fx)
    } else {
      if (fx.indexOf("&#") == 0 && (fx.indexOf(";") == (fx.length - 1))) {
        fx = fx.substring(2, fx.length - 1);
        fw = ds.getCharFromIntCode(fx)
      } else {
        if (fx.indexOf("&") == 0 && fx.indexOf(";") == (fx.length - 1)) {
          fw = bB.getChar(fx.substring(1, fx.length - 1))
        }
      }
    }
    fw = dt.changeCharsOver10000(fw);
    return fw
  };
  bB.convertToChars = function (fw) {
    if (fw == null || fw.length == 0) {
      return fw
    }
    fw = bB.replaceEntitiesAndHexCode(fw, "");
    fw = bB.replaceIEBug(fw);
    fw = dt.changeCharsOver10000(fw);
    fw = bB.replaceDubleChar(fw);
    fw = bB.collapsingWhitespace(fw);
    return fw
  };
  bB.convToEntities = function (fB) {
    if (fB == null) {
      return ""
    }
    var fA = new cE("");
    for (var fy = 0; fy < fB.length; fy++) {
      var fx = fB.charAt(fy);
      var fw = fB.charCodeAt(fy);
      if (fw > 127) {
        var fz = bB.getFirstCodeForNumber(fw);
        if (fz.length > 0) {
          fA.append("&" + fz + ";")
        } else {
          fA.append(fx + "")
        }
      } else {
        fA.append(fx + "")
      }
    }
    return fA.toString()
  };
  bB.convToUnicode = function (fB) {
    if (fB == null) {
      return ""
    }
    var fA = new cE("");
    for (var fy = 0; fy < fB.length; fy++) {
      var fx = fB.charAt(fy);
      var fw = fB.charCodeAt(fy);
      if (fw > 127) {
        var fz = ds.getHexCodeFromChar(fx + "");
        fz = fz.toUpperCase();
        fA.append("&#x" + fz + ";")
      } else {
        fA.append(fx + "")
      }
    }
    return fA.toString()
  };
  bB.convertToCharsExcept = function (fx, fw) {
    if (fx == null || fx.length == 0) {
      return fx
    }
    fx = bB.replaceEntitiesAndHexCode(fx, fw);
    fx = bB.replaceIEBug(fx);
    fx = dt.changeCharsOver10000(fx);
    fx = bB.replaceDubleChar(fx);
    fx = bB.collapsingWhitespace(fx);
    fx = bB.replaceExceptCodes(fx, fw);
    return fx
  };
  bB.replaceExceptCodes = function (fA, fw) {
    var fx = fw.split(",");
    for (var fz = 0; fz < fx.length; fz++) {
      if (fx[fz].length > 0) {
        var fy = bB.changeCharForCode(fx[fz]);
        if (fy.length > 0) {
          fA = fu.replace(fA, fx[fz], fy)
        }
      }
    }
    return fA
  };
  bB.getUnicode = function (fz) {
    if (fz == null || fz == "") {
      return ""
    }
    var fw = "";
    var fy = fh;
    var fx = fy.indexOf("=" + fz + ";");
    if (fx > -1) {
      var fD = fy.lastIndexOf(";", fx);
      var fC = fy.indexOf("=", fD);
      fw = fy.substring(fD + 1, fC)
    } else {
      fx = fy.indexOf("=" + fz + "=");
      if (fx > -1) {
        var fB = fy.lastIndexOf(";", fx);
        var fA = fy.indexOf("=", fB);
        fw = fy.substring(fB + 1, fA)
      }
    }
    if (fw == "") {
      return ""
    }
    return fw
  };
  bB.getChar = function (fx) {
    var fw = bB.getUnicode(fx);
    if (fw == "") {
      return ""
    }
    return ds.getCharFromHexCode(fw)
  };
  bB.getCodesForUnicode = function (fw) {
    var fB = new aT();
    if (fw == "") {
      return fB
    }
    while (fw.indexOf("0") == 0) {
      fw = fw.substring(1, fw.length)
    }
    fw = fw.toUpperCase();
    if (fw == "20D7") {
      fw = "2192"
    } else {
      if (fw == "8407") {
        fw = "8594"
      }
    }
    if (fw.length == 4 && fw.substring(0, 1) == "D") {
      fw = "1" + fw
    }
    var fA = fh;
    var fy = fA.indexOf(";" + fw + "=");
    if (fy > -1) {
      fy = fy + 2 + fw.length;
      var fx = fA.substring(fy, fA.indexOf(";", fy)).split("=");
      for (var fz = 0; fz < fx.length; fz++) {
        fB.add(fx[fz])
      }
    }
    return fB
  };
  bB.collapsingWhitespace = function (fw) {
    fw = fu.replace(fw, ds.getCharFromHexCode("2003"), " ");
    fw = fu.replace(fw, "\t", " ");
    fw = fu.replace(fw, "\n", " ");
    fw = fu.replace(fw, "\r", " ");
    while (fw.indexOf("  ") > -1) {
      fw = fu.replace(fw, "  ", " ")
    }
    fw = fu.trim(fw);
    fw = fu.replace(fw, ds.getCharFromHexCode("A0"), " ");
    fw = fu.replace(fw, ds.getCharFromHexCode("FFA0"), " ");
    return fw
  };
  bB.getParentOperator = function (fE) {
    if (fE == null || fE.length != 4 || fE.indexOf("E") != 0) {
      return null
    }
    var fx = S;
    if (fx.indexOf("=" + fE + ";") > -1) {
      return bB.getParentForDoubleChars(fE, fx)
    }
    var fD = b6;
    if (fD.indexOf("=" + fE + ";") > -1) {
      return bB.getParentForDoubleChars(fE, fD)
    }
    var fC = b4;
    if (fC.indexOf("=" + fE + ";") > -1) {
      return bB.getParentForDoubleChars(fE, fC)
    }
    var fz = bW;
    if (fz.indexOf("=" + fE + ";") > -1) {
      return bB.getParentForDoubleChars(fE, fz)
    }
    var fy = d2;
    if (fy.indexOf("=" + fE + ";") > -1) {
      return bB.getParentForDoubleChars(fE, fy)
    }
    var fw = ff;
    if (fw.indexOf("=" + fE + ";") > -1) {
      return bB.getParentForDoubleChars(fE, fw)
    }
    var fB = eV;
    if (fB.indexOf("=" + fE + ";") > -1) {
      return bB.getParentForDoubleChars(fE, fB)
    }
    var fA = dl;
    if (fA.indexOf("=" + fE + ";") > -1) {
      return bB.getParentForDoubleChars(fE, fA)
    }
    return null
  };
  bB.getParentForDoubleChars = function (fy, fw) {
    var fx = fw.indexOf("=" + fy + ";");
    var fz = fw.lastIndexOf(";", fx);
    return fw.substring(fz + 1, fx)
  };
  bB.replaceEntitiesAndHexCode = function (fA, fw) {
    var fx = -1;
    while (fA.indexOf("&", fx) > -1) {
      fx = fA.indexOf("&", fx);
      var fB = fA.indexOf(";", fx);
      if (fB > -1) {
        var fz = fA.substring(fx, fB + 1);
        var fy = bB.changeCharForCode(fz);
        if (fy.length > 0 && (fw.indexOf("," + fz + ",") == -1)) {
          fA = fA.substring(0, fx) + fy + fA.substring(fB + 1)
        } else {
          fx++
        }
      } else {
        fx++
      }
    }
    return fA
  };
  bB.hasSymbolsStartWith = function (fw) {
    return fh.indexOf("=" + fw) > -1
  };
  bB.hasSymbol = function (fw) {
    if (fh.indexOf("=" + fw + ";") > -1) {
      return true
    }
    return fh.indexOf("=" + fw + "=") > -1
  };
  bB.replaceIEBug = function (fx) {
    for (var fw = 0; fw < fx.length; fw++) {
      fx = bB.replaceIEBugTag(fx, fw, 247, "ontimes;", "&divide");
      fx = bB.replaceIEBugTag(fx, fw, 62, "cc;", "&gt");
      fx = bB.replaceIEBugTag(fx, fw, 62, "cir;", "&gt");
      fx = bB.replaceIEBugTag(fx, fw, 62, "dot;", "&gt");
      fx = bB.replaceIEBugTag(fx, fw, 62, "lPar;", "&gt");
      fx = bB.replaceIEBugTag(fx, fw, 62, "quest;", "&gt");
      fx = bB.replaceIEBugTag(fx, fw, 62, "rapprox;", "&gt");
      fx = bB.replaceIEBugTag(fx, fw, 62, "rarr;", "&gt");
      fx = bB.replaceIEBugTag(fx, fw, 62, "rdot;", "&gt");
      fx = bB.replaceIEBugTag(fx, fw, 62, "reqless;", "&gt");
      fx = bB.replaceIEBugTag(fx, fw, 62, "reqqless;", "&gt");
      fx = bB.replaceIEBugTag(fx, fw, 62, "rless;", "&gt");
      fx = bB.replaceIEBugTag(fx, fw, 62, "rsim;", "&gt");
      fx = bB.replaceIEBugTag(fx, fw, 60, "cc;", "&lt");
      fx = bB.replaceIEBugTag(fx, fw, 60, "cir;", "&lt");
      fx = bB.replaceIEBugTag(fx, fw, 60, "dot;", "&lt");
      fx = bB.replaceIEBugTag(fx, fw, 60, "hree;", "&lt");
      fx = bB.replaceIEBugTag(fx, fw, 60, "imes;", "&lt");
      fx = bB.replaceIEBugTag(fx, fw, 60, "larr;", "&lt");
      fx = bB.replaceIEBugTag(fx, fw, 60, "quest;", "&lt");
      fx = bB.replaceIEBugTag(fx, fw, 60, "ri;", "&lt");
      fx = bB.replaceIEBugTag(fx, fw, 60, "rie;", "&lt");
      fx = bB.replaceIEBugTag(fx, fw, 60, "rif;", "&lt");
      fx = bB.replaceIEBugTag(fx, fw, 60, "rPar;", "&lt");
      fx = bB.replaceIEBugTag(fx, fw, 172, "indot;", "&not");
      fx = bB.replaceIEBugTag(fx, fw, 172, "inE;", "&not");
      fx = bB.replaceIEBugTag(fx, fw, 172, "inva;", "&not");
      fx = bB.replaceIEBugTag(fx, fw, 172, "invb;", "&not");
      fx = bB.replaceIEBugTag(fx, fw, 172, "invc;", "&not");
      fx = bB.replaceIEBugTag(fx, fw, 172, "niva;", "&not");
      fx = bB.replaceIEBugTag(fx, fw, 172, "nivb;", "&not");
      fx = bB.replaceIEBugTag(fx, fw, 172, "nivc;", "&not");
      fx = bB.replaceIEBugTag(fx, fw, 172, "ni;", "&not");
      fx = bB.replaceIEBugTag(fx, fw, 182, "llel;", "&para");
      fx = bB.replaceIEBugTag(fx, fw, 215, "b;", "&times");
      fx = bB.replaceIEBugTag(fx, fw, 215, "bar;", "&times");
      fx = bB.replaceIEBugTag(fx, fw, 215, "d;", "&times");
      fx = bB.replaceIEBugTag(fx, fw, 162, "erdot;", "&cent");
      fx = bB.replaceIEBugTag(fx, fw, 169, "sr;", "&copy")
    }
    return fx
  };
  bB.replaceIEBugTag = function (fy, fx, fA, fB, fz) {
    var fw = fy.charCodeAt(fx);
    if (!(fw == fA)) {
      return fy
    }
    if (fy.length < (fx + 1 + fB.length)) {
      return fy
    }
    if (fy.substring(fx + 1, fx + 1 + fB.length) == fB) {
      return fy.substring(0, fx) + fz + fB + fy.substring(fx + 1 + fB.length, fy.length)
    }
    return fy
  };
  bB.replaceDubleChar = function (fw) {
    if (fw == null || fw.length < 2) {
      return fw
    }
    fw = bB.changeDoubleCharsFor(fw, "6A", S);
    fw = bB.changeDoubleCharsFor(fw, "331", b6);
    fw = bB.changeDoubleCharsFor(fw, "333", b4);
    fw = bB.changeDoubleCharsFor(fw, "338", bW);
    fw = bB.changeDoubleCharsFor(fw, "200A", d2);
    fw = bB.changeDoubleCharsFor(fw, "20D2", ff);
    fw = bB.changeDoubleCharsFor(fw, "20E5", eV);
    fw = bB.changeDoubleCharsFor(fw, "FE00", dl);
    return fw
  };
  bB.changeDoubleCharsFor = function (fD, fz, fC) {
    var fB = ds.getCharFromHexCode(fz);
    var fy = -1;
    while ((fy = fD.indexOf(fB, fy)) > -1) {
      if (fy > 0) {
        var fw = ds.getHexCodeFromText(fD, fy - 1);
        if (bB.existDoubleCode(fC, fw)) {
          var fA = bB.getDoubleCode(fC, fw);
          var fx = ds.getCharFromHexCode(fA);
          fD = fD.substring(0, fy - 1) + fx + fD.substring(fy + 1, fD.length);
          fy--
        }
      }
      fy++
    }
    return fD
  };
  bB.existDoubleCode = function (fw, fx) {
    return fw.indexOf(";" + fx + "=") > -1
  };
  bB.getDoubleCode = function (fx, fy) {
    var fz = ";" + fy + "=";
    var fw = fx.indexOf(fz);
    return fx.substring(fw + fz.length, fx.indexOf(";", fw + fz.length))
  };
  function dt() {
  }
  
  dt.changeCharsOver10000 = function (fz) {
    var fy = "";
    for (var fx = 0; fx < fz.length; fx++) {
      var fw = fz.charCodeAt(fx);
      if (fw > 65536) {
        fw = fw - 65536
      }
      fy = fy + ej.getCharFromInt(fw)
    }
    return fy
  };
  dt.changeChar = function (fx) {
    var fw = 0;
    if (fx >= 54272 && fx <= 54297) {
      fw = (65 + fx - 54272)
    }
    if (fx >= 54298 && fx <= 54323) {
      fw = (97 + fx - 54298)
    }
    if (fx >= 55246 && fx <= 55255) {
      fw = (48 + fx - 55246)
    }
    if ((fx >= 54272 && fx <= 54323) || (fx >= 55246 && fx <= 55255)) {
      return "bold:" + ej.getCharFromInt(fw)
    }
    if (fx >= 54324 && fx <= 54349) {
      fw = (65 + fx - 54324)
    }
    if (fx >= 54350 && fx <= 54375) {
      fw = (97 + fx - 54350)
    }
    if ((fx >= 54324 && fx <= 54375)) {
      return "italic:" + ej.getCharFromInt(fw)
    }
    if (fx >= 54376 && fx <= 54401) {
      fw = (65 + fx - 54376)
    }
    if (fx >= 54402 && fx <= 54427) {
      fw = (97 + fx - 54402)
    }
    if ((fx >= 54376 && fx <= 54427)) {
      return "bold-italic:" + ej.getCharFromInt(fw)
    }
    if (fx >= 54428 && fx <= 54453) {
      fw = (65 + fx - 54428)
    }
    if (fx >= 54454 && fx <= 54479) {
      fw = (97 + fx - 54454)
    }
    if (fx >= 54428 && fx <= 54479) {
      return "script:" + ej.getCharFromInt(fw)
    }
    if (fx >= 54480 && fx <= 54505) {
      fw = (65 + fx - 54480)
    }
    if (fx >= 54506 && fx <= 54531) {
      fw = (97 + fx - 54506)
    }
    if (fx >= 54480 && fx <= 54531) {
      return "bold-script:" + ej.getCharFromInt(fw)
    }
    if (fx >= 54532 && fx <= 54557) {
      fw = (65 + fx - 54532)
    }
    if (fx >= 54558 && fx <= 54583) {
      fw = (97 + fx - 54558)
    }
    if ((fx >= 54532 && fx <= 54583)) {
      return "fraktur:" + ej.getCharFromInt(fw)
    }
    if (fx >= 54584 && fx <= 54609) {
      fw = (65 + fx - 54584)
    }
    if (fx >= 54610 && fx <= 54635) {
      fw = (97 + fx - 54610)
    }
    if (fx >= 55256 && fx <= 55265) {
      fw = (48 + fx - 55256)
    }
    if ((fx >= 54584 && fx <= 54635) || (fx >= 55256 && fx <= 55265)) {
      return "double-struck:" + ej.getCharFromInt(fw)
    }
    if (fx >= 54636 && fx <= 54661) {
      fw = (65 + fx - 54636)
    }
    if (fx >= 54662 && fx <= 54687) {
      fw = (97 + fx - 54662)
    }
    if ((fx >= 54636 && fx <= 54687)) {
      return "bold-fraktur:" + ej.getCharFromInt(fw)
    }
    if (fx >= 54688 && fx <= 54713) {
      fw = (65 + fx - 54688)
    }
    if (fx >= 54714 && fx <= 54739) {
      fw = (97 + fx - 54714)
    }
    if (fx >= 55266 && fx <= 55275) {
      fw = (48 + fx - 55266)
    }
    if ((fx >= 54688 && fx <= 54739) || (fx >= 55266 && fx <= 55275)) {
      return "sans-serif:" + ej.getCharFromInt(fw)
    }
    if (fx >= 54740 && fx <= 54765) {
      fw = (65 + fx - 54740)
    }
    if (fx >= 54766 && fx <= 54791) {
      fw = (97 + fx - 54766)
    }
    if (fx >= 55276 && fx <= 55285) {
      fw = (48 + fx - 55276)
    }
    if ((fx >= 54740 && fx <= 54791) || (fx >= 55276 && fx <= 55285)) {
      return "bold-sans-serif:" + ej.getCharFromInt(fw)
    }
    if (fx >= 54792 && fx <= 54817) {
      fw = (65 + fx - 54792)
    }
    if (fx >= 54818 && fx <= 54843) {
      fw = (97 + fx - 54818)
    }
    if ((fx >= 54792 && fx <= 54843)) {
      return "sans-serif-italic:" + ej.getCharFromInt(fw)
    }
    if (fx >= 54844 && fx <= 54869) {
      fw = (65 + fx - 54844)
    }
    if (fx >= 54870 && fx <= 54895) {
      fw = (97 + fx - 54870)
    }
    if ((fx >= 54844 && fx <= 54895)) {
      return "sans-serif-bold-italic:" + ej.getCharFromInt(fw)
    }
    if (fx >= 54896 && fx <= 54921) {
      fw = (65 + fx - 54896)
    }
    if (fx >= 54922 && fx <= 54947) {
      fw = (97 + fx - 54922)
    }
    if (fx >= 55286 && fx <= 55295) {
      fw = (48 + fx - 55286)
    }
    if ((fx >= 54896 && fx <= 54947) || (fx >= 55286 && fx <= 55295)) {
      return "monospace:" + ej.getCharFromInt(fw)
    }
    if (fx >= 54952 && fx <= 54976 && fx != 54969) {
      fw = (913 + fx - 54952)
    }
    if (fx == 54969) {
      fw = (1012)
    }
    if (fx == 54977) {
      fw = (8711)
    }
    if (fx >= 54978 && fx <= 55002) {
      fw = (945 + fx - 54978)
    }
    if (fx == 55003) {
      fw = (8706)
    }
    if (fx == 55004) {
      fw = (8714)
    }
    if (fx == 55005) {
      fw = (977)
    }
    if (fx == 55006) {
      fw = (1008)
    }
    if (fx == 55007) {
      fw = (981)
    }
    if (fx == 55008) {
      fw = (1009)
    }
    if (fx == 55009) {
      fw = (982)
    }
    if (fx >= 54952 && fx <= 55009) {
      return "bold:" + ej.getCharFromInt(fw)
    }
    if (fx >= 55010 && fx <= 55034 && fx != 55027) {
      fw = (913 + fx - 55010)
    }
    if (fx == 55027) {
      fw = (1012)
    }
    if (fx == 55035) {
      fw = (8711)
    }
    if (fx >= 55036 && fx <= 55060) {
      fw = (945 + fx - 55036)
    }
    if (fx == 55061) {
      fw = (8706)
    }
    if (fx == 55062) {
      fw = (8714)
    }
    if (fx == 55063) {
      fw = (977)
    }
    if (fx == 55064) {
      fw = (1008)
    }
    if (fx == 55065) {
      fw = (981)
    }
    if (fx == 55066) {
      fw = (1009)
    }
    if (fx == 55067) {
      fw = (982)
    }
    if (fx >= 55010 && fx <= 55067) {
      return "italic:" + ej.getCharFromInt(fw)
    }
    if (fx >= 55068 && fx <= 55092 && fx != 55085) {
      fw = (913 + fx - 55068)
    }
    if (fx == 55085) {
      fw = (1012)
    }
    if (fx == 55093) {
      fw = (8711)
    }
    if (fx >= 55094 && fx <= 55118) {
      fw = (945 + fx - 55094)
    }
    if (fx == 55119) {
      fw = (8706)
    }
    if (fx == 55120) {
      fw = (8714)
    }
    if (fx == 55121) {
      fw = (977)
    }
    if (fx == 55122) {
      fw = (1008)
    }
    if (fx == 55123) {
      fw = (981)
    }
    if (fx == 55124) {
      fw = (1009)
    }
    if (fx == 55125) {
      fw = (982)
    }
    if (fx >= 55068 && fx <= 55125) {
      return "bold-italic:" + ej.getCharFromInt(fw)
    }
    if (fx >= 55126 && fx <= 55150 && fx != 55143) {
      fw = (913 + fx - 55126)
    }
    if (fx == 55143) {
      fw = (1012)
    }
    if (fx == 55151) {
      fw = (8711)
    }
    if (fx >= 55152 && fx <= 55176) {
      fw = (945 + fx - 55152)
    }
    if (fx == 55177) {
      fw = (8706)
    }
    if (fx == 55178) {
      fw = (8714)
    }
    if (fx == 55179) {
      fw = (977)
    }
    if (fx == 55180) {
      fw = (1008)
    }
    if (fx == 55181) {
      fw = (981)
    }
    if (fx == 55182) {
      fw = (1009)
    }
    if (fx == 55183) {
      fw = (982)
    }
    if (fx >= 55126 && fx <= 55183) {
      return "bold-sans-serif:" + ej.getCharFromInt(fw)
    }
    if (fx >= 55184 && fx <= 55208 && fx != 55201) {
      fw = (913 + fx - 55184)
    }
    if (fx == 55201) {
      fw = (1012)
    }
    if (fx == 55209) {
      fw = (8711)
    }
    if (fx >= 55210 && fx <= 55234) {
      fw = (945 + fx - 55210)
    }
    if (fx == 55235) {
      fw = (8706)
    }
    if (fx == 55236) {
      fw = (8714)
    }
    if (fx == 55237) {
      fw = (977)
    }
    if (fx == 55238) {
      fw = (1008)
    }
    if (fx == 55239) {
      fw = (981)
    }
    if (fx == 55240) {
      fw = (1009)
    }
    if (fx == 55241) {
      fw = (982)
    }
    if (fx >= 55184 && fx <= 55241) {
      return "sans-serif-bold-italic:" + ej.getCharFromInt(fw)
    }
    return null
  };
  dt.changeKnownChars = function (fA) {
    var fz = "";
    for (var fy = 0; fy < fA.length; fy++) {
      var fw = fA.charCodeAt(fy);
      if (fw == 55349) {
        fy = fy + 1;
        fw = fA.charCodeAt(fy);
        fw = fw - 2048
      }
      if (fw >= 54272 && fw <= 55295) {
        fz = fz + fw
      } else {
        var fx = 0;
        if (fw >= 65313 && fw <= 65338) {
          fx = (65 + fw - 65313)
        } else {
          if (fw >= 65345 && fw <= 65370) {
            fx = (97 + fw - 65345)
          } else {
            if (fw >= 65296 && fw <= 65305) {
              fx = (48 + fw - 65296)
            }
          }
        }
        if (fx == 0) {
          fz = fz + ej.getCharFromInt(fw)
        } else {
          fz = fz + ej.getCharFromInt(fx)
        }
      }
    }
    return fz
  };
  function cG() {
  }
  
  cG.replacePreferedValue = function (fD) {
    var fA = -1;
    while (fD.indexOf("&", fA) > -1) {
      fA = fD.indexOf("&", fA);
      var fC = fD.indexOf(";", fA);
      if (fC > -1) {
        var fw = fD.substring(fA, fC + 1);
        var fE = cG.changePreferedCode(fw);
        fD = fD.substring(0, fA) + fE + fD.substring(fC + 1);
        fA = fC
      } else {
        fA++
      }
    }
    var fz = "";
    for (var fy = 0; fy < fD.length; fy++) {
      var fx = fD.charCodeAt(fy);
      if (fx == 8722) {
        fx = 45
      }
      if (fx == 774) {
        fx = 9181
      }
      if (fx == 8193) {
        fx = 32
      }
      if (fx == 771) {
        fx = 126
      }
      var fB = ej.getCharFromInt(fx);
      fz = fz + fB
    }
    return fz
  };
  cG.changePreferedCode = function (fw) {
    if (fw == "&minus;") {
      return "-"
    }
    if (fw == "&mid;") {
      return "|"
    }
    if (fw == "&emsp13;") {
      return " "
    }
    if (fw == "&par;") {
      return "&Verbar;"
    }
    if (fw == "&#65279;") {
      return ""
    }
    return fw
  };
  function e8() {
  }
  
  e8.displayLikeText = function (fy) {
    if (fy == null || fy.length == 0) {
      return true
    }
    var fx = fy.charCodeAt(0);
    if (fx < 127) {
      return true
    }
    var fw = ds.getHexCodeFromChar(fy);
    return c3.indexOf(";" + fw + ";") > -1
  };
  e8.getListOperators = function () {
    var fB = new aT();
    var fw = -1;
    var fx = J;
    while ((fw = fx.indexOf("=", fw)) > -1) {
      var fC = fx.lastIndexOf(";", fw);
      var fA = fx.substring(fC + 1, fw);
      var fz = e8.getDefaultStyleForOperator();
      fz.setOperator(fA);
      var fy = e8.getSettingsFor(fA);
      fz.openFromString(fy);
      fB.add(fz);
      fw = fw + 1
    }
    return fB
  };
  e8.getAllOperators = function () {
    var fA = new cE("");
    fA.append(e2);
    var fw = -1;
    var fx = J;
    while ((fw = fx.indexOf("=", fw)) > -1) {
      var fz = fx.lastIndexOf(";", fw);
      var fy = fx.substring(fz + 1, fw);
      if (fy.indexOf(" ") == -1) {
        fA.append(ds.getCharFromHexCode(fy) + ";")
      }
      fw = fw + 1
    }
    return fA.toString()
  };
  e8.getStyleForOperator = function (fA) {
    var fy = e8.getDefaultStyleForOperator();
    var fx = "";
    if (e8.isMultiCharOperator(fA)) {
      for (var fw = 0; fw < fA.length; fw++) {
        fx = fx + " " + ds.getHexCodeFromText(fA, fw)
      }
      fx = fu.trim(fx)
    } else {
      if (fA.length == 1) {
        fx = ds.getHexCodeFromText(fA, 0)
      }
    }
    if (fx.length > 0) {
      var fz = e8.getSettingsFor(fx);
      if (fz == null) {
        fx = bB.getParentOperator(fx);
        if (fx != null) {
          fz = e8.getSettingsFor(fx)
        }
      }
      if (fz != null) {
        fy.openFromString(fz)
      }
    }
    fy.setIntegral(e8.isIntegral(fA));
    fy.setInvisible(e8.isInvisible(fA));
    fy.setAxisOperator(e8.isAxisOperator(fA));
    return fy
  };
  e8.isAxisOperator = function (fw) {
    if (fw == null) {
      return false
    }
    if (fw.indexOf("+") > -1) {
      return true
    }
    if (fw.indexOf("-") > -1) {
      return true
    }
    return false
  };
  e8.getLengthForOperatorSpace = function (fy, fw) {
    var fx = "0";
    if (fy == 1) {
      fx = "0.0555556em"
    } else {
      if (fy == 2) {
        fx = "0.111111em"
      } else {
        if (fy == 3) {
          fx = "0.166667em"
        } else {
          if (fy == 4) {
            fx = "0.222222em"
          } else {
            if (fy == 5) {
              fx = "0.277778em"
            } else {
              if (fy == 6) {
                fx = "0.333333em"
              } else {
                if (fy == 7) {
                  fx = "0.388889em"
                }
              }
            }
          }
        }
      }
    }
    return cT.getLength(fx, fw)
  };
  e8.getDefaultStyleForOperator = function () {
    var fw = new dn();
    fw.setForm("infix");
    return fw
  };
  e8.isIntegral = function (fw) {
    if (fw == null || fw.length == 0 || fw.length > 1) {
      return false
    }
    var fy = ds.getHexCodeFromChar(fw);
    if (fy.length != 4) {
      return false
    }
    var fx = bc;
    return fx.indexOf(";" + fy + ";") > -1
  };
  e8.isOperator = function (fw) {
    if (fw == null || fw.length == 0 || fw.length > 1) {
      return false
    }
    var fx = ds.getHexCodeFromChar(fw);
    if (fx.length != 4) {
      return false
    }
    return e8.getSettingsFor(fx) != null
  };
  e8.isInvisible = function (fw) {
    if (fw == null || fw.length == 0 || fw.length > 1) {
      return false
    }
    var fy = ds.getHexCodeFromChar(fw);
    if (fy.length != 4) {
      return false
    }
    var fx = dX;
    return fx.indexOf(";" + fy + ";") > -1
  };
  e8.getSettingsFor = function (fx) {
    var fz = ";" + fx + "=";
    var fy = J;
    var fw = fy.indexOf(fz);
    if (fw > -1) {
      var fA = fy.indexOf(";", fw + fz.length);
      return fy.substring(fw + fz.length, fA)
    }
    return null
  };
  e8.isMultiCharOperator = function (fx) {
    var fw = e2;
    return fw.indexOf(";" + fx + ";") > -1
  };
  e8.getWidth = function (fB, fx) {
    var fy = e8.getTokensForChar(fB);
    if (fy == null) {
      return -1
    }
    var fA = fy[2].split("/");
    var fz = ej.getDoubleValue(fA[0], 0);
    var fw = ej.getDoubleValue(fA[1], 0);
    return (fz / fw) * fx
  };
  e8.getHeight = function (fB, fy) {
    var fx = e8.getTokensForChar(fB);
    if (fx == null) {
      return -1
    }
    var fA = fx[2].split("/");
    var fz = ej.getDoubleValue(fA[0], 0);
    var fw = ej.getDoubleValue(fA[1], 0);
    return (fw / fz) * fy
  };
  e8.isHStretchy = function (fx) {
    var fw = e8.getTokensForChar(fx);
    if (fw == null) {
      return false
    }
    return fw[1].indexOf("SH") == 0 || fw[1].indexOf("SB") == 0
  };
  e8.isVStretchy = function (fx) {
    var fw = e8.getTokensForChar(fx);
    if (fw == null) {
      return false
    }
    return fw[1].indexOf("SV") == 0 || fw[1].indexOf("SB") == 0
  };
  e8.hasImplementation = function (fx) {
    if (fx == null || fx.length > 1) {
      return false
    }
    var fw = e8.getLine(fx);
    if (fw == null) {
      return false
    }
    return true
  };
  e8.getTokensForChar = function (fy) {
    if (fy == null || fy.length > 1) {
      return null
    }
    var fw = e8.getLine(fy);
    if (fw == null) {
      return null
    }
    var fx = fw.split(" ");
    if (fx[1].indexOf("sym") == 0 || fx[1] == "eq" || fx[1].indexOf("eqs") == 0) {
      fw = e8.getLineForUnicode(fx[2]);
      fx = fw.split(" ")
    }
    return fx
  };
  e8.getLine = function (fw) {
    return e8.getLineForUnicode(e8.getUnicode(fw))
  };
  e8.getUnicode = function (fy) {
    var fw = ds.getHexCodeFromChar(fy);
    fw = e8.replaceSimilar(fw);
    for (var fx = fw.length; fx < 4; fx++) {
      fw = "0" + fw
    }
    return fw
  };
  e8.replaceSimilar = function (fw) {
    if ("FE38" == fw) {
      return "23DF"
    }
    if ("FE37" == fw) {
      return "23DE"
    }
    return fw
  };
  e8.getLineForUnicode = function (fy) {
    var fx = -1;
    var fw = ao;
    if ((fx = fw.indexOf(";" + fy + " ")) > -1) {
      var fz = fw.indexOf(";", fx + 1);
      return fw.substring(fx, fz)
    }
    return null
  };
  function cT() {
  }
  
  cT.getPxCm = function () {
    return b2
  };
  cT.setPxCm = function (fw) {
    b2 = fw
  };
  cT.isLength = function (fw) {
    return cT.getLength(fw, 100) > 0
  };
  cT.getLineThickness = function (fy, fx) {
    var fw = 0;
    if ("thin" == fy) {
      fw = cT.getLength("0.035em", fx)
    } else {
      if ("medium" == fy) {
        fw = cT.getLength("0.09em", fx)
      } else {
        if ("thick" == fy) {
          fw = cT.getLength("0.18em", fx)
        } else {
          fw = cT.getLength(fy, fx)
        }
      }
    }
    if (fw < 1) {
      fw = 1
    }
    return fw
  };
  cT.getLength = function (fy, fw) {
    if (fy == null || fy == "") {
      return 0
    }
    if (fy == "small") {
      fy = "80%"
    } else {
      if (fy == "normal") {
        fy = "100%"
      } else {
        if (fy == "big") {
          fy = "120%"
        } else {
          if (fy == "veryverythin" || fy == "veryverythinmathspace") {
            fy = "0.0555556em"
          } else {
            if (fy == "tight" || fy == "verythin" || fy == "verythinmathspace") {
              fy = "0.111111em"
            } else {
              if (fy == "thin" || fy == "thinmathspace") {
                fy = "0.166667em"
              } else {
                if (fy == "medium" || fy == "mediummathspace") {
                  fy = "0.222222em"
                } else {
                  if (fy == "thick" || fy == "thickmathspace") {
                    fy = "0.277778em"
                  } else {
                    if (fy == "loose" || fy == "verythick" || fy == "verythickmathspace") {
                      fy = "0.333333em"
                    } else {
                      if (fy == "veryverythick" || fy == "veryverythickmathspace") {
                        fy = "0.388889em"
                      } else {
                        if (fy == "negativeveryverythin" || fy == "negativeveryverythinmathspace") {
                          fy = "-0.0555556em"
                        } else {
                          if (fy == "negativeverythin" || fy == "negativeverythinmathspace") {
                            fy = "-0.111111em"
                          } else {
                            if (fy == "negativethin" || fy == "negativethinmathspace") {
                              fy = "-0.166667em"
                            } else {
                              if (fy == "negativemedium" || fy == "negativemediummathspace") {
                                fy = "-0.222222em"
                              } else {
                                if (fy == "negativethick" || fy == "negativethickmathspace") {
                                  fy = "-0.277778em"
                                } else {
                                  if (fy == "negativeverythick" || fy == "negativeverythickmathspace") {
                                    fy = "-0.333333em"
                                  } else {
                                    if (fy == "negativeveryverythick" || fy == "negativeveryverythickmathspace") {
                                      fy = "-0.388889em"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    fy = fy.toLowerCase();
    var fx = ej.getNumber(fy);
    if (ej.isNumber(fx)) {
      return fx
    }
    if (fy.indexOf("em") > -1) {
      return (cT.getNumberUnit(fy, "em") * fw * 0.7)
    } else {
      if (fy.indexOf("%") > -1) {
        return (cT.getNumberUnit(fy, "%") * fw) / 100
      } else {
        if (fy.indexOf("ex") > -1) {
          return (cT.getNumberUnit(fy, "ex") * fw * 0.35)
        } else {
          if (fy.indexOf("px") > -1) {
            return cT.getNumberUnit(fy, "px")
          } else {
            if (fy.indexOf("in") > -1) {
              return cT.getNumberUnit(fy, "in") * 2.54 * b2
            } else {
              if (fy.indexOf("cm") > -1) {
                return cT.getNumberUnit(fy, "cm") * b2
              } else {
                if (fy.indexOf("mm") > -1) {
                  return cT.getNumberUnit(fy, "mm") * b2 / 10
                } else {
                  if (fy.indexOf("pt") > -1) {
                    return cT.getNumberUnit(fy, "pt") * 2.54 * b2 / 72
                  } else {
                    if (fy.indexOf("pc") > -1) {
                      return cT.getNumberUnit(fy, "pc") * 254 * 12 / 72
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return 0
  };
  cT.hasUnits = function (fw) {
    if (fw.indexOf("em") > -1) {
      return true
    } else {
      if (fw.indexOf("%") > -1) {
        return true
      } else {
        if (fw.indexOf("ex") > -1) {
          return true
        } else {
          if (fw.indexOf("px") > -1) {
            return true
          } else {
            if (fw.indexOf("in") > -1) {
              return true
            } else {
              if (fw.indexOf("cm") > -1) {
                return true
              } else {
                if (fw.indexOf("mm") > -1) {
                  return true
                } else {
                  if (fw.indexOf("pt") > -1) {
                    return true
                  } else {
                    if (fw.indexOf("pc") > -1) {
                      return true
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return false
  };
  cT.getNumberUnit = function (fy, fw) {
    var fx = fy.substring(0, fy.indexOf(fw));
    return ej.getDoubleValue(fx, 0)
  };
  function ax() {
  }
  
  ax.main = function (fw) {
  };
  function e7(fw) {
    this.id = null;
    this.xref = null;
    this.href;
    this.parentBean = null;
    this.children = null;
    this.setAttributes = null;
    this.setAttributesValue = null;
    this.fixChildrenSize = false;
    this.parentBean = fw
  }
  
  e7.prototype.getId = function () {
    return this.id
  };
  e7.prototype.setId = function (fw) {
    this.id = fw
  };
  e7.prototype.addChild = function (fw) {
    if (this.children == null) {
      this.children = new aT()
    }
    fw.setParentBean(this);
    this.children.add(fw)
  };
  e7.prototype.addIndexChild = function (fw, fx) {
    if (this.children == null) {
      this.children = new aT()
    }
    fw.setParentBean(this);
    this.children.addTo(fx, fw)
  };
  e7.prototype.getChildren = function () {
    return this.children
  };
  e7.prototype.getBean = function (fw) {
    if (this.children == null) {
      return null
    }
    if (fw < 0 || fw > (this.children.size() - 1)) {
      return null
    }
    return this.children.get(fw)
  };
  e7.prototype.setChildren = function (fy) {
    this.children = fy;
    if (fy != null) {
      for (var fx = 0; fx < fy.size(); fx++) {
        var fw = fy.get(fx);
        fw.setParentBean(this)
      }
    }
  };
  e7.prototype.clearChildren = function () {
    if (this.children != null) {
      this.children.clear()
    }
  };
  e7.prototype.getParentBean = function () {
    return this.parentBean
  };
  e7.prototype.setParentBean = function (fw) {
    this.parentBean = fw
  };
  e7.prototype.hasAttributes = function () {
    if (setAttributes == null || this.setAttributes.size() == 0) {
      return false
    }
    return true
  };
  e7.prototype.clearAttributes = function () {
    this.setAttributes = null;
    this.setAttributesValue = null
  };
  e7.prototype.clearAttribute = function (fw) {
    if (fw == null) {
      return
    }
    if (this.setAttributes == null) {
      return
    }
    for (var fy = 0; fy < this.setAttributes.size(); fy++) {
      var fx = this.setAttributes.get(fy);
      if (fw == fx) {
        this.setAttributes.remove(fy);
        this.setAttributesValue.remove(fy);
        break
      }
    }
  };
  e7.prototype.setAttribute = function (fw, fx) {
    if (fw == null) {
      return
    }
    if (this.setAttributes == null) {
      this.setAttributes = new aT();
      this.setAttributesValue = new aT()
    }
    if (fx == null) {
      this.clearAttribute(fw);
      return
    }
    this.setAttributes.add(fw);
    this.setAttributesValue.add(fx)
  };
  e7.prototype.getAttribute = function (fw) {
    if (fw == null) {
      return null
    }
    if (this.setAttributes == null) {
      return null
    }
    for (var fy = 0; fy < this.setAttributes.size(); fy++) {
      var fx = this.setAttributes.get(fy);
      if (fw == fx) {
        var fz = this.setAttributesValue.get(fy);
        return fz
      }
    }
    return null
  };
  e7.prototype.getIntAttribute = function (fw, fy) {
    var fx = this.getAttribute(fw);
    return ej.getIntegerValue(fx, fy)
  };
  e7.prototype.getXref = function () {
    return this.xref
  };
  e7.prototype.setXref = function (fw) {
    this.xref = fw
  };
  e7.prototype.getHref = function () {
    return this.href
  };
  e7.prototype.setHref = function (fw) {
    this.href = fw
  };
  e7.prototype.copyAttributes = function (fw) {
    fw.setId("c" + this.getId());
    fw.setXref(this.xref);
    fw.setHref(this.href);
    fw.setParentBean(this.parentBean);
    if (this.setAttributes != null) {
      for (var fy = 0; fy < this.setAttributes.size(); fy++) {
        var fx = this.setAttributes.get(fy);
        var fz = this.setAttributesValue.get(fy);
        fw.setAttribute(fx, fz)
      }
    }
  };
  e7.prototype.setFixChildrenSize = function (fw) {
    this.fixChildrenSize = fw
  };
  e7.prototype.isFixChildrenSize = function () {
    return this.fixChildrenSize
  };
  function af(fx) {
    this.style = new du();
    this.cssstyle = new K();
    this.dynamicCreated = false;
    this.currentDefStyle;
    this.a = e7;
    this.a(fx);
    var fw = fx;
    if (fw != null && fw.getCurrentDefStyle() != null) {
      this.currentDefStyle = fw.getCurrentDefStyle().getCopy()
    } else {
      this.currentDefStyle = new aS()
    }
  }
  
  FMath_extend(af, e7);
  af.prototype.copyParentStyle = function (fB) {
    if (this.getAttribute("dir") != null) {
      this.style.setDir(this.getAttribute("dir"))
    } else {
      if (fB.getDir() != null) {
        this.style.setDir(fB.getDir())
      } else {
        this.style.setDir(this.currentDefStyle.getDir())
      }
    }
    if (this.getAttribute("mathvariant") == null && fB.getMathvariant() != null) {
      this.style.setMathvariant(fB.getMathvariant())
    } else {
      this.style.setMathvariant(this.getAttribute("mathvariant"))
    }
    if (this.style.getMathvariant() == null) {
      this.style.setMathvariant("normal")
    }
    if (this.getAttribute("fontweight") != null) {
      if (this.getAttribute("fontweight") == "bold") {
        this.style.setBold(true)
      } else {
        this.style.setBold(false)
      }
    }
    if (this.getAttribute("fontstyle") != null) {
      if (this.getAttribute("fontstyle") == "italic") {
        this.style.setItalic(true)
      } else {
        this.style.setItalic(false)
      }
    }
    if ("transparent" == this.getAttribute("mathcolor")) {
      this.clearAttribute("mathcolor")
    }
    if (this.getAttribute("mathcolor") != null) {
      this.style.setColor(this.getAttribute("mathcolor"))
    } else {
      if (fB.getColor() != null) {
        this.style.setColor(fB.getColor())
      }
    }
    var fA = aw.getColor(this.style.getColor(), 0);
    if (this.cssstyle.getBorder_color_bottom() == null) {
      this.cssstyle.setBorder_color_bottom(fA)
    }
    if (this.cssstyle.getBorder_color_left() == null) {
      this.cssstyle.setBorder_color_left(fA)
    }
    if (this.cssstyle.getBorder_color_right() == null) {
      this.cssstyle.setBorder_color_right(fA)
    }
    if (this.cssstyle.getBorder_color_top() == null) {
      this.cssstyle.setBorder_color_top(fA)
    }
    if ("transparent" == this.getAttribute("mathbackground")) {
      this.clearAttribute("mathbackground")
    }
    if (this.getAttribute("mathbackground") != null) {
      this.style.setBgcolor(this.getAttribute("mathbackground"))
    }
    var fy = fB.getMathsize();
    if (this.getAttribute("mathsize") != null) {
      this.style.setMathsize(cT.getLength(this.getAttribute("mathsize"), fy))
    } else {
      var fz = Math.pow(this.currentDefStyle.getScriptsizemultiplier(), this.style.getScriptlevel() - fB.getScriptlevel());
      var fD = (fy * fz);
      var fE = (cT.getLength(this.currentDefStyle.getScriptminsize(), 8));
      if (fD < fE) {
        fD = fE
      }
      this.style.setMathsize(fD)
    }
    var fx = this.getChildren();
    if (fx != null) {
      for (var fC = 0; fC < fx.size(); fC++) {
        var fw = fx.get(fC);
        fw.copyParentStyle(this.style)
      }
    }
  };
  af.prototype.modifyScriptlevel = function (fw) {
    this.style.setScriptlevel(this.style.getScriptlevel() + fw);
    var fy = this.getChildren();
    if (fy != null) {
      for (var fx = 0; fx < fy.size(); fx++) {
        var fz = fy.get(fx);
        fz.modifyScriptlevel(fw)
      }
    }
  };
  af.prototype.modifyDisplay = function (fy) {
    this.style.setDisplaystyle(fy);
    var fx = this.getChildren();
    if (fx != null) {
      for (var fw = 0; fw < fx.size(); fw++) {
        var fz = fx.get(fw);
        fz.modifyDisplay(fy)
      }
    }
  };
  af.prototype.getCurrentDefStyle = function () {
    return this.currentDefStyle
  };
  af.prototype.setCurrentDefStyle = function (fw) {
    this.currentDefStyle = fw
  };
  af.prototype.getStyle = function () {
    return this.style
  };
  af.prototype.setStyle = function (fw) {
    this.style = fw
  };
  af.prototype.getCssstyle = function () {
    return this.cssstyle
  };
  af.prototype.setCssstyle = function (fw) {
    this.cssstyle = fw
  };
  af.prototype.isAccent = function () {
    return false
  };
  af.prototype.getMovablelimits = function () {
    return false
  };
  af.prototype.isDynamicCreated = function () {
    return this.dynamicCreated
  };
  af.prototype.setDynamicCreated = function (fw) {
    this.dynamicCreated = fw
  };
  af.prototype.copyAttributes = function (fw) {
    e7.prototype.copyAttributes.call(this, fw);
    fw.style = this.style.getCopy();
    fw.cssstyle = this.cssstyle;
    fw.setCurrentDefStyle(this.getCurrentDefStyle())
  };
  af.findIsBigOperator = function (fA) {
    if (fA instanceof cf) {
      var fy = fA;
      return fy.getOperatorStyle().isLargeop()
    } else {
      if (fA instanceof aN) {
        var fx = fA;
        var fw = fx.getChildren();
        if (fw != null && fw.size() == 1) {
          var fz = fw.get(0);
          return af.findIsBigOperator(fz)
        }
      }
    }
    return false
  };
  af.findIsIntegrale = function (fA) {
    if (fA instanceof cf) {
      var fy = fA;
      return fy.getOperatorStyle().isIntegral()
    } else {
      if (fA instanceof aN) {
        var fx = fA;
        var fw = fx.getChildren();
        if (fw != null && fw.size() == 1) {
          var fz = fw.get(0);
          return af.findIsIntegrale(fz)
        }
      }
    }
    return false
  };
  af.isOperator = function (fB, fz) {
    if (fB instanceof cf) {
      var fy = fB;
      return fz == fy.getText()
    } else {
      if (fB instanceof aN) {
        var fx = fB;
        var fw = fx.getChildren();
        if (fw != null && fw.size() == 1) {
          var fA = fw.get(0);
          return af.isOperator(fA, fz)
        }
      }
    }
    return false
  };
  af.isOperatorValue = function (fD, fA) {
    if (fD instanceof cf) {
      var fz = fD;
      var fB = fz.getText();
      if (fB == null || fB.length == 0 || fB.length > 1) {
        return false
      }
      var fy = fB.charCodeAt(0);
      return fy == fA
    } else {
      if (fD instanceof aN) {
        var fx = fD;
        var fw = fx.getChildren();
        if (fw != null && fw.size() == 1) {
          var fC = fw.get(0);
          return af.isOperatorValue(fC, fA)
        }
      }
    }
    return false
  };
  af.prototype.toString = function () {
    return bd.getMathml(this, fv, true)
  };
  function aF(fw) {
    this.actiontype;
    this.selection;
    this.b = af;
    this.b(fw)
  }
  
  FMath_extend(aF, af);
  aF.prototype.copyParentStyle = function (fw) {
    af.prototype.copyParentStyle.call(this, fw)
  };
  aF.prototype.getActiontype = function () {
    return this.actiontype
  };
  aF.prototype.setActiontype = function (fw) {
    this.actiontype = fw
  };
  aF.prototype.getSelection = function () {
    return this.selection
  };
  aF.prototype.setSelection = function (fw) {
    this.selection = fw
  };
  function bm(fw) {
    this.groupalign;
    this.b = af;
    this.b(fw)
  }
  
  FMath_extend(bm, af);
  bm.prototype.copyParentStyle = function (fw) {
    af.prototype.copyParentStyle.call(this, fw)
  };
  bm.prototype.getGroupalign = function () {
    return this.groupalign
  };
  bm.prototype.setGroupalign = function (fw) {
    this.groupalign = fw
  };
  function dN(fw) {
    this.edge;
    this.b = af;
    this.b(fw)
  }
  
  FMath_extend(dN, af);
  dN.prototype.copyParentStyle = function (fw) {
    af.prototype.copyParentStyle.call(this, fw)
  };
  dN.prototype.getEdge = function () {
    return this.edge
  };
  dN.prototype.setEdge = function (fw) {
    this.edge = fw
  };
  function aN(fw) {
    this.rowalign;
    this.linestyle;
    this.lineleading;
    this.indentalignfirst;
    this.indentshiftfirst;
    this.indenttargetfirst;
    this.indentalignlast;
    this.indentshiftlast;
    this.indenttargetlast;
    this.lastRow = null;
    this.currentIdLine = 1;
    this.b = af;
    this.b(fw)
  }
  
  FMath_extend(aN, af);
  aN.prototype.copyParentStyle = function (fw) {
    var fy = this.getChildren();
    if (fy != null) {
      for (var fx = 0; fx < fy.size(); fx++) {
        var fz = fy.get(fx);
        if (fz.getChildren() == null || fz.getChildren().size() == 0) {
          fy.remove(fx);
          fx = fx - 1
        }
      }
    }
    af.prototype.copyParentStyle.call(this, fw);
    this.setTargetFirstLast()
  };
  aN.prototype.setTargetFirstLast = function () {
    var fx = this.getChildren();
    if (fx != null) {
      if (fx.size() > 0) {
        var fw = fx.get(0);
        if (this.indentalignfirst != null) {
          fw.setIndentalign(this.indentalignfirst)
        }
        if (this.indentshiftfirst != null) {
          fw.setIndentshift(this.indentshiftfirst)
        }
        if (this.indenttargetfirst != null) {
          fw.setIndenttarget(this.indenttargetfirst)
        }
      }
      if (fx.size() > 1) {
        var fw = fx.get(fx.size() - 1);
        if (this.indentalignlast != null) {
          fw.setIndentalign(this.indentalignlast)
        }
        if (this.indentshiftlast != null) {
          fw.setIndentshift(this.indentshiftlast)
        }
        if (this.indenttargetlast != null) {
          fw.setIndenttarget(this.indenttargetlast)
        }
      }
    }
  };
  aN.prototype.addChild = function (fw) {
    if (this.lastRow == null) {
      this.lastRow = this.createAddLine(null)
    }
    if (fw instanceof ex) {
      var fx = fw;
      if (fx.getLinebreak() != null) {
        if (fx instanceof cf) {
          var fy = fx;
          fy.updateLinebreakmultchar()
        }
        if ("after" == fx.getLinebreakstyle()) {
          this.lastRow.addChild(fw);
          this.lastRow = this.createAddLine(fx);
          return
        } else {
          if ("duplicate" == fx.getLinebreakstyle()) {
            this.lastRow.addChild(fw);
            this.lastRow = this.createAddLine(fx)
          } else {
            this.lastRow = this.createAddLine(fx)
          }
        }
      }
    }
    this.lastRow.addChild(fw)
  };
  aN.prototype.createAddLine = function (fx) {
    var fw = new bv(this);
    fw.setId(this.getId() + "l" + this.currentIdLine);
    this.currentIdLine = this.currentIdLine + 1;
    fw.setCurrentDefStyle(this.getCurrentDefStyle());
    fw.setStyle(this.getStyle().getCopy());
    c9.loadStyleAttributes(this.linestyle, fw);
    if (fx != null) {
      fw.setIndentalign(fx.getIndentalign());
      fw.setIndentshift(fx.getIndentshift());
      fw.setIndenttarget(fx.getIndenttarget());
      if (fx.getIndentalignfirst() != null) {
        this.indentalignfirst = fx.getIndentalignfirst();
        this.indentshiftfirst = fx.getIndentshiftfirst();
        this.indenttargetfirst = fx.getIndenttarget()
      }
      if (fx.getIndentalignlast() != null) {
        this.indentalignlast = fx.getIndentalignlast();
        this.indentshiftlast = fx.getIndentshiftlast();
        this.indenttargetlast = fx.getIndenttarget()
      }
    }
    e7.prototype.addChild.call(this, fw);
    return fw
  };
  aN.prototype.getRowalign = function () {
    return this.rowalign
  };
  aN.prototype.setRowalign = function (fw) {
    if (fw == null) {
      return
    }
    fw = fw.toLowerCase();
    if (fw == "top" || fw == "center" || fw == "bottom" || fw == "baseline" || fw == "axis") {
      this.rowalign = fw
    }
  };
  aN.prototype.isAccent = function () {
    var fw = this.getChildren();
    if (fw != null && fw.size() == 1) {
      var fx = fw.get(0);
      return fx.isAccent()
    }
    return false
  };
  aN.prototype.getMovablelimits = function () {
    var fw = this.getChildren();
    if (fw != null && fw.size() == 1) {
      var fx = fw.get(0);
      return fx.getMovablelimits()
    }
    return false
  };
  aN.prototype.getIndentalignfirst = function () {
    return this.indentalignfirst
  };
  aN.prototype.setIndentalignfirst = function (fw) {
    this.indentalignfirst = fw
  };
  aN.prototype.getIndentshiftfirst = function () {
    return this.indentshiftfirst
  };
  aN.prototype.setIndentshiftfirst = function (fw) {
    this.indentshiftfirst = fw
  };
  aN.prototype.getIndentalignlast = function () {
    return this.indentalignlast
  };
  aN.prototype.setIndentalignlast = function (fw) {
    this.indentalignlast = fw
  };
  aN.prototype.getIndentshiftlast = function () {
    return this.indentshiftlast
  };
  aN.prototype.setIndentshiftlast = function (fw) {
    this.indentshiftlast = fw
  };
  aN.prototype.setLinestyle = function (fw) {
    this.linestyle = fw
  };
  aN.prototype.getLinestyle = function () {
    return this.linestyle
  };
  aN.prototype.getIndenttargetfirst = function () {
    return this.indenttargetfirst
  };
  aN.prototype.getIndenttargetlast = function () {
    return this.indenttargetlast
  };
  aN.prototype.getLineleading = function () {
    return this.lineleading
  };
  aN.prototype.setLineleading = function (fw) {
    this.lineleading = fw
  };
  function eO(fw) {
    this.c = aN;
    this.c(fw)
  }
  
  FMath_extend(eO, aN);
  function fk(fw) {
    this.open;
    this.close;
    this.separators;
    this.c = aN;
    this.c(fw)
  }
  
  FMath_extend(fk, aN);
  fk.prototype.copyParentStyle = function (fz) {
    if (this.open == null) {
      this.open = "("
    }
    if (this.close == null) {
      this.close = ")"
    }
    var fx = 0;
    var fH = this.getChildren();
    if (fH != null) {
      for (var fA = 0; fA < fH.size(); fA++) {
        var fI = fH.get(fA);
        fx = fx + fI.getChildren().size()
      }
    }
    var fB = 0;
    if (fH != null) {
      for (var fA = 0; fA < fH.size(); fA++) {
        var fI = fH.get(fA);
        var fw = fI.getChildren();
        if (fw != null) {
          for (var fy = 0; fy < fw.size(); fy++) {
            var fG = this.getSeparatorFor(fB);
            if (fG.length > 0) {
              if (fB < (fx - 1)) {
                var fE = c9.getOBean(fI, fG);
                fE.setFormOp("infix");
                fE.setDynamicCreated(true);
                fI.addIndexChild(fE, fy + 1);
                fy++
              }
            }
            fB++
          }
        }
      }
    }
    var fD = c9.getOBean(this, this.getOpen());
    fD.setFormOp("prefix");
    fD.setDynamicCreated(true);
    if (fH == null) {
      this.addChild(fD)
    } else {
      var fI = this.getChildren().get(0);
      fI.addIndexChild(fD, 0)
    }
    var fC = c9.getOBean(this, this.getClose());
    fC.setFormOp("postfix");
    fC.setDynamicCreated(true);
    if (fH == null) {
      this.addChild(fC)
    } else {
      var fF = this.getChildren().size();
      var fI = this.getChildren().get(fF - 1);
      fI.addChild(fC)
    }
    aN.prototype.copyParentStyle.call(this, fz)
  };
  fk.prototype.getSeparatorFor = function (fw) {
    if (this.getSeparators() == null) {
      return ","
    }
    var fx = this.getSeparators();
    if (fx.length == 0) {
      return ""
    }
    if (fw < fx.length) {
      return fx.charAt(fw) + ""
    }
    return fx.charAt(fx.length - 1) + ""
  };
  fk.prototype.getOpen = function () {
    return this.open
  };
  fk.prototype.setOpen = function (fw) {
    this.open = fw
  };
  fk.prototype.getClose = function () {
    return this.close
  };
  fk.prototype.setClose = function (fw) {
    this.close = fw
  };
  fk.prototype.getSeparators = function () {
    return this.separators
  };
  fk.prototype.setSeparators = function (fw) {
    this.separators = fw
  };
  function ft(fw) {
    this.num;
    this.denum;
    this.numalign;
    this.denomalign;
    this.linethickness;
    this.lineCapMargin;
    this.space;
    this.bevelled = false;
    this.b = af;
    this.b(fw);
    this.setFixChildrenSize(true)
  }
  
  FMath_extend(ft, af);
  ft.prototype.copyParentStyle = function (fw) {
    this.num = this.getChildren().get(0);
    this.denum = this.getChildren().get(1);
    if (this.getStyle().isDisplaystyle()) {
      this.modifyScriptlevel(0)
    } else {
      this.modifyScriptlevel(1)
    }
    af.prototype.copyParentStyle.call(this, fw)
  };
  ft.prototype.getNum = function () {
    return this.num
  };
  ft.prototype.getDenum = function () {
    return this.denum
  };
  ft.prototype.getNumalign = function () {
    return this.numalign
  };
  ft.prototype.setNumalign = function (fw) {
    this.numalign = fw
  };
  ft.prototype.getDenomalign = function () {
    return this.denomalign
  };
  ft.prototype.setDenomalign = function (fw) {
    this.denomalign = fw
  };
  ft.prototype.getLinethickness = function () {
    return this.linethickness
  };
  ft.prototype.setLinethickness = function (fw) {
    this.linethickness = fw
  };
  ft.prototype.getLineCapMargin = function () {
    return this.lineCapMargin
  };
  ft.prototype.setLineCapMargin = function (fw) {
    this.lineCapMargin = fw
  };
  ft.prototype.isBevelled = function () {
    return this.bevelled
  };
  ft.prototype.setBevelled = function (fw) {
    this.bevelled = fw
  };
  ft.prototype.getSpace = function () {
    return this.space
  };
  ft.prototype.setSpace = function (fw) {
    this.space = fw
  };
  function cr(fw) {
    this.src;
    this.width;
    this.height;
    this.valign;
    this.alt;
    this.b = af;
    this.b(fw)
  }
  
  FMath_extend(cr, af);
  cr.prototype.copyParentStyle = function (fw) {
    af.prototype.copyParentStyle.call(this, fw)
  };
  cr.prototype.getSrc = function () {
    return this.src
  };
  cr.prototype.setSrc = function (fw) {
    this.src = fw
  };
  cr.prototype.getWidth = function () {
    return this.width
  };
  cr.prototype.setWidth = function (fw) {
    this.width = fw
  };
  cr.prototype.getHeight = function () {
    return this.height
  };
  cr.prototype.setHeight = function (fw) {
    this.height = fw
  };
  cr.prototype.getValign = function () {
    return this.valign
  };
  cr.prototype.setValign = function (fw) {
    this.valign = fw
  };
  cr.prototype.getAlt = function () {
    return this.alt
  };
  cr.prototype.setAlt = function (fw) {
    this.alt = fw
  };
  function bH(fw) {
    this.b = af;
    this.b(fw)
  }
  
  FMath_extend(bH, af);
  bH.prototype.copyParentStyle = function (fw) {
    this.compactTextChildren();
    af.prototype.copyParentStyle.call(this, fw);
    this.splitTextForFonts()
  };
  bH.prototype.compactTextChildren = function () {
    var fx = this.getChildren();
    if (fx != null) {
      for (var fw = 0; fw < (fx.size() - 1); fw++) {
        var fB = fx.get(fw);
        var fz = fx.get(fw + 1);
        if (fB instanceof cy && fz instanceof cy) {
          var fA = fB;
          var fy = fz;
          fA.setText(fA.getText() + fy.getText());
          fx.remove(fw + 1);
          fw--
        }
      }
    }
  };
  bH.prototype.splitTextForFonts = function () {
    var fz = this.getChildren();
    if (fz != null) {
      for (var fy = 0; fy < fz.size(); fy++) {
        var fD = fz.get(fy);
        if (fD instanceof cy) {
          var fx = fD;
          var fB = this.getListOfTextBean(fx);
          if (fB.size() > 0) {
            var fC = fB.get(0);
            fx.setText(fC.getText());
            if (fC.getAttribute("mathvariant") != null) {
              fx.setAttribute("mathvariant", fC.getAttribute("mathvariant"));
              fx.getStyle().setMathvariant(fC.getAttribute("mathvariant"))
            }
            for (var fw = 1; fw < fB.size(); fw++) {
              var fA = fB.get(fw);
              this.addIndexChild(fA, fy + fw)
            }
            if (fB.size() > 1) {
              fz = this.getChildren()
            }
          }
        }
      }
    }
  };
  bH.prototype.getListOfTextBean = function (fE) {
    var fz = new aT();
    var fC = fE.getStyle().getMathvariant();
    var fD = fE.getText();
    var fB = "";
    for (var fx = 0; fx < fD.length; fx++) {
      var fw = fD.charCodeAt(fx);
      var fA = fD.charAt(fx) + "";
      var fF = null;
      var fy = dt.changeChar(fw);
      if (fy != null) {
        fF = fy.substring(0, fy.indexOf(":"));
        fA = fy.substring(fy.indexOf(":") + 1, fy.length)
      } else {
        fF = fE.getStyle().getMathvariant()
      }
      if (fB.length > 0) {
        if (!(fF == fC)) {
          fz.add(this.createTextBeanForText(fB, fC, fE));
          fB = ""
        }
      }
      fC = fF;
      fB = fB + fA
    }
    if (fB.length > 0) {
      fz.add(this.createTextBeanForText(fB, fC, fE))
    }
    return fz
  };
  bH.prototype.createTextBeanForText = function (fy, fx, fw) {
    var fz = new cy(fw.getParentBean());
    fw.copyAttributes(fz);
    fz.setAttribute("mathvariant", fx);
    fz.setText(fy);
    return fz
  };
  bH.prototype.getText = function () {
    var fx = this.getChildren();
    if (fx != null) {
      for (var fw = 0; fw < fx.size(); fw++) {
        var fz = fx.get(fw);
        if (fz instanceof cy) {
          var fy = fz;
          return fy.getText()
        }
      }
    }
    return ""
  };
  bH.prototype.setText = function (fA) {
    var fx = this.getChildren();
    if (fx != null) {
      for (var fw = 0; fw < fx.size(); fw++) {
        var fz = fx.get(fw);
        if (fz instanceof cy) {
          var fy = fz;
          fy.setText(fA);
          return
        }
      }
    }
  };
  bH.isTokenBean = function (fw) {
    if (fw instanceof bH) {
      if (fw instanceof j) {
        return false
      }
      return true
    }
    return false
  };
  function ey(fw) {
    this.d = bH;
    this.d(fw)
  }
  
  FMath_extend(ey, bH);
  ey.prototype.copyParentStyle = function (fw) {
    if (this.getAttribute("mathvariant") == null && this.hasOneCharText()) {
      this.getStyle().setItalic(true);
      this.setAttribute("mathvariant", this.getStyle().getMathvariant())
    }
    bH.prototype.copyParentStyle.call(this, fw)
  };
  ey.prototype.hasOneCharText = function () {
    var fx = this.getChildren();
    if (fx != null && fx.size() == 1) {
      var fy = fx.get(0);
      if (fy instanceof cy) {
        var fw = fy;
        if (fw.getText().length == 1) {
          return true
        }
      }
    }
    return false
  };
  function ex(fw) {
    this.linebreak;
    this.lineleading;
    this.linebreakstyle;
    this.indentalign;
    this.indentshift;
    this.indenttarget;
    this.indentalignfirst;
    this.indentshiftfirst;
    this.indentalignlast;
    this.indentshiftlast;
    this.d = bH;
    this.d(fw)
  }
  
  FMath_extend(ex, bH);
  ex.prototype.copyParentStyle = function (fw) {
    bH.prototype.copyParentStyle.call(this, fw)
  };
  ex.prototype.isLineBreak = function () {
    return this.linebreak != null
  };
  ex.prototype.getLinebreak = function () {
    return this.linebreak
  };
  ex.prototype.setLinebreak = function (fw) {
    if ("indentingnewline" == fw) {
      fw = "newline"
    }
    this.linebreak = fw
  };
  ex.prototype.getIndentalign = function () {
    return this.indentalign
  };
  ex.prototype.setIndentalign = function (fw) {
    this.indentalign = fw
  };
  ex.prototype.getIndentshift = function () {
    return this.indentshift
  };
  ex.prototype.setIndentshift = function (fw) {
    this.indentshift = fw
  };
  ex.prototype.getIndenttarget = function () {
    return this.indenttarget
  };
  ex.prototype.setIndenttarget = function (fw) {
    this.indenttarget = fw
  };
  ex.prototype.getIndentalignfirst = function () {
    return this.indentalignfirst
  };
  ex.prototype.setIndentalignfirst = function (fw) {
    this.indentalignfirst = fw
  };
  ex.prototype.getIndentshiftfirst = function () {
    return this.indentshiftfirst
  };
  ex.prototype.setIndentshiftfirst = function (fw) {
    this.indentshiftfirst = fw
  };
  ex.prototype.getIndentalignlast = function () {
    return this.indentalignlast
  };
  ex.prototype.setIndentalignlast = function (fw) {
    this.indentalignlast = fw
  };
  ex.prototype.getIndentshiftlast = function () {
    return this.indentshiftlast
  };
  ex.prototype.setIndentshiftlast = function (fw) {
    this.indentshiftlast = fw
  };
  ex.prototype.getLineleading = function () {
    return this.lineleading
  };
  ex.prototype.setLineleading = function (fw) {
    this.lineleading = fw
  };
  ex.prototype.getLinebreakstyle = function () {
    return this.linebreakstyle
  };
  ex.prototype.setLinebreakstyle = function (fw) {
    this.linebreakstyle = fw
  };
  function au(fw) {
    this.c = aN;
    this.c(fw)
  }
  
  FMath_extend(au, aN);
  au.prototype.copyParentStyle = function (fw) {
    if (this.getCurrentDefStyle().getScriptlevel() != null) {
      var fy = this.getCurrentDefStyle().getScriptlevel();
      if (fy != null) {
        if (fy.indexOf("+") == 0) {
          fy = fy.substring(1, fy.length);
          var fx = ej.getIntegerValue(fy, 0);
          this.modifyScriptlevel(fx)
        } else {
          if (fy.indexOf("-") == 0) {
            fy = fy.substring(1, fy.length);
            var fx = ej.getIntegerValue(fy, 0);
            this.modifyScriptlevel(-fx)
          } else {
            this.getStyle().setScriptlevel(ej.getIntegerValue(fy, 0))
          }
        }
      }
    }
    if (this.getCurrentDefStyle().getDisplaystyle() != null) {
      this.modifyDisplay(ej.getBooleanValue(this.getCurrentDefStyle().getDisplaystyle(), true))
    }
    aN.prototype.copyParentStyle.call(this, fw)
  };
  function fi(fw) {
    this.maxwidth;
    this.overflow;
    this.e = au;
    this.e(fw)
  }
  
  FMath_extend(fi, au);
  fi.prototype.getMaxwidth = function () {
    return this.maxwidth
  };
  fi.prototype.setMaxwidth = function (fw) {
    this.maxwidth = fw
  };
  fi.prototype.getOverflow = function () {
    return this.overflow
  };
  fi.prototype.setOverflow = function (fw) {
    this.overflow = fw
  };
  function bt(fw) {
    this.notation;
    this.linethickness;
    this.space;
    this.rounded;
    this.c = aN;
    this.c(fw)
  }
  
  FMath_extend(bt, aN);
  bt.prototype.getNotation = function () {
    return this.notation
  };
  bt.prototype.setNotation = function (fw) {
    this.notation = fw
  };
  bt.prototype.getLinethickness = function () {
    return this.linethickness
  };
  bt.prototype.setLinethickness = function (fw) {
    this.linethickness = fw
  };
  bt.prototype.getSpace = function () {
    return this.space
  };
  bt.prototype.setSpace = function (fw) {
    this.space = fw
  };
  bt.prototype.getRounded = function () {
    return this.rounded
  };
  bt.prototype.setRounded = function (fw) {
    this.rounded = fw
  };
  function d6(fw) {
    this.longdivstyle;
    this.divisor;
    this.result;
    this.mStack;
    this.b = af;
    this.b(fw);
    this.mStack = new ea(this);
    e7.prototype.addChild.call(this, this.mStack)
  }
  
  FMath_extend(d6, af);
  d6.prototype.addChild = function (fw) {
    if (this.divisor == null) {
      this.divisor = fw;
      e7.prototype.addChild.call(this, this.divisor)
    } else {
      if (this.result == null) {
        this.result = fw;
        if (this.longdivstyle == null || "lefttop" == this.longdivstyle || "righttop" == this.longdivstyle) {
          this.mStack.addChild(fw);
          this.mStack.setFirstLineLongDiv(true)
        } else {
          e7.prototype.addChild.call(this, this.result)
        }
      } else {
        this.mStack.addChild(fw)
      }
    }
  };
  d6.prototype.setCurrentDefStyle = function (fw) {
    af.prototype.setCurrentDefStyle.call(this, fw);
    this.mStack.setCurrentDefStyle(fw)
  };
  d6.prototype.copyParentStyle = function (fw) {
    if ("left/\\right" == this.longdivstyle) {
      this.addTextChild("/");
      this.addTextChild("\\")
    } else {
      if ("left)(right" == this.longdivstyle) {
        this.addTextChild(")");
        this.addTextChild("(")
      } else {
        if (":right=right" == this.longdivstyle) {
          this.addTextChild(":");
          this.addTextChild("=")
        }
      }
    }
    af.prototype.copyParentStyle.call(this, fw)
  };
  d6.prototype.addTextChild = function (fx) {
    var fw = c9.getTextBean(this, fx);
    fw.setDynamicCreated(true);
    e7.prototype.addChild.call(this, fw)
  };
  d6.prototype.getLongdivstyle = function () {
    return this.longdivstyle
  };
  d6.prototype.setLongdivstyle = function (fw) {
    this.longdivstyle = fw
  };
  d6.prototype.getDivisor = function () {
    return this.divisor
  };
  d6.prototype.getResult = function () {
    return this.result
  };
  d6.prototype.getAlign = function () {
    return this.mStack.getAlign()
  };
  d6.prototype.setAlign = function (fw) {
    this.mStack.setAlign(fw)
  };
  d6.prototype.getStackalign = function () {
    return this.mStack.getStackalign()
  };
  d6.prototype.setStackalign = function (fw) {
    this.mStack.setStackalign(fw)
  };
  d6.prototype.getCharalign = function () {
    return this.mStack.getCharalign()
  };
  d6.prototype.setCharalign = function (fw) {
    this.mStack.setCharalign(fw)
  };
  d6.prototype.getCharspacing = function () {
    return this.mStack.getCharspacing()
  };
  d6.prototype.setCharspacing = function (fw) {
    this.mStack.setCharspacing(fw)
  };
  d6.prototype.getRowspacing = function () {
    return this.mStack.getRowspacing()
  };
  d6.prototype.setRowspacing = function (fw) {
    this.mStack.setRowspacing(fw)
  };
  d6.prototype.getmStack = function () {
    return this.mStack
  };
  function u(fw) {
    this.preExp = new aT();
    this.preSub = new aT();
    this._base = null;
    this.postExp = new aT();
    this.postSub = new aT();
    this.supscriptshift;
    this.subscriptshift;
    this.subscriptPostion;
    this.supscriptPostion;
    this.b = af;
    this.b(fw)
  }
  
  FMath_extend(u, af);
  u.prototype.copyParentStyle = function (fw) {
    var fz = this.getChildren();
    if (fz == null || fz.size() == 0) {
      return
    }
    this._base = fz.get(0);
    var fy = true;
    for (var fx = 1; fx < fz.size(); fx++) {
      var fC = fz.get(fx);
      if (fC instanceof o) {
        fy = false;
        continue
      }
      var fB = fz.get(fx);
      fx++;
      var fA = fz.get(fx);
      if (fy) {
        this.postSub.add(fB);
        this.postExp.add(fA)
      } else {
        this.preSub.add(fB);
        this.preExp.add(fA)
      }
    }
    for (var fx = 1; fx < fz.size(); fx++) {
      var fC = fz.get(fx);
      fC.modifyScriptlevel(1);
      fC.modifyDisplay(false)
    }
    af.prototype.copyParentStyle.call(this, fw)
  };
  u.prototype.getPreExp = function () {
    return this.preExp
  };
  u.prototype.getPreSub = function () {
    return this.preSub
  };
  u.prototype.getBase = function () {
    return this._base
  };
  u.prototype.getPostExp = function () {
    return this.postExp
  };
  u.prototype.getPostSub = function () {
    return this.postSub
  };
  u.prototype.getSubscriptshift = function () {
    return this.subscriptshift
  };
  u.prototype.getSupscriptshift = function () {
    return this.supscriptshift
  };
  u.prototype.setSupscriptshift = function (fw) {
    this.supscriptshift = fw
  };
  u.prototype.setSubscriptshift = function (fw) {
    this.subscriptshift = fw
  };
  u.prototype.getSubscriptPostion = function () {
    return this.subscriptPostion
  };
  u.prototype.setSubscriptPostion = function (fw) {
    this.subscriptPostion = fw
  };
  u.prototype.getSupscriptPostion = function () {
    return this.supscriptPostion
  };
  u.prototype.setSupscriptPostion = function (fw) {
    this.supscriptPostion = fw
  };
  function T(fw) {
    this.limLoc = "subSup";
    this.chr = "";
    this.sub = null;
    this.subHide = false;
    this.sup;
    this.supHide = false;
    this.e = null;
    this.b = af;
    this.b(fw)
  }
  
  FMath_extend(T, af);
  T.prototype.copyParentStyle = function (fw) {
    af.prototype.copyParentStyle.call(this, fw)
  };
  T.prototype.getLimLoc = function () {
    return this.limLoc
  };
  T.prototype.setLimLoc = function (fw) {
    this.limLoc = fw
  };
  T.prototype.getChr = function () {
    return this.chr
  };
  T.prototype.setChr = function (fw) {
    this.chr = fw
  };
  T.prototype.getSub = function () {
    return this.sub
  };
  T.prototype.setSub = function (fw) {
    this.sub = fw
  };
  T.prototype.isSubHide = function () {
    return this.subHide
  };
  T.prototype.setSubHide = function (fw) {
    this.subHide = fw
  };
  T.prototype.getSup = function () {
    return this.sup
  };
  T.prototype.setSup = function (fw) {
    this.sup = fw
  };
  T.prototype.isSupHide = function () {
    return this.supHide
  };
  T.prototype.setSupHide = function (fw) {
    this.supHide = fw
  };
  T.prototype.getE = function () {
    return this.e
  };
  T.prototype.setE = function (fw) {
    this.e = fw
  };
  function cF(fw) {
    this.d = bH;
    this.d(fw)
  }
  
  FMath_extend(cF, bH);
  function aI(fw) {
    this.b = af;
    this.b(fw)
  }
  
  FMath_extend(aI, af);
  function cf(fw) {
    this.operatorStyle;
    this.largeOpMultiplier;
    this.form;
    this.fence;
    this.separator;
    this.lspaceS;
    this.rspaceS;
    this.stretchy;
    this.symmetric;
    this.maxsize;
    this.minsize;
    this.largeop;
    this.movablelimits;
    this.accent;
    this.linebreakmultchar;
    this.f = ex;
    this.f(fw)
  }
  
  FMath_extend(cf, ex);
  cf.prototype.copyParentStyle = function (fx) {
    this.loadStyleOperatorInfo();
    ex.prototype.copyParentStyle.call(this, fx);
    if (this.getLargeop()) {
      var fw = cT.getLength(this.largeOpMultiplier, this.getStyle().getMathsize());
      this.getStyle().setMathsize(fw);
      var fz = this.getChildren();
      if (fz != null) {
        for (var fy = 0; fy < fz.size(); fy++) {
          var fA = fz.get(fy);
          fA.getStyle().setMathsize(fw)
        }
      }
    }
  };
  cf.prototype.loadStyleOperatorInfo = function () {
    if (this.operatorStyle != null) {
      return
    }
    var fy = null;
    if (this.getChildren() != null) {
      var fx = this.getChildren();
      if (fx.size() == 1) {
        var fA = fx.get(0);
        if (fA instanceof cy) {
          var fw = fA;
          var fz = fw.getText();
          if (fz.length > 0) {
            fy = e8.getStyleForOperator(fz)
          }
        }
      }
    }
    if (fy == null) {
      fy = e8.getDefaultStyleForOperator()
    }
    this.setOperatorStyle(fy)
  };
  cf.prototype.getFormS = function () {
    return this.form
  };
  cf.prototype.getForm = function () {
    return this.form
  };
  cf.prototype.setForm = function (fw) {
    this.form = fw
  };
  cf.prototype.setFormOp = function (fw) {
    if (this.form != null) {
      this.operatorStyle.setForm(this.form)
    } else {
      this.operatorStyle.setForm(fw)
    }
  };
  cf.prototype.getFenceS = function () {
    return this.fence
  };
  cf.prototype.getFence = function () {
    if (this.fence != null) {
      return ej.getBooleanValue(this.fence, false)
    }
    return this.operatorStyle.isFence()
  };
  cf.prototype.setFence = function (fw) {
    this.fence = fw
  };
  cf.prototype.getSeparatorS = function () {
    return this.separator
  };
  cf.prototype.getSeparator = function () {
    if (this.separator != null) {
      return ej.getBooleanValue(this.separator, false)
    }
    return this.operatorStyle.isSeparator()
  };
  cf.prototype.setSeparator = function (fw) {
    this.separator = fw
  };
  cf.prototype.getLspaceS = function () {
    return this.lspaceS
  };
  cf.prototype.getLspace = function () {
    if (this.lspaceS != null) {
      return cT.getLength(this.lspaceS, this.getStyle().getMathsize())
    }
    var fw = this.operatorStyle.getFormStyle().getLspace();
    return e8.getLengthForOperatorSpace(fw, this.getStyle().getMathsize())
  };
  cf.prototype.setLspace = function (fw) {
    this.lspaceS = fw
  };
  cf.prototype.getRspaceS = function () {
    return this.rspaceS
  };
  cf.prototype.getRspace = function () {
    if (this.rspaceS != null) {
      return cT.getLength(this.rspaceS, this.getStyle().getMathsize())
    }
    var fw = this.operatorStyle.getFormStyle().getRspace();
    return e8.getLengthForOperatorSpace(fw, this.getStyle().getMathsize())
  };
  cf.prototype.setRspace = function (fw) {
    this.rspaceS = fw
  };
  cf.prototype.getStretchyS = function () {
    return this.stretchy
  };
  cf.prototype.getStretchy = function () {
    if (this.stretchy != null) {
      return ej.getBooleanValue(this.stretchy, false)
    }
    return this.operatorStyle.isStretchy()
  };
  cf.prototype.setStretchy = function (fw) {
    this.stretchy = fw
  };
  cf.prototype.getSymmetricS = function () {
    return this.symmetric
  };
  cf.prototype.getSymmetric = function () {
    if (this.symmetric != null) {
      return ej.getBooleanValue(this.symmetric, false)
    }
    return this.operatorStyle.isSymmetric()
  };
  cf.prototype.setSymmetric = function (fw) {
    this.symmetric = fw
  };
  cf.prototype.getMaxsize = function () {
    return this.maxsize
  };
  cf.prototype.setMaxsize = function (fw) {
    this.maxsize = fw
  };
  cf.prototype.getMinsize = function () {
    return this.minsize
  };
  cf.prototype.setMinsize = function (fw) {
    this.minsize = fw
  };
  cf.prototype.getLargeopS = function () {
    return this.largeop
  };
  cf.prototype.getLargeop = function () {
    if (!this.getStyle().isDisplaystyle()) {
      return false
    }
    if (this.largeop != null) {
      return ej.getBooleanValue(this.largeop, false)
    }
    this.loadStyleOperatorInfo();
    return this.operatorStyle.isLargeop()
  };
  cf.prototype.setLargeop = function (fw) {
    this.largeop = fw
  };
  cf.prototype.getMovablelimitsS = function () {
    return this.movablelimits
  };
  cf.prototype.getMovablelimits = function () {
    if (this.movablelimits != null) {
      return ej.getBooleanValue(this.movablelimits, false)
    }
    this.loadStyleOperatorInfo();
    return this.operatorStyle.isMovablelimits()
  };
  cf.prototype.setMovablelimits = function (fw) {
    this.movablelimits = fw
  };
  cf.prototype.isAccent = function () {
    if (this.accent != null) {
      return ej.getBooleanValue(this.accent, false)
    }
    this.loadStyleOperatorInfo();
    return this.operatorStyle.getFormStyle().isAccent()
  };
  cf.prototype.getAccentS = function () {
    return this.accent
  };
  cf.prototype.getAccent = function () {
    return this.accent
  };
  cf.prototype.setAccent = function (fw) {
    this.accent = fw
  };
  cf.prototype.getOperatorStyle = function () {
    return this.operatorStyle
  };
  cf.prototype.setOperatorStyle = function (fw) {
    this.operatorStyle = fw
  };
  cf.prototype.getLinebreakmultchar = function () {
    return this.linebreakmultchar
  };
  cf.prototype.setLinebreakmultchar = function (fw) {
    this.linebreakmultchar = fw
  };
  cf.prototype.getLargeOpMultiplier = function () {
    return this.largeOpMultiplier
  };
  cf.prototype.setLargeOpMultiplier = function (fw) {
    this.largeOpMultiplier = fw
  };
  cf.prototype.isVerticalStretchy = function () {
    if (this.maxsize != null) {
      var fy = ej.getIntegerValue(this.maxsize, 1);
      if (fy == 1) {
        return false
      }
    }
    if (this.stretchy != null) {
      return ej.getBooleanValue(this.stretchy, false)
    }
    if (this.operatorStyle.isStretchy()) {
      var fw = this.getChildren().get(0);
      var fx = fw.getText();
      if (fx == "|||") {
        fx = bB.convertToChars("&#x2980;")
      } else {
        if (fx == "||") {
          fx = bB.convertToChars("&#x2016;")
        }
      }
      return e8.isVStretchy(fx)
    }
    return false
  };
  cf.prototype.isHorizontalStretchy = function () {
    if (this.maxsize != null) {
      var fy = ej.getIntegerValue(this.maxsize, 1);
      if (fy == 1) {
        return false
      }
    }
    if (this.stretchy != null) {
      return ej.getBooleanValue(this.stretchy, false)
    }
    if (this.operatorStyle.isStretchy()) {
      var fw = this.getChildren().get(0);
      var fx = fw.getText();
      if (fx == "|||") {
        fx = bB.convertToChars("&#x2980;")
      } else {
        if (fx == "||") {
          fx = bB.convertToChars("&#x2016;")
        }
      }
      return e8.isHStretchy(fx)
    }
    return false
  };
  cf.prototype.clone = function () {
    var fw = new cf(this.getParentBean());
    fw.largeOpMultiplier = this.largeOpMultiplier;
    fw.form = this.form;
    fw.fence = this.fence;
    fw.separator = this.separator;
    fw.lspaceS = this.lspaceS;
    fw.rspaceS = this.rspaceS;
    fw.stretchy = this.stretchy;
    fw.symmetric = this.symmetric;
    fw.maxsize = this.maxsize;
    fw.minsize = this.minsize;
    fw.largeop = this.largeop;
    fw.movablelimits = this.movablelimits;
    fw.linebreakmultchar = this.linebreakmultchar;
    this.copyAttributes(fw);
    return fw
  };
  cf.prototype.updateLinebreakmultchar = function () {
    if (this.linebreakmultchar != null) {
      if (this.getChildren() != null) {
        var fx = this.getChildren();
        if (fx.size() == 1) {
          var fz = fx.get(0);
          if (fz instanceof cy) {
            var fw = fz;
            var fy = fw.getText();
            if (fy.length == 1 && "2062" == ds.getHexCodeFromChar(fy)) {
              fw.setText(this.linebreakmultchar)
            }
          }
        }
      }
    }
  };
  cf.prototype.isIntegral = function () {
    return this.getOperatorStyle().isIntegral()
  };
  function g(fw) {
    this._base;
    this.exp;
    this.accent = null;
    this.align;
    this.overSpace;
    this.b = af;
    this.b(fw);
    this.setFixChildrenSize(true)
  }
  
  FMath_extend(g, af);
  g.prototype.copyParentStyle = function (fw) {
    this.initChildren();
    if (!this.isAccent()) {
      this.exp.modifyScriptlevel(1)
    }
    this.exp.modifyDisplay(false);
    af.prototype.copyParentStyle.call(this, fw)
  };
  g.prototype.initChildren = function () {
    if (this._base != null) {
      return
    }
    this._base = this.getChildren().get(0);
    this.exp = this.getChildren().get(1)
  };
  g.prototype.getBase = function () {
    return this._base
  };
  g.prototype.getExp = function () {
    return this.exp
  };
  g.prototype.isAccent = function () {
    this.initChildren();
    if (this.accent != null) {
      return ej.getBooleanValue(this.accent, false)
    }
    return this.exp.isAccent()
  };
  g.prototype.setAccent = function (fw) {
    this.accent = fw
  };
  g.prototype.getAlign = function () {
    return this.align
  };
  g.prototype.setAlign = function (fw) {
    this.align = fw
  };
  g.prototype.getOverSpace = function () {
    return this.overSpace
  };
  g.prototype.setOverSpace = function (fw) {
    this.overSpace = fw
  };
  function e3(fw) {
    this.width;
    this.lspace;
    this.height;
    this.depth;
    this.voffset;
    this.c = aN;
    this.c(fw)
  }
  
  FMath_extend(e3, aN);
  e3.prototype.getWidth = function () {
    return this.width
  };
  e3.prototype.setWidth = function (fw) {
    this.width = fw
  };
  e3.prototype.getLspace = function () {
    return this.lspace
  };
  e3.prototype.setLspace = function (fw) {
    this.lspace = fw
  };
  e3.prototype.getHeight = function () {
    return this.height
  };
  e3.prototype.setHeight = function (fw) {
    this.height = fw
  };
  e3.prototype.getDepth = function () {
    return this.depth
  };
  e3.prototype.setDepth = function (fw) {
    this.depth = fw
  };
  e3.prototype.getVoffset = function () {
    return this.voffset
  };
  e3.prototype.setVoffset = function (fw) {
    this.voffset = fw
  };
  function b3(fw) {
    this.c = aN;
    this.c(fw)
  }
  
  FMath_extend(b3, aN);
  function o(fw) {
    this.b = af;
    this.b(fw)
  }
  
  FMath_extend(o, af);
  function an(fw) {
    this._base;
    this.index;
    this.closed = false;
    this.closedLength;
    this.b = af;
    this.b(fw)
  }
  
  FMath_extend(an, af);
  an.prototype.copyParentStyle = function (fw) {
    this._base = this.getChildren().get(0);
    this.index = this.getChildren().get(1);
    this.index.modifyScriptlevel(2);
    this.index.modifyDisplay(false);
    af.prototype.copyParentStyle.call(this, fw)
  };
  an.prototype.getBase = function () {
    return this._base
  };
  an.prototype.getIndex = function () {
    return this.index
  };
  an.prototype.isClosed = function () {
    return this.closed
  };
  an.prototype.setClosed = function (fw) {
    this.closed = fw
  };
  an.prototype.getClosedLength = function () {
    return this.closedLength
  };
  an.prototype.setClosedLength = function (fw) {
    this.closedLength = fw
  };
  function bv(fw) {
    this.rowBean;
    this.indentalign;
    this.indentshift;
    this.indenttarget;
    this.b = af;
    this.b(fw);
    this.rowBean = fw
  }
  
  FMath_extend(bv, af);
  bv.prototype.copyParentStyle = function (fw) {
    af.prototype.copyParentStyle.call(this, fw)
  };
  bv.prototype.addChild = function (fw) {
    if (fw instanceof j) {
      if (fw.getAttribute("linebreak") != null) {
        var fx = this.getChildren();
        if (fx == null || fx.size() == 0) {
          return
        }
      }
    }
    e7.prototype.addChild.call(this, fw)
  };
  bv.prototype.isAccent = function () {
    var fw = this.getChildren();
    if (fw != null && fw.size() == 1) {
      var fx = fw.get(0);
      return fx.isAccent()
    }
    return false
  };
  bv.prototype.getMovablelimits = function () {
    var fw = this.getChildren();
    if (fw != null && fw.size() == 1) {
      var fx = fw.get(0);
      return fx.getMovablelimits()
    }
    return false
  };
  bv.prototype.getRowBean = function () {
    return this.rowBean
  };
  bv.prototype.getIndentalign = function () {
    return this.indentalign
  };
  bv.prototype.setIndentalign = function (fw) {
    this.indentalign = fw
  };
  bv.prototype.getIndentshift = function () {
    return this.indentshift
  };
  bv.prototype.setIndentshift = function (fw) {
    this.indentshift = fw
  };
  bv.prototype.getIndenttarget = function () {
    return this.indenttarget
  };
  bv.prototype.setIndenttarget = function (fw) {
    this.indenttarget = fw
  };
  function ac(fw) {
    this.lquote;
    this.rquote;
    this.d = bH;
    this.d(fw)
  }
  
  FMath_extend(ac, bH);
  ac.prototype.copyParentStyle = function (fw) {
    if (this.lquote == null) {
      this.lquote = '"'
    }
    if (this.rquote == null) {
      this.rquote = '"'
    }
    this.lquote = this.lquote.trim();
    this.rquote = this.rquote.trim();
    if (this.lquote.length > 0) {
      var fy = c9.getTextBean(this, this.lquote);
      this.addIndexChild(fy, 0)
    }
    if (this.rquote.length > 0) {
      var fx = c9.getTextBean(this, this.rquote);
      this.addChild(fx)
    }
    bH.prototype.copyParentStyle.call(this, fw)
  };
  ac.prototype.getLquote = function () {
    return this.lquote
  };
  ac.prototype.setLquote = function (fw) {
    this.lquote = fw
  };
  ac.prototype.getRquote = function () {
    return this.rquote
  };
  ac.prototype.setRquote = function (fw) {
    this.rquote = fw
  };
  function ct(fw) {
    this.charalign;
    this.charspacing;
    this.position = 0;
    this.decimalPosition = -1;
    this.hasNumber = false;
    this.b = af;
    this.b(fw)
  }
  
  FMath_extend(ct, af);
  ct.prototype.addChild = function (fy) {
    if (fy instanceof cF) {
      var fA = fy;
      var fF = fA.getText();
      var fw = this.getCurrentDefStyle().getDecimalpoint();
      for (var fx = 0; fx < fF.length; fx++) {
        var fB = fF.charAt(fx);
        var fC = fB + "";
        var fD = new cF(fA.getParentBean());
        fD.setCurrentDefStyle(this.getCurrentDefStyle());
        fA.copyAttributes(fD);
        var fE = new cy(fD);
        fE.setCurrentDefStyle(this.getCurrentDefStyle());
        fE.setText(fC);
        fD.addChild(fE);
        this.hasNumber = true;
        e7.prototype.addChild.call(this, fD);
        if (fC == fw) {
          this.decimalPosition = this.getChildren().size() - 1
        }
      }
    } else {
      if (this.hasNumber) {
        this.decimalPosition = this.getChildren().size()
      }
      e7.prototype.addChild.call(this, fy);
      if (fy instanceof cf) {
        var fz = fy;
        fz.setLspace("0");
        fz.setRspace("0")
      }
    }
  };
  ct.prototype.copyParentStyle = function (fw) {
    af.prototype.copyParentStyle.call(this, fw);
    var fx = this.getChildren();
    if (fx == null) {
      this.decimalPosition = 0
    } else {
      if (this.decimalPosition == -1) {
        this.decimalPosition = fx.size()
      }
    }
  };
  ct.prototype.getCharalign = function () {
    return this.charalign
  };
  ct.prototype.setCharalign = function (fw) {
    this.charalign = fw
  };
  ct.prototype.getCharspacing = function () {
    return this.charspacing
  };
  ct.prototype.setCharspacing = function (fw) {
    this.charspacing = fw
  };
  ct.prototype.getPosition = function () {
    return this.position
  };
  ct.prototype.setPosition = function (fw) {
    this.position = fw
  };
  ct.prototype.getDecimalPosition = function () {
    return this.decimalPosition
  };
  function eY(fw) {
    this.location;
    this.crossout;
    this.scriptsizemultiplier;
    this.carrythickness;
    this.g = ct;
    this.g(fw)
  }
  
  FMath_extend(eY, ct);
  eY.prototype.copyParentStyle = function (fw) {
    var fx = fw.getCopy();
    var fy = cT.getLength(this.scriptsizemultiplier, 1);
    fx.setMathsize(fy * fx.getMathsize());
    ct.prototype.copyParentStyle.call(this, fx)
  };
  eY.prototype.addChild = function (fw) {
    if (this.getChildren() == null) {
      this.setChildren(new aT())
    }
    fw.setParentBean(this);
    this.getChildren().add(fw)
  };
  eY.prototype.getLocation = function () {
    return this.location
  };
  eY.prototype.setLocation = function (fw) {
    this.location = fw
  };
  eY.prototype.getCrossout = function () {
    return this.crossout
  };
  eY.prototype.setCrossout = function (fw) {
    this.crossout = fw
  };
  eY.prototype.getScriptsizemultiplier = function () {
    return this.scriptsizemultiplier
  };
  eY.prototype.setScriptsizemultiplier = function (fw) {
    this.scriptsizemultiplier = fw
  };
  eY.prototype.getCarrythickness = function () {
    return this.carrythickness
  };
  eY.prototype.setCarrythickness = function (fw) {
    this.carrythickness = fw
  };
  function cO(fw) {
    this.location;
    this.crossout;
    this.carrythickness;
    this.c = aN;
    this.c(fw)
  }
  
  FMath_extend(cO, aN);
  cO.prototype.getLocation = function () {
    return this.location
  };
  cO.prototype.setLocation = function (fw) {
    this.location = fw
  };
  cO.prototype.getCrossout = function () {
    return this.crossout
  };
  cO.prototype.setCrossout = function (fw) {
    this.crossout = fw
  };
  cO.prototype.getCarrythickness = function () {
    return this.carrythickness
  };
  cO.prototype.setCarrythickness = function (fw) {
    this.carrythickness = fw
  };
  function c2(fw) {
    this.shift = 0;
    this.charalign;
    this.charspacing;
    this.rowspacing;
    this.position = 0;
    this.firstLineLongDiv = false;
    this.b = af;
    this.b(fw)
  }
  
  FMath_extend(c2, af);
  c2.prototype.addChild = function (fw) {
    if (fw instanceof ct || fw instanceof c2 || fw instanceof ay) {
      e7.prototype.addChild.call(this, fw)
    } else {
      var fx = new ct(this);
      fx.setCurrentDefStyle(this.getCurrentDefStyle());
      fx.addChild(fw);
      e7.prototype.addChild.call(this, fx)
    }
  };
  c2.prototype.copyParentStyle = function (fw) {
    af.prototype.copyParentStyle.call(this, fw)
  };
  c2.prototype.getCharalign = function () {
    return this.charalign
  };
  c2.prototype.setCharalign = function (fw) {
    this.charalign = fw
  };
  c2.prototype.getCharspacing = function () {
    return this.charspacing
  };
  c2.prototype.setCharspacing = function (fw) {
    this.charspacing = fw
  };
  c2.prototype.getRowspacing = function () {
    return this.rowspacing
  };
  c2.prototype.setRowspacing = function (fw) {
    this.rowspacing = fw
  };
  c2.prototype.getShift = function () {
    return this.shift
  };
  c2.prototype.setShift = function (fw) {
    this.shift = fw
  };
  c2.prototype.getPosition = function () {
    return this.position
  };
  c2.prototype.setPosition = function (fw) {
    this.position = fw
  };
  c2.prototype.isFirstLineLongDiv = function () {
    return this.firstLineLongDiv
  };
  c2.prototype.setFirstLineLongDiv = function (fw) {
    this.firstLineLongDiv = fw
  };
  function ay(fw) {
    this.lineLength = 0;
    this.leftoverhang;
    this.rightoverhang;
    this.mslinethickness;
    this.position;
    this.b = af;
    this.b(fw)
  }
  
  FMath_extend(ay, af);
  ay.prototype.copyParentStyle = function (fw) {
    af.prototype.copyParentStyle.call(this, fw)
  };
  ay.prototype.getLength = function () {
    return this.lineLength
  };
  ay.prototype.setLength = function (fw) {
    this.lineLength = fw
  };
  ay.prototype.getLeftoverhang = function () {
    return this.leftoverhang
  };
  ay.prototype.setLeftoverhang = function (fw) {
    this.leftoverhang = fw
  };
  ay.prototype.getRightoverhang = function () {
    return this.rightoverhang
  };
  ay.prototype.setRightoverhang = function (fw) {
    this.rightoverhang = fw
  };
  ay.prototype.getMslinethickness = function () {
    return this.mslinethickness
  };
  ay.prototype.setMslinethickness = function (fw) {
    this.mslinethickness = fw
  };
  ay.prototype.getPosition = function () {
    return this.position
  };
  ay.prototype.setPosition = function (fw) {
    this.position = fw
  };
  function j(fw) {
    this.width;
    this.height;
    this.depth;
    this.f = ex;
    this.f(fw)
  }
  
  FMath_extend(j, ex);
  j.prototype.getWidth = function () {
    return this.width
  };
  j.prototype.setWidth = function (fw) {
    this.width = fw
  };
  j.prototype.getHeight = function () {
    return this.height
  };
  j.prototype.setHeight = function (fw) {
    this.height = fw
  };
  j.prototype.getDepth = function () {
    return this.depth
  };
  j.prototype.setDepth = function (fw) {
    this.depth = fw
  };
  j.prototype.clone = function () {
    var fw = new j(this.getParentBean());
    fw.width = this.width;
    fw.height = this.height;
    fw.depth = this.depth;
    this.copyAttributes(fw);
    return fw
  };
  function dh(fw) {
    this.closed = false;
    this.closedLength;
    this.c = aN;
    this.c(fw)
  }
  
  FMath_extend(dh, aN);
  dh.prototype.isClosed = function () {
    return this.closed
  };
  dh.prototype.setClosed = function (fw) {
    this.closed = fw
  };
  dh.prototype.getClosedLength = function () {
    return this.closedLength
  };
  dh.prototype.setClosedLength = function (fw) {
    this.closedLength = fw
  };
  function ea(fw) {
    this.align;
    this.stackalign;
    this.zeroBean = null;
    this.h = c2;
    this.h(fw)
  }
  
  FMath_extend(ea, c2);
  ea.prototype.copyParentStyle = function (fw) {
    this.zeroBean = new cy(this);
    this.zeroBean.setCurrentDefStyle(this.getCurrentDefStyle());
    this.zeroBean.setText(this.getCurrentDefStyle().getZeroChar());
    c2.prototype.copyParentStyle.call(this, fw);
    this.zeroBean.copyParentStyle(this.getStyle())
  };
  ea.prototype.getAlign = function () {
    return this.align
  };
  ea.prototype.setAlign = function (fw) {
    this.align = fw
  };
  ea.prototype.getStackalign = function () {
    return this.stackalign
  };
  ea.prototype.setStackalign = function (fw) {
    this.stackalign = fw
  };
  ea.prototype.getZeroBean = function () {
    return this.zeroBean
  };
  function aS() {
    this.scriptlevel;
    this.displaystyle;
    this.scriptsizemultiplier = 0;
    this.scriptminsize;
    this.infixlinebreakstyle;
    this.decimalpoint;
    this.accent;
    this.accentunder;
    this.align;
    this.alignmentscope;
    this.bevelled;
    this.charalign;
    this.charspacing;
    this.close;
    this.columnalign;
    this.columnlines;
    this.columnspacing;
    this.columnspan;
    this.columnwidth;
    this.crossout;
    this.carrythickness;
    this.denomalign;
    this.depth;
    this.dir;
    this.edge;
    this.equalcolumns;
    this.equalrows;
    this.fence;
    this.form;
    this.frame;
    this.framespacing;
    this.groupalign;
    this.height;
    this.indentalign;
    this.indentalignfirst;
    this.indentalignlast;
    this.indentshift;
    this.indentshiftfirst;
    this.indentshiftlast;
    this.indenttarget;
    this.largeop;
    this.leftoverhang;
    this.lineLength;
    this.linebreak;
    this.linebreakmultchar;
    this.linebreakstyle;
    this.lineleading;
    this.linethickness;
    this.location;
    this.longdivstyle;
    this.lquote;
    this.lspace;
    this.maxsize;
    this.minlabelspacing;
    this.minsize;
    this.movablelimits;
    this.mslinethickness;
    this.notation;
    this.numalign;
    this.open;
    this.position;
    this.rightoverhang;
    this.rowalign;
    this.rowlines;
    this.rowspacing;
    this.rowspan;
    this.rquote;
    this.rspace;
    this.selection;
    this.separator;
    this.separators;
    this.shift;
    this.side;
    this.stackalign;
    this.stretchy;
    this.subscriptshift;
    this.superscriptshift;
    this.symmetric;
    this.valign;
    this.voffset;
    this.width;
    this.zeroChar = "0";
    this.drawBaseline = false;
    this.drawAxisline = false;
    this.drawSuperscriptline = false;
    this.drawMaxwidthline = false;
    this.enclosethickness;
    this.enclosespace;
    this.encloserounded
  }
  
  aS.prototype.getCopy = function () {
    var fw = new aS();
    fw.scriptlevel = this.scriptlevel;
    fw.displaystyle = this.displaystyle;
    fw.scriptsizemultiplier = this.scriptsizemultiplier;
    fw.scriptminsize = this.scriptminsize;
    fw.infixlinebreakstyle = this.infixlinebreakstyle;
    fw.decimalpoint = this.decimalpoint;
    fw.accent = this.accent;
    fw.accentunder = this.accentunder;
    fw.align = this.align;
    fw.alignmentscope = this.alignmentscope;
    fw.bevelled = this.bevelled;
    fw.charalign = this.charalign;
    fw.charspacing = this.charspacing;
    fw.close = this.close;
    fw.columnalign = this.columnalign;
    fw.columnlines = this.columnlines;
    fw.columnspacing = this.columnspacing;
    fw.columnspan = this.columnspan;
    fw.columnwidth = this.columnwidth;
    fw.crossout = this.crossout;
    fw.denomalign = this.denomalign;
    fw.depth = this.depth;
    fw.dir = this.dir;
    fw.edge = this.edge;
    fw.equalcolumns = this.equalcolumns;
    fw.equalrows = this.equalrows;
    fw.fence = this.fence;
    fw.form = this.form;
    fw.frame = this.frame;
    fw.framespacing = this.framespacing;
    fw.groupalign = this.groupalign;
    fw.height = this.height;
    fw.indentalign = this.indentalign;
    fw.indentalignfirst = this.indentalignfirst;
    fw.indentalignlast = this.indentalignlast;
    fw.indentshift = this.indentshift;
    fw.indentshiftfirst = this.indentshiftfirst;
    fw.indentshiftlast = this.indentshiftlast;
    fw.indenttarget = this.indenttarget;
    fw.largeop = this.largeop;
    fw.leftoverhang = this.leftoverhang;
    fw.lineLength = this.lineLength;
    fw.linebreak = this.linebreak;
    fw.linebreakmultchar = this.linebreakmultchar;
    fw.linebreakstyle = this.linebreakstyle;
    fw.lineleading = this.lineleading;
    fw.linethickness = this.linethickness;
    fw.location = this.location;
    fw.longdivstyle = this.longdivstyle;
    fw.lquote = this.lquote;
    fw.lspace = this.lspace;
    fw.maxsize = this.maxsize;
    fw.minlabelspacing = this.minlabelspacing;
    fw.minsize = this.minsize;
    fw.movablelimits = this.movablelimits;
    fw.mslinethickness = this.mslinethickness;
    fw.notation = this.notation;
    fw.numalign = this.numalign;
    fw.open = this.open;
    fw.position = this.position;
    fw.rightoverhang = this.rightoverhang;
    fw.rowalign = this.rowalign;
    fw.rowlines = this.rowlines;
    fw.rowspacing = this.rowspacing;
    fw.rowspan = this.rowspan;
    fw.rquote = this.rquote;
    fw.rspace = this.rspace;
    fw.selection = this.selection;
    fw.separator = this.separator;
    fw.separators = this.separators;
    fw.shift = this.shift;
    fw.side = this.side;
    fw.stackalign = this.stackalign;
    fw.stretchy = this.stretchy;
    fw.subscriptshift = this.subscriptshift;
    fw.superscriptshift = this.superscriptshift;
    fw.symmetric = this.symmetric;
    fw.valign = this.valign;
    fw.width = this.width;
    return fw
  };
  aS.prototype.getScriptlevel = function () {
    return this.scriptlevel
  };
  aS.prototype.setScriptlevel = function (fw) {
    this.scriptlevel = fw
  };
  aS.prototype.getDisplaystyle = function () {
    return this.displaystyle
  };
  aS.prototype.setDisplaystyle = function (fw) {
    this.displaystyle = fw
  };
  aS.prototype.getScriptsizemultiplier = function () {
    return this.scriptsizemultiplier
  };
  aS.prototype.setScriptsizemultiplier = function (fw) {
    this.scriptsizemultiplier = fw
  };
  aS.prototype.getScriptminsize = function () {
    return this.scriptminsize
  };
  aS.prototype.setScriptminsize = function (fw) {
    this.scriptminsize = fw
  };
  aS.prototype.getInfixlinebreakstyle = function () {
    return this.infixlinebreakstyle
  };
  aS.prototype.setInfixlinebreakstyle = function (fw) {
    this.infixlinebreakstyle = fw
  };
  aS.prototype.getDecimalpoint = function () {
    return this.decimalpoint
  };
  aS.prototype.setDecimalpoint = function (fw) {
    this.decimalpoint = fw
  };
  aS.prototype.getAccent = function () {
    return this.accent
  };
  aS.prototype.setAccent = function (fw) {
    this.accent = fw
  };
  aS.prototype.getAccentunder = function () {
    return this.accentunder
  };
  aS.prototype.setAccentunder = function (fw) {
    this.accentunder = fw
  };
  aS.prototype.getAlign = function () {
    return this.align
  };
  aS.prototype.setAlign = function (fw) {
    this.align = fw
  };
  aS.prototype.getAlignmentscope = function () {
    return this.alignmentscope
  };
  aS.prototype.setAlignmentscope = function (fw) {
    this.alignmentscope = fw
  };
  aS.prototype.getBevelled = function () {
    return this.bevelled
  };
  aS.prototype.setBevelled = function (fw) {
    this.bevelled = fw
  };
  aS.prototype.getCharalign = function () {
    return this.charalign
  };
  aS.prototype.setCharalign = function (fw) {
    this.charalign = fw
  };
  aS.prototype.getCharspacing = function () {
    return this.charspacing
  };
  aS.prototype.setCharspacing = function (fw) {
    this.charspacing = fw
  };
  aS.prototype.getClose = function () {
    return this.close
  };
  aS.prototype.setClose = function (fw) {
    this.close = fw
  };
  aS.prototype.getColumnalign = function () {
    return this.columnalign
  };
  aS.prototype.setColumnalign = function (fw) {
    this.columnalign = fw
  };
  aS.prototype.getColumnlines = function () {
    return this.columnlines
  };
  aS.prototype.setColumnlines = function (fw) {
    this.columnlines = fw
  };
  aS.prototype.getColumnspacing = function () {
    return this.columnspacing
  };
  aS.prototype.setColumnspacing = function (fw) {
    this.columnspacing = fw
  };
  aS.prototype.getColumnspan = function () {
    return this.columnspan
  };
  aS.prototype.setColumnspan = function (fw) {
    this.columnspan = fw
  };
  aS.prototype.getColumnwidth = function () {
    return this.columnwidth
  };
  aS.prototype.setColumnwidth = function (fw) {
    this.columnwidth = fw
  };
  aS.prototype.getCrossout = function () {
    return this.crossout
  };
  aS.prototype.setCrossout = function (fw) {
    this.crossout = fw
  };
  aS.prototype.getDenomalign = function () {
    return this.denomalign
  };
  aS.prototype.setDenomalign = function (fw) {
    this.denomalign = fw
  };
  aS.prototype.getDepth = function () {
    return this.depth
  };
  aS.prototype.setDepth = function (fw) {
    this.depth = fw
  };
  aS.prototype.getDir = function () {
    return this.dir
  };
  aS.prototype.setDir = function (fw) {
    this.dir = fw
  };
  aS.prototype.getEdge = function () {
    return this.edge
  };
  aS.prototype.setEdge = function (fw) {
    this.edge = fw
  };
  aS.prototype.getEqualcolumns = function () {
    return this.equalcolumns
  };
  aS.prototype.setEqualcolumns = function (fw) {
    this.equalcolumns = fw
  };
  aS.prototype.getEqualrows = function () {
    return this.equalrows
  };
  aS.prototype.setEqualrows = function (fw) {
    this.equalrows = fw
  };
  aS.prototype.getFence = function () {
    return this.fence
  };
  aS.prototype.setFence = function (fw) {
    this.fence = fw
  };
  aS.prototype.getForm = function () {
    return this.form
  };
  aS.prototype.setForm = function (fw) {
    this.form = fw
  };
  aS.prototype.getFrame = function () {
    return this.frame
  };
  aS.prototype.setFrame = function (fw) {
    this.frame = fw
  };
  aS.prototype.getFramespacing = function () {
    return this.framespacing
  };
  aS.prototype.setFramespacing = function (fw) {
    this.framespacing = fw
  };
  aS.prototype.getGroupalign = function () {
    return this.groupalign
  };
  aS.prototype.setGroupalign = function (fw) {
    this.groupalign = fw
  };
  aS.prototype.getHeight = function () {
    return this.height
  };
  aS.prototype.setHeight = function (fw) {
    this.height = fw
  };
  aS.prototype.getIndentalign = function () {
    return this.indentalign
  };
  aS.prototype.setIndentalign = function (fw) {
    this.indentalign = fw
  };
  aS.prototype.getIndentalignfirst = function () {
    return this.indentalignfirst
  };
  aS.prototype.setIndentalignfirst = function (fw) {
    this.indentalignfirst = fw
  };
  aS.prototype.getIndentalignlast = function () {
    return this.indentalignlast
  };
  aS.prototype.setIndentalignlast = function (fw) {
    this.indentalignlast = fw
  };
  aS.prototype.getIndentshift = function () {
    return this.indentshift
  };
  aS.prototype.setIndentshift = function (fw) {
    this.indentshift = fw
  };
  aS.prototype.getIndentshiftfirst = function () {
    return this.indentshiftfirst
  };
  aS.prototype.setIndentshiftfirst = function (fw) {
    this.indentshiftfirst = fw
  };
  aS.prototype.getIndentshiftlast = function () {
    return this.indentshiftlast
  };
  aS.prototype.setIndentshiftlast = function (fw) {
    this.indentshiftlast = fw
  };
  aS.prototype.getIndenttarget = function () {
    return this.indenttarget
  };
  aS.prototype.setIndenttarget = function (fw) {
    this.indenttarget = fw
  };
  aS.prototype.getLargeop = function () {
    return this.largeop
  };
  aS.prototype.setLargeop = function (fw) {
    this.largeop = fw
  };
  aS.prototype.getLeftoverhang = function () {
    return this.leftoverhang
  };
  aS.prototype.setLeftoverhang = function (fw) {
    this.leftoverhang = fw
  };
  aS.prototype.getLength = function () {
    return this.lineLength
  };
  aS.prototype.setLength = function (fw) {
    this.lineLength = fw
  };
  aS.prototype.getLinebreak = function () {
    return this.linebreak
  };
  aS.prototype.setLinebreak = function (fw) {
    this.linebreak = fw
  };
  aS.prototype.getLinebreakmultchar = function () {
    return this.linebreakmultchar
  };
  aS.prototype.setLinebreakmultchar = function (fw) {
    this.linebreakmultchar = fw
  };
  aS.prototype.getLinebreakstyle = function () {
    return this.linebreakstyle
  };
  aS.prototype.setLinebreakstyle = function (fw) {
    this.linebreakstyle = fw
  };
  aS.prototype.getLineleading = function () {
    return this.lineleading
  };
  aS.prototype.setLineleading = function (fw) {
    this.lineleading = fw
  };
  aS.prototype.getLinethickness = function () {
    return this.linethickness
  };
  aS.prototype.setLinethickness = function (fw) {
    this.linethickness = fw
  };
  aS.prototype.getLocation = function () {
    return this.location
  };
  aS.prototype.setLocation = function (fw) {
    this.location = fw
  };
  aS.prototype.getLongdivstyle = function () {
    return this.longdivstyle
  };
  aS.prototype.setLongdivstyle = function (fw) {
    this.longdivstyle = fw
  };
  aS.prototype.getLquote = function () {
    return this.lquote
  };
  aS.prototype.setLquote = function (fw) {
    this.lquote = fw
  };
  aS.prototype.getLspace = function () {
    return this.lspace
  };
  aS.prototype.setLspace = function (fw) {
    this.lspace = fw
  };
  aS.prototype.getMaxsize = function () {
    return this.maxsize
  };
  aS.prototype.setMaxsize = function (fw) {
    this.maxsize = fw
  };
  aS.prototype.getMinlabelspacing = function () {
    return this.minlabelspacing
  };
  aS.prototype.setMinlabelspacing = function (fw) {
    this.minlabelspacing = fw
  };
  aS.prototype.getMinsize = function () {
    return this.minsize
  };
  aS.prototype.setMinsize = function (fw) {
    this.minsize = fw
  };
  aS.prototype.getMovablelimits = function () {
    return this.movablelimits
  };
  aS.prototype.setMovablelimits = function (fw) {
    this.movablelimits = fw
  };
  aS.prototype.getMslinethickness = function () {
    return this.mslinethickness
  };
  aS.prototype.setMslinethickness = function (fw) {
    this.mslinethickness = fw
  };
  aS.prototype.getNotation = function () {
    return this.notation
  };
  aS.prototype.setNotation = function (fw) {
    this.notation = fw
  };
  aS.prototype.getNumalign = function () {
    return this.numalign
  };
  aS.prototype.setNumalign = function (fw) {
    this.numalign = fw
  };
  aS.prototype.getOpen = function () {
    return this.open
  };
  aS.prototype.setOpen = function (fw) {
    this.open = fw
  };
  aS.prototype.getPosition = function () {
    return this.position
  };
  aS.prototype.setPosition = function (fw) {
    this.position = fw
  };
  aS.prototype.getRightoverhang = function () {
    return this.rightoverhang
  };
  aS.prototype.setRightoverhang = function (fw) {
    this.rightoverhang = fw
  };
  aS.prototype.getRowalign = function () {
    return this.rowalign
  };
  aS.prototype.setRowalign = function (fw) {
    this.rowalign = fw
  };
  aS.prototype.getRowlines = function () {
    return this.rowlines
  };
  aS.prototype.setRowlines = function (fw) {
    this.rowlines = fw
  };
  aS.prototype.getRowspacing = function () {
    return this.rowspacing
  };
  aS.prototype.setRowspacing = function (fw) {
    this.rowspacing = fw
  };
  aS.prototype.getRowspan = function () {
    return this.rowspan
  };
  aS.prototype.setRowspan = function (fw) {
    this.rowspan = fw
  };
  aS.prototype.getRquote = function () {
    return this.rquote
  };
  aS.prototype.setRquote = function (fw) {
    this.rquote = fw
  };
  aS.prototype.getRspace = function () {
    return this.rspace
  };
  aS.prototype.setRspace = function (fw) {
    this.rspace = fw
  };
  aS.prototype.getSelection = function () {
    return this.selection
  };
  aS.prototype.setSelection = function (fw) {
    this.selection = fw
  };
  aS.prototype.getSeparator = function () {
    return this.separator
  };
  aS.prototype.setSeparator = function (fw) {
    this.separator = fw
  };
  aS.prototype.getSeparators = function () {
    return this.separators
  };
  aS.prototype.setSeparators = function (fw) {
    this.separators = fw
  };
  aS.prototype.getShift = function () {
    return this.shift
  };
  aS.prototype.setShift = function (fw) {
    this.shift = fw
  };
  aS.prototype.getSide = function () {
    return this.side
  };
  aS.prototype.setSide = function (fw) {
    this.side = fw
  };
  aS.prototype.getStackalign = function () {
    return this.stackalign
  };
  aS.prototype.setStackalign = function (fw) {
    this.stackalign = fw
  };
  aS.prototype.getStretchy = function () {
    return this.stretchy
  };
  aS.prototype.setStretchy = function (fw) {
    this.stretchy = fw
  };
  aS.prototype.getSubscriptshift = function () {
    return this.subscriptshift
  };
  aS.prototype.setSubscriptshift = function (fw) {
    this.subscriptshift = fw
  };
  aS.prototype.getSuperscriptshift = function () {
    return this.superscriptshift
  };
  aS.prototype.setSuperscriptshift = function (fw) {
    this.superscriptshift = fw
  };
  aS.prototype.getSymmetric = function () {
    return this.symmetric
  };
  aS.prototype.setSymmetric = function (fw) {
    this.symmetric = fw
  };
  aS.prototype.getValign = function () {
    return this.valign
  };
  aS.prototype.setValign = function (fw) {
    this.valign = fw
  };
  aS.prototype.getWidth = function () {
    return this.width
  };
  aS.prototype.setWidth = function (fw) {
    this.width = fw
  };
  aS.prototype.isDrawBaseline = function () {
    return this.drawBaseline
  };
  aS.prototype.setDrawBaseline = function (fw) {
    this.drawBaseline = fw
  };
  aS.prototype.isDrawAxisline = function () {
    return this.drawAxisline
  };
  aS.prototype.setDrawAxisline = function (fw) {
    this.drawAxisline = fw
  };
  aS.prototype.isDrawSuperscriptline = function () {
    return this.drawSuperscriptline
  };
  aS.prototype.setDrawSuperscriptline = function (fw) {
    this.drawSuperscriptline = fw
  };
  aS.prototype.isDrawMaxwidthline = function () {
    return this.drawMaxwidthline
  };
  aS.prototype.setDrawMaxwidthline = function (fw) {
    this.drawMaxwidthline = fw
  };
  aS.prototype.getZeroChar = function () {
    return this.zeroChar
  };
  aS.prototype.setZeroChar = function (fw) {
    this.zeroChar = fw
  };
  aS.prototype.getCarrythickness = function () {
    return this.carrythickness
  };
  aS.prototype.setCarrythickness = function (fw) {
    this.carrythickness = fw
  };
  aS.prototype.getEnclosethickness = function () {
    return this.enclosethickness
  };
  aS.prototype.setEnclosethickness = function (fw) {
    this.enclosethickness = fw
  };
  aS.prototype.getEnclosespace = function () {
    return this.enclosespace
  };
  aS.prototype.setEnclosespace = function (fw) {
    this.enclosespace = fw
  };
  aS.prototype.getVoffset = function () {
    return this.voffset
  };
  aS.prototype.setVoffset = function (fw) {
    this.voffset = fw
  };
  aS.prototype.getEncloserounded = function () {
    return this.encloserounded
  };
  aS.prototype.setEncloserounded = function (fw) {
    this.encloserounded = fw
  };
  function ce(fw) {
    this._base;
    this.sub;
    this.subscriptshift;
    this.subscriptPostion;
    this.b = af;
    this.b(fw)
  }
  
  FMath_extend(ce, af);
  ce.prototype.copyParentStyle = function (fw) {
    this._base = this.getChildren().get(0);
    this.sub = this.getChildren().get(1);
    this.sub.modifyScriptlevel(1);
    this.sub.modifyDisplay(false);
    af.prototype.copyParentStyle.call(this, fw)
  };
  ce.prototype.getBase = function () {
    return this._base
  };
  ce.prototype.getSub = function () {
    return this.sub
  };
  ce.prototype.getSubscriptshift = function () {
    return this.subscriptshift
  };
  ce.prototype.setSubscriptshift = function (fw) {
    this.subscriptshift = fw
  };
  ce.prototype.getSubscriptPostion = function () {
    return this.subscriptPostion
  };
  ce.prototype.setSubscriptPostion = function (fw) {
    this.subscriptPostion = fw
  };
  function av(fw) {
    this._base;
    this.sub;
    this.exp;
    this.superscriptshift;
    this.subscriptshift;
    this.superscriptPostion;
    this.subscriptPostion;
    this.b = af;
    this.b(fw)
  }
  
  FMath_extend(av, af);
  av.prototype.copyParentStyle = function (fw) {
    this._base = this.getChildren().get(0);
    this.sub = this.getChildren().get(1);
    this.exp = this.getChildren().get(2);
    this.sub.modifyScriptlevel(1);
    this.sub.modifyDisplay(false);
    if (!this.exp.isAccent()) {
      this.exp.modifyScriptlevel(1)
    }
    this.exp.modifyDisplay(false);
    af.prototype.copyParentStyle.call(this, fw)
  };
  av.prototype.getBase = function () {
    return this._base
  };
  av.prototype.getSub = function () {
    return this.sub
  };
  av.prototype.getExp = function () {
    return this.exp
  };
  av.prototype.getSuperscriptshift = function () {
    return this.superscriptshift
  };
  av.prototype.setSuperscriptshift = function (fw) {
    this.superscriptshift = fw
  };
  av.prototype.getSubscriptshift = function () {
    return this.subscriptshift
  };
  av.prototype.setSubscriptshift = function (fw) {
    this.subscriptshift = fw
  };
  av.prototype.getSuperscriptPostion = function () {
    return this.superscriptPostion
  };
  av.prototype.setSuperscriptPostion = function (fw) {
    this.superscriptPostion = fw
  };
  av.prototype.getSubscriptPostion = function () {
    return this.subscriptPostion
  };
  av.prototype.setSubscriptPostion = function (fw) {
    this.subscriptPostion = fw
  };
  function cl(fw) {
    this._base;
    this.exp;
    this.superscriptshift;
    this.superscriptPostion;
    this.b = af;
    this.b(fw)
  }
  
  FMath_extend(cl, af);
  cl.prototype.copyParentStyle = function (fw) {
    this._base = this.getChildren().get(0);
    this.exp = this.getChildren().get(1);
    if (!this.exp.isAccent()) {
      this.exp.modifyScriptlevel(1)
    }
    this.exp.modifyDisplay(false);
    af.prototype.copyParentStyle.call(this, fw)
  };
  cl.prototype.getBase = function () {
    return this._base
  };
  cl.prototype.getExp = function () {
    return this.exp
  };
  cl.prototype.getSuperscriptshift = function () {
    return this.superscriptshift
  };
  cl.prototype.setSuperscriptshift = function (fw) {
    this.superscriptshift = fw
  };
  cl.prototype.getSuperscriptPostion = function () {
    return this.superscriptPostion
  };
  cl.prototype.setSuperscriptPostion = function (fw) {
    this.superscriptPostion = fw
  };
  function cW(fw) {
    this.hasLabel = false;
    this.labelProcessed = false;
    this.align;
    this.rowalign;
    this.columnalign;
    this.columnwidth;
    this.groupalign;
    this.alignmentscope;
    this.width;
    this.height;
    this.rowspacing;
    this.columnspacing;
    this.rowlines;
    this.rowlinescolor;
    this.rowlinesthickness;
    this.columnlines;
    this.columnlinescolor;
    this.columnlinesthickness;
    this.frame;
    this.framecolor;
    this.framethickness;
    this.framespacing;
    this.equalrows;
    this.equalcolumns;
    this.side;
    this.minlabelspacing;
    this.labelspacing;
    this.b = af;
    this.b(fw)
  }
  
  FMath_extend(cW, af);
  cW.prototype.copyParentStyle = function (fw) {
    var fA = this.getChildren();
    if (fA != null) {
      for (var fz = 0; fz < fA.size(); fz++) {
        if (fA.get(fz) instanceof a1) {
          this.hasLabel = true;
          break
        }
      }
    }
    af.prototype.copyParentStyle.call(this, fw);
    if (this.getFrame() != null && !("none" == this.getFrame())) {
      var fx = this.getFramecolor();
      var fy = this.getFramethickness();
      this.getCssstyle().setBorderStyle(this.getFrame());
      if (fx != null) {
        this.getCssstyle().setBorderColor(fx)
      }
      this.getCssstyle().setBorderWidth(fy)
    }
    if (this.getFramecolor() == null) {
      this.setFramecolor(this.getStyle().getColor())
    }
    if (this.getRowlinescolor() == null) {
      this.setRowlinescolor(this.getStyle().getColor())
    }
    if (this.getColumnlinescolor() == null) {
      this.setColumnlinescolor(this.getStyle().getColor())
    }
  };
  cW.prototype.getAlign = function () {
    return this.align
  };
  cW.prototype.setAlign = function (fw) {
    this.align = fw
  };
  cW.prototype.getRowalign = function () {
    return this.rowalign
  };
  cW.prototype.setRowalign = function (fw) {
    this.rowalign = fw
  };
  cW.prototype.getColumnalign = function () {
    return this.columnalign
  };
  cW.prototype.setColumnalign = function (fw) {
    this.columnalign = fw
  };
  cW.prototype.getColumnwidth = function () {
    return this.columnwidth
  };
  cW.prototype.setColumnwidth = function (fw) {
    this.columnwidth = fw
  };
  cW.prototype.getGroupalign = function () {
    return this.groupalign
  };
  cW.prototype.setGroupalign = function (fw) {
    this.groupalign = fw
  };
  cW.prototype.getAlignmentscope = function () {
    return this.alignmentscope
  };
  cW.prototype.setAlignmentscope = function (fw) {
    this.alignmentscope = fw
  };
  cW.prototype.getWidth = function () {
    return this.width
  };
  cW.prototype.setWidth = function (fw) {
    this.width = fw
  };
  cW.prototype.getRowspacing = function () {
    return this.rowspacing
  };
  cW.prototype.setRowspacing = function (fw) {
    this.rowspacing = fw
  };
  cW.prototype.getColumnspacing = function () {
    return this.columnspacing
  };
  cW.prototype.setColumnspacing = function (fw) {
    this.columnspacing = fw
  };
  cW.prototype.getRowlines = function () {
    return this.rowlines
  };
  cW.prototype.setRowlines = function (fw) {
    this.rowlines = fw
  };
  cW.prototype.getColumnlines = function () {
    return this.columnlines
  };
  cW.prototype.setColumnlines = function (fw) {
    this.columnlines = fw
  };
  cW.prototype.getFrame = function () {
    return this.frame
  };
  cW.prototype.setFrame = function (fw) {
    this.frame = fw
  };
  cW.prototype.getFramespacing = function () {
    return this.framespacing
  };
  cW.prototype.setFramespacing = function (fw) {
    this.framespacing = fw
  };
  cW.prototype.getEqualrows = function () {
    return this.equalrows
  };
  cW.prototype.setEqualrows = function (fw) {
    this.equalrows = fw
  };
  cW.prototype.getEqualcolumns = function () {
    return this.equalcolumns
  };
  cW.prototype.setEqualcolumns = function (fw) {
    this.equalcolumns = fw
  };
  cW.prototype.getSide = function () {
    return this.side
  };
  cW.prototype.setSide = function (fw) {
    this.side = fw
  };
  cW.prototype.getMinlabelspacing = function () {
    return this.minlabelspacing
  };
  cW.prototype.setMinlabelspacing = function (fw) {
    this.minlabelspacing = fw
  };
  cW.prototype.getHeight = function () {
    return this.height
  };
  cW.prototype.setHeight = function (fw) {
    this.height = fw
  };
  cW.prototype.getColumnlinescolor = function () {
    return this.columnlinescolor
  };
  cW.prototype.setColumnlinescolor = function (fw) {
    this.columnlinescolor = fw
  };
  cW.prototype.getColumnlinesthickness = function () {
    return this.columnlinesthickness
  };
  cW.prototype.setColumnlinesthickness = function (fw) {
    this.columnlinesthickness = fw
  };
  cW.prototype.getFramecolor = function () {
    return this.framecolor
  };
  cW.prototype.setFramecolor = function (fw) {
    this.framecolor = fw
  };
  cW.prototype.getFramethickness = function () {
    return this.framethickness
  };
  cW.prototype.setFramethickness = function (fw) {
    this.framethickness = fw
  };
  cW.prototype.getRowlinescolor = function () {
    return this.rowlinescolor
  };
  cW.prototype.setRowlinescolor = function (fw) {
    this.rowlinescolor = fw
  };
  cW.prototype.getRowlinesthickness = function () {
    return this.rowlinesthickness
  };
  cW.prototype.setRowlinesthickness = function (fw) {
    this.rowlinesthickness = fw
  };
  cW.prototype.getHasLabel = function () {
    if (this.labelProcessed) {
      return false
    }
    return this.hasLabel
  };
  cW.prototype.isLabelProcessed = function () {
    return this.labelProcessed
  };
  cW.prototype.setLabelProcessed = function (fw) {
    this.labelProcessed = fw
  };
  cW.prototype.getLabelspacing = function () {
    return this.labelspacing
  };
  cW.prototype.setLabelspacing = function (fw) {
    this.labelspacing = fw
  };
  function A(fw) {
    this.d = bH;
    this.d(fw)
  }
  
  FMath_extend(A, bH);
  function bF(fw) {
    this.columnalign;
    this.rowspan;
    this.columnspan;
    this.groupalign;
    this.c = aN;
    this.c(fw)
  }
  
  FMath_extend(bF, aN);
  bF.prototype.copyParentStyle = function (fw) {
    var fy = this.getChildren();
    if (fy == null) {
      var fx = new aI(this);
      fx.setDynamicCreated(true);
      this.addChild(fx)
    }
    aN.prototype.copyParentStyle.call(this, fw)
  };
  bF.prototype.getColumnalign = function () {
    return this.columnalign
  };
  bF.prototype.setColumnalign = function (fw) {
    this.columnalign = fw
  };
  bF.prototype.getRowspan = function () {
    return this.rowspan
  };
  bF.prototype.setRowspan = function (fw) {
    this.rowspan = fw
  };
  bF.prototype.getColumnspan = function () {
    return this.columnspan
  };
  bF.prototype.setColumnspan = function (fw) {
    this.columnspan = fw
  };
  bF.prototype.getGroupalign = function () {
    return this.groupalign
  };
  bF.prototype.setGroupalign = function (fw) {
    this.groupalign = fw
  };
  function cy(fw) {
    this.text;
    this.shapeList = new aT();
    this.b = af;
    this.b(fw)
  }
  
  FMath_extend(cy, af);
  cy.prototype.copyParentStyle = function (fw) {
    af.prototype.copyParentStyle.call(this, fw)
  };
  cy.prototype.getText = function () {
    return this.text
  };
  cy.prototype.setText = function (fw) {
    this.text = fw
  };
  cy.prototype.getShapeList = function () {
    return this.shapeList
  };
  function bR(fw) {
    this.rowalign;
    this.columnalign;
    this.columnspacing;
    this.b = af;
    this.b(fw)
  }
  
  FMath_extend(bR, af);
  bR.prototype.copyParentStyle = function (fw) {
    this.verifyTdChildren();
    af.prototype.copyParentStyle.call(this, fw)
  };
  bR.prototype.verifyTdChildren = function () {
    var fy = this.getChildren();
    if (fy != null) {
      for (var fx = 0; fx < fy.size(); fx++) {
        var fz = fy.get(fx);
        if (fz instanceof bF) {
          continue
        }
        var fw = new bF(this);
        fz.copyAttributes(fw);
        fw.addChild(fz);
        fy.remove(fx);
        fy.addTo(fx, fw)
      }
    }
  };
  bR.prototype.getRowalign = function () {
    return this.rowalign
  };
  bR.prototype.setRowalign = function (fw) {
    this.rowalign = fw
  };
  bR.prototype.getColumnalign = function () {
    return this.columnalign
  };
  bR.prototype.setColumnalign = function (fw) {
    this.columnalign = fw
  };
  bR.prototype.getColumnspacing = function () {
    return this.columnspacing
  };
  bR.prototype.setColumnspacing = function (fw) {
    this.columnspacing = fw
  };
  function a1(fw) {
    this.label;
    this.i = bR;
    this.i(fw)
  }
  
  FMath_extend(a1, bR);
  a1.prototype.copyParentStyle = function (fw) {
    bR.prototype.copyParentStyle.call(this, fw);
    var fx = this.getChildren();
    if (fx != null && fx.size() > 0) {
      this.label = fx.get(0);
      fx.remove(0)
    }
  };
  a1.prototype.getLabel = function () {
    return this.label
  };
  a1.prototype.setLabel = function (fw) {
    this.label = fw
  };
  function bL(fw) {
    this._base;
    this.sub;
    this.accentunder = null;
    this.align;
    this.underSpace;
    this.b = af;
    this.b(fw);
    this.setFixChildrenSize(true)
  }
  
  FMath_extend(bL, af);
  bL.prototype.copyParentStyle = function (fw) {
    this.initChildren();
    if (!this.isAccentunder()) {
      this.sub.modifyScriptlevel(1)
    }
    this.sub.modifyDisplay(false);
    af.prototype.copyParentStyle.call(this, fw)
  };
  bL.prototype.initChildren = function () {
    if (this._base != null) {
      return
    }
    this._base = this.getChildren().get(0);
    this.sub = this.getChildren().get(1)
  };
  bL.prototype.getBase = function () {
    return this._base
  };
  bL.prototype.getSub = function () {
    return this.sub
  };
  bL.prototype.isAccentunder = function () {
    if (this.accentunder != null) {
      return ej.getBooleanValue(this.accentunder, false)
    }
    this.initChildren();
    return this.sub.isAccent()
  };
  bL.prototype.setAccentunder = function (fw) {
    this.accentunder = fw
  };
  bL.prototype.getAlign = function () {
    return this.align
  };
  bL.prototype.setAlign = function (fw) {
    this.align = fw
  };
  bL.prototype.getUnderSpace = function () {
    return this.underSpace
  };
  bL.prototype.setUnderSpace = function (fw) {
    this.underSpace = fw
  };
  function b1(fw) {
    this._base;
    this.sub;
    this.exp;
    this.accent = null;
    this.accentunder = null;
    this.align;
    this.overSpace;
    this.underSpace;
    this.b = af;
    this.b(fw);
    this.setFixChildrenSize(true)
  }
  
  FMath_extend(b1, af);
  b1.prototype.copyParentStyle = function (fw) {
    this.initChildren();
    if (!this.isAccentunder()) {
      this.sub.modifyScriptlevel(1)
    }
    this.sub.modifyDisplay(false);
    if (!this.isAccent()) {
      this.exp.modifyScriptlevel(1)
    }
    this.exp.modifyDisplay(false);
    af.prototype.copyParentStyle.call(this, fw)
  };
  b1.prototype.initChildren = function () {
    if (this._base != null) {
      return
    }
    this._base = this.getChildren().get(0);
    this.sub = this.getChildren().get(1);
    this.exp = this.getChildren().get(2)
  };
  b1.prototype.getBase = function () {
    return this._base
  };
  b1.prototype.getSub = function () {
    return this.sub
  };
  b1.prototype.getExp = function () {
    return this.exp
  };
  b1.prototype.isAccent = function () {
    if (this.accent != null) {
      return ej.getBooleanValue(this.accent, false)
    }
    this.initChildren();
    return this.exp.isAccent()
  };
  b1.prototype.setAccent = function (fw) {
    this.accent = fw
  };
  b1.prototype.isAccentunder = function () {
    if (this.accentunder != null) {
      return ej.getBooleanValue(this.accentunder, false)
    }
    this.initChildren();
    return this.sub.isAccent()
  };
  b1.prototype.setAccentunder = function (fw) {
    this.accentunder = fw
  };
  b1.prototype.getAlign = function () {
    return this.align
  };
  b1.prototype.setAlign = function (fw) {
    this.align = fw
  };
  b1.prototype.getOverSpace = function () {
    return this.overSpace
  };
  b1.prototype.setOverSpace = function (fw) {
    this.overSpace = fw
  };
  b1.prototype.getUnderSpace = function () {
    return this.underSpace
  };
  b1.prototype.setUnderSpace = function (fw) {
    this.underSpace = fw
  };
  function ek(fw) {
    this.settings;
    this.name;
    this.text;
    this.attList = null;
    this.attValueList = null;
    this.children = new aT();
    this.settings = fw
  }
  
  ek.prototype.getName = function () {
    return this.name
  };
  ek.prototype.setName = function (fw) {
    this.name = fw
  };
  ek.prototype.getText = function () {
    return this.text
  };
  ek.prototype.getXMLEscapeText = function () {
    return fu.xmlescape(this.text)
  };
  ek.prototype.setText = function (fw) {
    this.text = fw
  };
  ek.prototype.getChildren = function () {
    return this.children
  };
  ek.prototype.setEquivalentXML = function (fx) {
    this.name = fx.localName();
    var fA = fx.attributes;
    for (var fy = 0; fy < fA.length; fy++) {
      var fw = fA[fy];
      var fz = fx.attribute(fw);
      this.setAttribute(fw, fz)
    }
  };
  ek.prototype.clearAttribute = function (fw) {
    if (fw == null) {
      return
    }
    if (this.attList == null) {
      return
    }
    for (var fy = 0; fy < this.attList.size(); fy++) {
      var fx = this.attList.get(fy);
      if (fw == fx) {
        this.attList.remove(fy);
        this.attValueList.remove(fy);
        break
      }
    }
  };
  ek.prototype.setAttribute = function (fw, fx) {
    if (fw == null) {
      return
    }
    if (this.attList == null) {
      this.attList = new aT();
      this.attValueList = new aT()
    }
    if (fx == null) {
      this.clearAttribute(fw);
      return
    }
    this.attList.add(fw);
    this.attValueList.add(fx)
  };
  ek.prototype.getAttribute = function (fw) {
    if (fw == null) {
      return null
    }
    if (this.attList == null) {
      return null
    }
    for (var fy = 0; fy < this.attList.size(); fy++) {
      var fx = this.attList.get(fy);
      if (fw == fx) {
        var fz = this.attValueList.get(fy);
        return fz
      }
    }
    return null
  };
  ek.prototype.addChild = function (fw) {
    this.children.add(fw)
  };
  ek.prototype.setChildren = function (fw) {
    this.children = this.children
  };
  ek.prototype.createEquivalentXML = function (fy, fw) {
    var fx = new cE("");
    if (this.text == null) {
      fx.append(fu.addTabs(fy, fw) + "<" + this.name + " " + this.getAtt() + fu.addNewLine(">", fw) + this.formatChildren(fy, fw) + "</" + this.name + fu.addNewLine(">", fw))
    } else {
      fx.append(fu.addTabs(fy, fw) + "<" + this.name + " " + this.getAtt() + ">" + this.getXMLEscapeText() + "</" + this.name + fu.addNewLine(">", fw))
    }
    return fx.toString()
  };
  ek.prototype.getAtt = function () {
    var fz = new cE("");
    if (this.attList != null) {
      for (var fx = 0; fx < this.attList.size(); fx++) {
        var fw = this.attList.get(fx);
        var fy = this.attValueList.get(fx);
        if (fy != null) {
          fz.append(fw + '="' + fy + '" ')
        }
      }
    }
    return fz.toString()
  };
  ek.prototype.formatChildren = function (fA, fx) {
    var fz = new cE("");
    if (this.children != null) {
      for (var fw = 0; fw < this.children.size(); fw++) {
        var fy = this.children.get(fw);
        fz.append(fy.createEquivalentXML(fA + 1, fx))
      }
    }
    return fz.toString()
  };
  ek.prototype.getSettings = function () {
    return this.settings
  };
  ek.prototype.finalProcess = function () {
  };
  function dj(fw) {
    this.j = ek;
    this.j(fw)
  }
  
  FMath_extend(dj, ek);
  function fc(fw) {
    this.encoding;
    this.j = ek;
    this.j(fw)
  }
  
  FMath_extend(fc, ek);
  fc.prototype.getEncoding = function () {
    return this.encoding
  };
  fc.prototype.setEncoding = function (fw) {
    this.encoding = fw
  };
  function cp(fw) {
    this.id;
    this.xref;
    this.style;
    this.href;
    this.j = ek;
    this.j(fw)
  }
  
  FMath_extend(cp, ek);
  function cC(fw) {
    this.symbole;
    this.apply;
    this.varBase;
    this.qualifier;
    this.argumentsList = new aT();
    this.k = cp;
    this.k(fw)
  }
  
  FMath_extend(cC, cp);
  cC.prototype.finalProcess = function () {
    var fy = this.getChildren();
    if (fy != null) {
      if (fy.size() > 0) {
        var fw = fy.get(0);
        if (fw instanceof dI) {
          this.symbole = fy.get(0)
        } else {
          if (fw instanceof cC) {
            this.apply = fy.get(0)
          }
        }
        for (var fx = 1; fx < fy.size(); fx++) {
          this.argumentsList.add(fy.get(fx))
        }
      }
    }
  };
  cC.prototype.createEquivalentXML = function (fB, fx) {
    if (this.symbole != null) {
      var fy = this.symbole.getFunction();
      if (fy == null) {
        return ""
      }
      fy.setChildren(this.argumentsList);
      return fy.createEquivalentXML(fB, fx)
    } else {
      if (this.apply != null) {
        var fA = new cE("");
        fA.append(this.apply.createEquivalentXML(fB, fx));
        fA.append(fu.addTabs(fB, fx) + "<mrow>");
        fA.append(fu.addTabs(fB + 1, fx) + "<mo>(</mo>");
        if (this.argumentsList != null) {
          for (var fw = 0; fw < this.argumentsList.size(); fw++) {
            if (fw > 0) {
              fA.append(fu.addTabs(fB + 2, fx) + "<mo>,</mo>")
            }
            var fz = this.argumentsList.get(fw);
            fA.append(fz.createEquivalentXML(fB + 2, fx))
          }
        }
        fA.append(fu.addTabs(fB + 1, fx) + "<mo>)</mo>");
        fA.append(fu.addTabs(fB, fx) + "</mrow>");
        return fA.toString()
      }
    }
    return ""
  };
  function ew(fw) {
    this.op;
    this.lisBvars;
    this.listQualifiers;
    this.body;
    this.k = cp;
    this.k(fw)
  }
  
  FMath_extend(ew, cp);
  ew.prototype.createEquivalentXML = function (fx, fw) {
    return ""
  };
  function a2(fw) {
    this.j = ek;
    this.j(fw)
  }
  
  FMath_extend(a2, ek);
  function eT(fw) {
    this.k = cp;
    this.k(fw)
  }
  
  FMath_extend(eT, cp);
  function bT(fw) {
    this.k = cp;
    this.k(fw);
    this.setName("merror")
  }
  
  FMath_extend(bT, cp);
  bT.prototype.createEquivalentXML = function (fC, fy) {
    var fB = new cE("");
    var fx = this.getChildren();
    if (fx.size() == 0) {
      return ""
    }
    fB.append(fu.addTabs(fC, fy) + "<merror>");
    if (fx.size() == 1) {
      var fA = fx.get(0);
      fB.append(fA.createEquivalentXML(fC + 1, fy))
    } else {
      var fA = fx.get(0);
      fB.append(fA.createEquivalentXML(fC + 1, fy));
      fB.append(fu.addTabs(fC + 1, fy) + "<mo>:</mo>");
      for (var fw = 1; fw < fx.size(); fw++) {
        var fz = fx.get(fw);
        fB.append(fz.createEquivalentXML(fC + 1, fy))
      }
    }
    fB.append(fu.addTabs(fC, fy) + "</merror>");
    return fB.toString()
  };
  function cB(fw) {
    this.type;
    this.name;
    this.renamed;
    this.k = cp;
    this.k(fw)
  }
  
  FMath_extend(cB, cp);
  cB.prototype.setText = function (fw) {
    this.name = fw
  };
  cB.prototype.getType = function () {
    return this.type
  };
  cB.prototype.setType = function (fw) {
    this.type = fw
  };
  cB.prototype.getName = function () {
    return this.name
  };
  cB.prototype.setName = function (fw) {
    this.name = fw
  };
  cB.prototype.getRenamed = function () {
    return this.renamed
  };
  cB.prototype.setRenamed = function (fw) {
    this.renamed = fw
  };
  cB.prototype.createEquivalentXML = function (fx, fw) {
    if (this.getName() == null) {
      return this.formatChildren(fx, fw)
    }
    return "<mi>" + fu.xmlescape(this.getName()) + "</mi>"
  };
  function V(fw) {
    this.type = en.numRealType;
    this.baseValue = 10;
    this.loadedText = false;
    this.exponent;
    this.k = cp;
    this.k(fw)
  }
  
  FMath_extend(V, cp);
  V.prototype.setText = function (fw) {
    if (this.type == en.numEnotationType || this.type == en.numRationalType || this.type == eg || this.type == en.numComplexPolarType) {
      if (this.loadedText) {
        this.exponent = fw;
        return
      }
      this.loadedText = true
    }
    ek.prototype.setText.call(this, fw)
  };
  V.prototype.getType = function () {
    return this.type
  };
  V.prototype.setType = function (fw) {
    this.type = fw
  };
  V.prototype.getBase = function () {
    return this.baseValue
  };
  V.prototype.setBase = function (fw) {
    this.baseValue = fw
  };
  V.prototype.getExponent = function () {
    return this.exponent
  };
  V.prototype.createEquivalentXML = function (fy, fx) {
    this.setName("mn");
    if (this.getType() == bY) {
      this.setText(en.getHexDouble(this.getText()))
    }
    if (this.getType() == H) {
      return "<mrow><mn>" + this.getText() + "</mn><msup><mi>e</mi><mn>" + this.getExponent() + "</mn></msup></mrow>"
    } else {
      if (this.getType() == dL) {
        return "<mfrac bevelled='true'>" + this.buildBase(this.getText()) + "" + this.buildBase(this.getExponent()) + "</mfrac>"
      } else {
        if (this.getType() == eg) {
          return "<mrow><mn>" + this.getText() + "</mn><mo>+</mo><mrow><mn>" + this.getExponent() + "</mn><mi>i</mi></mrow></mrow>"
        } else {
          if (this.getType() == bG) {
            var fw = this.getSettings().getCnPolarPres();
            if ("exp" == fw) {
              return "<mrow><mn>" + this.getText() + "</mn><msup><mi>e</mi><mrow><mn>" + this.getExponent() + "</mn><mi>i</mi></mrow></msup></mrow>"
            }
            return "<mrow><mtext>Polar</mtext><mfenced><mn>" + this.getText() + "</mn><mn>" + this.getExponent() + "</mn></mfenced></mrow>"
          }
        }
      }
    }
    return this.buildBase(this.getText())
  };
  V.prototype.buildBase = function (fw) {
    if (this.baseValue == 10) {
      return "<mn>" + fw + "</mn>"
    }
    return "<msub><mn>" + fw + "</mn><mn>" + this.getBase() + "</mn></msub>"
  };
  function eh(fw) {
    this.k = cp;
    this.k(fw)
  }
  
  FMath_extend(eh, cp);
  eh.prototype.createEquivalentXML = function (fx, fw) {
    return "<ms>" + this.getXMLEscapeText() + "</ms>"
  };
  function dI(fw) {
    this.definitionURL = null;
    this.cdBase = "http://www.openmath.org/cd";
    this.cdName;
    this.symbolName;
    this.type;
    this.k = cp;
    this.k(fw)
  }
  
  FMath_extend(dI, cp);
  dI.prototype.getDefinitionURL = function () {
    if (this.definitionURL != null) {
      return this.definitionURL
    }
    return this.cdBase + "/" + this.cdName + "#" + this.symbolName
  };
  dI.prototype.getCdBase = function () {
    return this.cdBase
  };
  dI.prototype.setCdBase = function (fw) {
    this.cdBase = fw
  };
  dI.prototype.getCdName = function () {
    return this.cdName
  };
  dI.prototype.setCdName = function (fw) {
    this.cdName = fw
  };
  dI.prototype.getSymbolName = function () {
    return this.symbolName
  };
  dI.prototype.setSymbolName = function (fw) {
    this.symbolName = fw
  };
  dI.prototype.setText = function (fw) {
    this.symbolName = fw
  };
  dI.prototype.getType = function () {
    return this.type
  };
  dI.prototype.setType = function (fw) {
    this.type = fw
  };
  dI.prototype.setDefinitionURL = function (fw) {
    this.definitionURL = fw
  };
  dI.prototype.getFunction = function () {
    var fx = this.getDefinitionURL();
    if ("http://www.openmath.org/cd/arith1#plus" == fx) {
      return new cR(this.getSettings())
    } else {
      if ("http://www.openmath.org/cd/arith1#times" == fx) {
        return new dk(this.getSettings())
      } else {
        if ("http://www.openmath.org/cd/arith1#unary_minus" == fx) {
          return new eW(this.getSettings())
        } else {
          if ("http://www.openmath.org/cd/arith1#minus" == fx) {
            return new a8(this.getSettings())
          } else {
            if ("http://www.openmath.org/cd/arith1#divide" == fx) {
              return new c5(this.getSettings())
            } else {
              if ("http://www.openmath.org/cd/arith1#power" == fx) {
                return new fo(this.getSettings())
              } else {
                if ("http://www.openmath.org/cd/arith1#abs" == fx) {
                  return new bf(this.getSettings())
                } else {
                  if ("http://www.openmath.org/cd/arith1#root" == fx) {
                    var fz = new a(this.getSettings());
                    fz.setType(this.type);
                    return fz
                  } else {
                    if ("http://www.openmath.org/cd/set1#set" == fx) {
                      return new eQ(this.getSettings())
                    } else {
                      if ("http://www.openmath.org/cd/nostrict#plus" == fx) {
                        return new cR(this.getSettings())
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    var fy = new fm(this.getSettings());
    var fw = fx.substring(fx.lastIndexOf("#") + 1, fx.length);
    fy.setName(fw);
    return fy
  };
  dI.prototype.createEquivalentXML = function (fz, fy) {
    var fx = this.getDefinitionURL();
    var fw = fx.substring(fx.lastIndexOf("#") + 1, fx.length);
    return "<mtext>" + fw + "</mtext>"
  };
  function aG() {
  }
  
  function eP() {
    this.l = aG;
    this.l()
  }
  
  FMath_extend(eP, aG);
  function m() {
    this.l = aG;
    this.l()
  }
  
  FMath_extend(m, aG);
  function es() {
    this.m = m;
    this.m()
  }
  
  FMath_extend(es, m);
  function fd() {
    this.m = m;
    this.m()
  }
  
  FMath_extend(fd, m);
  function bw() {
    this.upLimit;
    this.downLimit;
    this.m = m;
    this.m()
  }
  
  FMath_extend(bw, m);
  function cM() {
    this.l = aG;
    this.l()
  }
  
  FMath_extend(cM, aG);
  function et() {
    this.l = aG;
    this.l()
  }
  
  FMath_extend(et, aG);
  function ci(fw) {
    this.presBean;
    this.contBean;
    this.k = cp;
    this.k(fw)
  }
  
  FMath_extend(ci, cp);
  ci.prototype.finalProcess = function () {
    var fz = this.getChildren();
    if (fz != null) {
      if (fz.size() > 0) {
        for (var fy = 0; fy < fz.size(); fy++) {
          var fx = fz.get(fy);
          if (fy == 0) {
            if (fx instanceof cY) {
              this.presBean = fx;
              break
            } else {
              this.contBean = fx
            }
          } else {
            if (fx instanceof fc) {
              var fA = fx;
              if ("MathML-Presentation" == fA.getEncoding() || "MathML" == fA.getEncoding()) {
                var fw = fx.getChildren();
                if (fw.size() > 0) {
                  this.presBean = fw.get(0);
                  break
                }
              } else {
                if ("MathML-Content" == fA.getEncoding()) {
                  var fw = fx.getChildren();
                  if (fw.size() > 0) {
                    this.contBean = fw.get(0);
                    break
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  ci.prototype.createEquivalentXML = function (fx, fw) {
    if (this.presBean != null) {
      return this.presBean.createEquivalentXML(fx, fw)
    } else {
      if (this.contBean != null) {
        return this.contBean.createEquivalentXML(fx, fw)
      }
    }
    return ""
  };
  function cx(fw) {
    this.k = cp;
    this.k(fw)
  }
  
  FMath_extend(cx, cp);
  function cY(fx, fw) {
    this.j = ek;
    this.j(fw);
    this.setEquivalentXML(fx)
  }
  
  FMath_extend(cY, ek);
  function c4(fw) {
    this.settings;
    this.settings = fw
  }
  
  c4.prototype.replaceContentWithPresentation = function (fx) {
    var fw = this.processContent(fx, null);
    var fy = fw.createEquivalentXML(0, true);
    return aH.parse(fy)
  };
  c4.prototype.processContent = function (fz, fy) {
    var fx = null;
    var fw = fz.localName();
    if (fw == null) {
      this.loadText(fz, fy);
      return null
    } else {
      fw = fw.toLowerCase();
      if (fw == "cn") {
        fx = this.loadContCn(fz, fy)
      } else {
        if (fw == "ci") {
          fx = this.loadContCi(fz, fy)
        } else {
          if (fw == "cs") {
            fx = this.loadContCs(fz, fy)
          } else {
            if (fw == "csymbol") {
              fx = this.loadContCsymbol(fz, fy)
            } else {
              if (fw == "apply") {
                fx = this.loadContApply(fz, fy)
              } else {
                if (fw == "bind") {
                  fx = this.loadContBind(fz, fy)
                } else {
                  if (fw == "semantics") {
                    fx = this.loadContSemantics(fz, fy)
                  } else {
                    if (fw == "annotation-xml") {
                      fx = this.loadContAnnotationXml(fz, fy)
                    } else {
                      if (fw == "cerror") {
                        fx = this.loadContCerror(fz, fy)
                      } else {
                        if (fw == "set") {
                          fx = this.loadContSet(fz, fy)
                        } else {
                          if (fw == "sin" || fw == "plus") {
                            fx = this.loadEqivCsymbol(fz, fy, fw)
                          } else {
                            if (c9.isPresentation(fw)) {
                              fx = new cY(fz, this.settings)
                            } else {
                              fx = new ek(this.settings)
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    this.loadAttributes(fz, fx);
    this.processChildren(fz, fx);
    fx.finalProcess();
    return fx
  };
  c4.prototype.loadAttributes = function (fx, fw) {
  };
  c4.prototype.loadText = function (fx, fw) {
    var fy = this.getText(fx);
    if (fy == null) {
      return
    }
    fw.setText(fy)
  };
  c4.prototype.getText = function (fw) {
    var fx = fw.toString();
    fx = fu.trim(fx);
    if (fx == null || fx.length == 0) {
      return null
    }
    return fx
  };
  c4.prototype.processChildren = function (fy, fx) {
    for (var fw = 0; fw < fy.getChildren().length; fw++) {
      var fz = this.processContent(fy.getChildren()[fw], fx);
      if (fz != null) {
        fx.addChild(fz)
      }
    }
  };
  c4.prototype.loadContSet = function (fy, fx) {
    var fw = new eQ(this.settings);
    return fw
  };
  c4.prototype.loadContCerror = function (fy, fx) {
    var fw = new bT(this.settings);
    return fw
  };
  c4.prototype.loadContSemantics = function (fy, fx) {
    var fw = new ci(this.settings);
    return fw
  };
  c4.prototype.loadContAnnotationXml = function (fy, fx) {
    var fw = new fc(this.settings);
    if (fy.attribute("encoding").length > 0) {
      fw.setEncoding(fy.attribute("encoding"))
    }
    return fw
  };
  c4.prototype.loadContBind = function (fy, fx) {
    var fw = new ew(this.settings);
    return fw
  };
  c4.prototype.loadContApply = function (fy, fx) {
    var fw = new cC(this.settings);
    return fw
  };
  c4.prototype.loadContCsymbol = function (fy, fx) {
    var fw = new dI(this.settings);
    if (fy.attribute("cd").length > 0) {
      fw.setCdName(fy.attribute("cd"))
    }
    return fw
  };
  c4.prototype.loadEqivCsymbol = function (fz, fy, fw) {
    var fx = new dI(this.settings);
    fx.setCdName("nostrict");
    fx.setSymbolName(fw);
    return fx
  };
  c4.prototype.loadContCs = function (fy, fx) {
    var fw = new eh(this.settings);
    return fw
  };
  c4.prototype.loadContCi = function (fy, fx) {
    var fw = new cB(this.settings);
    if (fy.attribute("type").length > 0) {
      fw.setType(em.getVariableTypeFor(fy.attribute("type")))
    }
    return fw
  };
  c4.prototype.loadContCn = function (fy, fx) {
    var fw = new V(this.settings);
    if (fy.attribute("type").length > 0) {
      fw.setType(em.getNumberTypeFor(fy.attribute("type")))
    }
    if (fy.attribute("base").length > 0) {
      fw.setBase(ej.getIntegerValue(fy.attribute("base"), 10))
    }
    return fw
  };
  function bZ(fw) {
    this.j = ek;
    this.j(fw)
  }
  
  FMath_extend(bZ, ek);
  bZ.prototype.createEquivalentXML = function (fx, fw) {
    return ""
  };
  function bf(fw) {
    this.n = bZ;
    this.n(fw)
  }
  
  FMath_extend(bf, bZ);
  bf.prototype.createEquivalentXML = function (fA, fx) {
    var fw = this.getChildren();
    if (fw == null || fw.size() != 1) {
      return ""
    }
    var fz = new cE("");
    fz.append(fu.addTabs(fA, fx) + "<mrow>");
    fz.append(fu.addTabs(fA + 1, fx) + "<mo>|</mo>");
    var fy = fw.get(0);
    fz.append(fy.createEquivalentXML(fA + 2, fx));
    fz.append(fu.addTabs(fA + 1, fx) + "<mo>|</mo>");
    fz.append(fu.addTabs(fA, fx) + "</mrow>");
    return fz.toString()
  };
  function c5(fw) {
    this.n = bZ;
    this.n(fw)
  }
  
  FMath_extend(c5, bZ);
  c5.prototype.createEquivalentXML = function (fB, fx) {
    var fw = this.getChildren();
    if (fw == null || fw.size() != 2) {
      return ""
    }
    var fA = new cE("");
    fA.append(fu.addTabs(fB, fx) + "<mfrac>");
    var fz = fw.get(0);
    fA.append(fz.createEquivalentXML(fB + 1, fx));
    var fy = fw.get(1);
    fA.append(fy.createEquivalentXML(fB + 1, fx));
    fA.append(fu.addTabs(fB, fx) + "</mfrac>");
    return fA.toString()
  };
  function a8(fw) {
    this.n = bZ;
    this.n(fw)
  }
  
  FMath_extend(a8, bZ);
  a8.prototype.createEquivalentXML = function (fB, fx) {
    var fw = this.getChildren();
    if (fw == null || fw.size() != 2) {
      return ""
    }
    var fA = new cE("");
    fA.append(fu.addTabs(fB, fx) + "<mrow>");
    fA.append(fu.addTabs(fB + 1, fx) + "<mo>(</mo>");
    var fz = fw.get(0);
    fA.append(fz.createEquivalentXML(fB + 2, fx));
    fA.append(fu.addTabs(fB + 1, fx) + "<mo>-</mo>");
    var fy = fw.get(1);
    fA.append(fy.createEquivalentXML(fB + 2, fx));
    fA.append(fu.addTabs(fB + 1, fx) + "<mo>)</mo>");
    fA.append(fu.addTabs(fB, fx) + "</mrow>");
    return fA.toString()
  };
  function fm(fw) {
    this.name;
    this.n = bZ;
    this.n(fw)
  }
  
  FMath_extend(fm, bZ);
  fm.prototype.getName = function () {
    return this.name
  };
  fm.prototype.setName = function (fw) {
    this.name = fw
  };
  fm.prototype.createEquivalentXML = function (fB, fy) {
    var fx = this.getChildren();
    if (fx == null || fx.size() == 0) {
      return ""
    }
    var fA = new cE("");
    fA.append(fu.addTabs(fB, fy) + "<mrow>");
    fA.append(fu.addTabs(fB + 1, fy) + "<mtext>" + this.name + "</mtext>");
    fA.append(fu.addTabs(fB + 1, fy) + "<mo>(</mo>");
    if (fx != null) {
      for (var fw = 0; fw < fx.size(); fw++) {
        if (fw > 0) {
          fA.append(fu.addTabs(fB + 2, fy) + "<mo>,</mo>")
        }
        var fz = fx.get(fw);
        fA.append(fz.createEquivalentXML(fB + 2, fy))
      }
    }
    fA.append(fu.addTabs(fB + 1, fy) + "<mo>)</mo>");
    fA.append(fu.addTabs(fB, fy) + "</mrow>");
    return fA.toString()
  };
  function cR(fw) {
    this.n = bZ;
    this.n(fw)
  }
  
  FMath_extend(cR, bZ);
  cR.prototype.createEquivalentXML = function (fB, fy) {
    var fx = this.getChildren();
    if (fx == null || fx.size() == 0) {
      return ""
    }
    if (fx.size() == 1) {
      var fA = fx.get(0);
      return fA.createEquivalentXML(fB, fy)
    }
    var fz = new cE("");
    fz.append(fu.addTabs(fB, fy) + "<mrow>");
    fz.append(fu.addTabs(fB + 1, fy) + "<mo>(</mo>");
    if (fx != null) {
      for (var fw = 0; fw < fx.size(); fw++) {
        if (fw > 0) {
          fz.append(fu.addTabs(fB + 2, fy) + "<mo>+</mo>")
        }
        var fA = fx.get(fw);
        fz.append(fA.createEquivalentXML(fB + 2, fy))
      }
    }
    fz.append(fu.addTabs(fB + 1, fy) + "<mo>)</mo>");
    fz.append(fu.addTabs(fB, fy) + "</mrow>");
    return fz.toString()
  };
  function fo(fw) {
    this.n = bZ;
    this.n(fw)
  }
  
  FMath_extend(fo, bZ);
  fo.prototype.createEquivalentXML = function (fB, fx) {
    var fw = this.getChildren();
    if (fw == null || fw.size() != 2) {
      return ""
    }
    var fA = new cE("");
    fA.append(fu.addTabs(fB, fx) + "<msup>");
    var fz = fw.get(0);
    fA.append(fz.createEquivalentXML(fB + 1, fx));
    var fy = fw.get(1);
    fA.append(fy.createEquivalentXML(fB + 1, fx));
    fA.append(fu.addTabs(fB, fx) + "</msup>");
    return fA.toString()
  };
  function a(fw) {
    this.type;
    this.n = bZ;
    this.n(fw)
  }
  
  FMath_extend(a, bZ);
  a.prototype.getType = function () {
    return this.type
  };
  a.prototype.setType = function (fw) {
    this.type = fw
  };
  a.prototype.createEquivalentXML = function (fB, fx) {
    var fw = this.getChildren();
    if (fw == null || fw.size() < 1 || fw.size() > 2) {
      return ""
    }
    var fA = new cE("");
    if (fw.size() == 1) {
      fA.append(fu.addTabs(fB, fx) + "<msqrt>");
      var fz = fw.get(0);
      fA.append(fz.createEquivalentXML(fB + 1, fx));
      fA.append(fu.addTabs(fB, fx) + "</msqrt>")
    } else {
      if (fw.size() == 1) {
        fA.append(fu.addTabs(fB, fx) + "<mroot>");
        var fz = fw.get(0);
        fA.append(fz.createEquivalentXML(fB + 1, fx));
        var fy = fw.get(1);
        fA.append(fy.createEquivalentXML(fB + 1, fx));
        fA.append(fu.addTabs(fB, fx) + "</mroot>")
      }
    }
    return fA.toString()
  };
  function dk(fw) {
    this.n = bZ;
    this.n(fw)
  }
  
  FMath_extend(dk, bZ);
  dk.prototype.createEquivalentXML = function (fB, fy) {
    var fx = this.getChildren();
    if (fx == null || fx.size() == 0) {
      return ""
    }
    if (fx.size() == 1) {
      var fA = fx.get(0);
      return fA.createEquivalentXML(fB, fy)
    }
    var fz = new cE("");
    fz.append(fu.addTabs(fB, fy) + "<mrow>");
    if (fx != null) {
      for (var fw = 0; fw < fx.size(); fw++) {
        var fA = fx.get(fw);
        fz.append(fA.createEquivalentXML(fB + 1, fy))
      }
    }
    fz.append(fu.addTabs(fB, fy) + "</mrow>");
    return fz.toString()
  };
  function eW(fw) {
    this.n = bZ;
    this.n(fw)
  }
  
  FMath_extend(eW, bZ);
  eW.prototype.createEquivalentXML = function (fA, fx) {
    var fw = this.getChildren();
    if (fw == null || fw.size() != 1) {
      return ""
    }
    var fz = new cE("");
    fz.append(fu.addTabs(fA, fx) + "<mrow>");
    fz.append(fu.addTabs(fA + 1, fx) + "<mo>-</mo>");
    var fy = fw.get(0);
    fz.append(fy.createEquivalentXML(fA + 1, fx));
    fz.append(fu.addTabs(fA, fx) + "</mrow>");
    return fz.toString()
  };
  function eQ(fw) {
    this.n = bZ;
    this.n(fw)
  }
  
  FMath_extend(eQ, bZ);
  eQ.prototype.createEquivalentXML = function (fB, fy) {
    var fx = this.getChildren();
    var fA = new cE("");
    fA.append(fu.addTabs(fB, fy) + "<mrow>");
    fA.append(fu.addTabs(fB + 1, fy) + "<mo>(</mo>");
    if (fx != null) {
      for (var fw = 0; fw < fx.size(); fw++) {
        if (fw > 0) {
          fA.append(fu.addTabs(fB + 2, fy) + "<mo>,</mo>")
        }
        var fz = fx.get(fw);
        fA.append(fz.createEquivalentXML(fB + 2, fy))
      }
    }
    fA.append(fu.addTabs(fB + 1, fy) + "<mo>)</mo>");
    fA.append(fu.addTabs(fB, fy) + "</mrow>");
    return fA.toString()
  };
  function en() {
  }
  
  en.getHexDouble = function (fw) {
    if (fw == null) {
      return ""
    }
    fw = fu.trim(fw);
    fw = fw.toUpperCase();
    if (fw.length == 0) {
      return ""
    }
    if (fw.indexOf("0x") > -1) {
      return fw
    }
    return "0x" + fw
  };
  function em() {
  }
  
  em.getNumberTypeFor = function (fw) {
    if ("integer" == fw) {
      return aM
    } else {
      if ("real" == fw) {
        return bN
      } else {
        if ("double" == fw) {
          return dv
        } else {
          if ("hexdouble" == fw) {
            return bY
          } else {
            if ("e-notation" == fw) {
              return H
            } else {
              if ("rational" == fw) {
                return dL
              } else {
                if ("complex-cartesian" == fw) {
                  return eg
                } else {
                  if ("complex-polar" == fw) {
                    return bG
                  } else {
                    if ("constant" == fw) {
                      return eJ
                    } else {
                      return a3
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  em.getVariableTypeFor = function (fw) {
    if ("integer" == fw) {
      return ap
    } else {
      if ("real" == fw) {
        return bl
      } else {
        if ("rational" == fw) {
          return Z
        } else {
          if ("complex" == fw) {
            return b9
          } else {
            if ("complex-polar" == fw) {
              return dH
            } else {
              if ("complex-cartesian" == fw) {
                return c0
              } else {
                if ("constant" == fw) {
                  return l
                } else {
                  if ("function" == fw) {
                    return aB
                  } else {
                    if ("vector" == fw) {
                      return d5
                    } else {
                      if ("list" == fw) {
                        return bk
                      } else {
                        if ("set" == fw) {
                          return bC
                        } else {
                          if ("matrix" == fw) {
                            return ab
                          } else {
                            return dD
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  function dG() {
  }
  
  function E() {
    this.nextValue = 0
  }
  
  E.prototype.nextId = function () {
    this.nextValue = this.nextValue + 1;
    return this.nextValue + ""
  };
  function eR() {
    this.form = "p";
    this.lspace = 5;
    this.rspace = 5;
    this.priority = 0;
    this.accent = false;
    this.stretchy = false
  }
  
  eR.prototype.saveToString = function () {
    var fw = this.form + this.lspace + "" + rspace;
    if (this.priority < 10) {
      fw = fw + "0" + this.priority
    } else {
      fw = fw + this.priority
    }
    var fx = 0;
    if (this.accent) {
      fx = fx | 1
    }
    if (this.stretchy) {
      fx = fx | 2
    }
    return fw + fx
  };
  eR.prototype.openFromString = function (fy) {
    if (fy.length != 6) {
      return
    }
    this.form = fy.substring(0, 1);
    var fB = fy.substring(1, 2);
    this.lspace = ej.getIntegerValue(fB, 0);
    var fx = fy.substring(2, 3);
    this.rspace = ej.getIntegerValue(fx, 0);
    var fA = fy.substring(3, 5);
    this.priority = ej.getIntegerValue(fA, 0);
    var fw = fy.substring(5, 6);
    var fz = ds.getIntFromHexCode(fw);
    if ((fz & 1) == 0) {
      this.accent = false
    } else {
      this.accent = true
    }
    if ((fz & 2) == 0) {
      this.stretchy = false
    } else {
      this.stretchy = true
    }
  };
  eR.prototype.getForm = function () {
    return this.form
  };
  eR.prototype.setForm = function (fw) {
    this.form = fw
  };
  eR.prototype.getLspace = function () {
    return this.lspace
  };
  eR.prototype.setLspace = function (fw) {
    this.lspace = fw
  };
  eR.prototype.getRspace = function () {
    return this.rspace
  };
  eR.prototype.setRspace = function (fw) {
    this.rspace = fw
  };
  eR.prototype.getPriority = function () {
    return this.priority
  };
  eR.prototype.setPriority = function (fw) {
    this.priority = fw
  };
  eR.prototype.isAccent = function () {
    return this.accent
  };
  eR.prototype.setAccent = function (fw) {
    this.accent = fw
  };
  eR.prototype.isStretchy = function () {
    return this.stretchy
  };
  eR.prototype.setStretchy = function (fw) {
    this.stretchy = fw
  };
  function dn() {
    this._operator;
    this.fence = false;
    this.largeop = false;
    this.movablelimits = false;
    this.separator = false;
    this.symmetric = false;
    this.linebreakAfter = false;
    this.axisOperator = false;
    this.integral = false;
    this.invisible = false;
    this.spaces = new aT()
  }
  
  dn.prototype.saveToString = function () {
    var fz = 0;
    if (this.fence) {
      fz = fz | 1
    }
    if (this.largeop) {
      fz = fz | 2
    }
    if (this.movablelimits) {
      fz = fz | 4
    }
    if (this.separator) {
      fz = fz | 8
    }
    if (this.symmetric) {
      fz = fz | 16
    }
    if (this.linebreakAfter) {
      fz = fz | 32
    }
    var fx = ej.getHexCodeFromInt(fz).toUpperCase();
    if (fx.length < 2) {
      fx = "0" + fx
    }
    for (var fw = 0; fw < this.spaces.size(); fw++) {
      var fy = this.spaces.get(fw);
      fx = fx + fy.saveToString()
    }
    return fx
  };
  dn.prototype.openFromString = function (fx) {
    if (fx.length < 2) {
      return
    }
    var fw = fx.substring(0, 2);
    var fy = ds.getIntFromHexCode(fw);
    if ((fy & 1) == 0) {
      this.fence = false
    } else {
      this.fence = true
    }
    if ((fy & 2) == 0) {
      this.largeop = false
    } else {
      this.largeop = true
    }
    if ((fy & 4) == 0) {
      this.movablelimits = false
    } else {
      this.movablelimits = true
    }
    if ((fy & 8) == 0) {
      this.separator = false
    } else {
      this.separator = true
    }
    if ((fy & 16) == 0) {
      this.symmetric = false
    } else {
      this.symmetric = true
    }
    if ((fy & 32) == 0) {
      this.linebreakAfter = false
    } else {
      this.linebreakAfter = true
    }
    this.spaces.clear();
    fx = fx.substring(2, fx.length);
    while (fx.length > 5) {
      var fz = new eR();
      fz.openFromString(fx.substring(0, 6));
      this.spaces.add(fz);
      fx = fx.substring(6, fx.length)
    }
  };
  dn.prototype.isLinebreakAfter = function () {
    return this.linebreakAfter
  };
  dn.prototype.setLinebreakAfter = function (fw) {
    this.linebreakAfter = fw
  };
  dn.prototype.isFence = function () {
    return this.fence
  };
  dn.prototype.setFence = function (fw) {
    this.fence = fw
  };
  dn.prototype.isLargeop = function () {
    return this.largeop
  };
  dn.prototype.setLargeop = function (fw) {
    this.largeop = fw
  };
  dn.prototype.isMovablelimits = function () {
    return this.movablelimits
  };
  dn.prototype.setMovablelimits = function (fw) {
    this.movablelimits = fw
  };
  dn.prototype.isSeparator = function () {
    return this.separator
  };
  dn.prototype.setSeparator = function (fw) {
    this.separator = fw
  };
  dn.prototype.isSymmetric = function () {
    return this.symmetric
  };
  dn.prototype.setSymmetric = function (fw) {
    this.symmetric = fw
  };
  dn.prototype.isIntegral = function () {
    return this.integral
  };
  dn.prototype.setIntegral = function (fw) {
    this.integral = fw
  };
  dn.prototype.isInvisible = function () {
    return this.invisible
  };
  dn.prototype.setInvisible = function (fw) {
    this.invisible = fw
  };
  dn.prototype.getSpaces = function () {
    return this.spaces
  };
  dn.prototype.setSpaces = function (fw) {
    this.spaces = fw
  };
  dn.prototype.setForm = function (fz) {
    fz = this.getShortForm(fz);
    if (this.spaces.size() > 0) {
      var fA = null;
      var fw = null;
      for (var fy = 0; fy < this.spaces.size(); fy++) {
        var fx = this.spaces.get(fy);
        if (fx.getForm() == fz) {
          fA = fx
        } else {
          if (fx.getForm() == "i") {
            fw = fx
          }
        }
      }
      if (fA != null) {
        this.spaces.clear();
        this.spaces.add(fA)
      } else {
        if (fw != null) {
          this.spaces.clear();
          this.spaces.add(fw)
        }
      }
    }
    if (this.spaces.size() == 0) {
      var fx = new eR();
      fx.setForm(fz);
      this.spaces.add(fx)
    }
  };
  dn.prototype.getShortForm = function (fw) {
    if ("prefix" == fw) {
      return "p"
    }
    if ("infix" == fw) {
      return "i"
    }
    if ("postfix" == fw) {
      return "o"
    }
    return null
  };
  dn.prototype.getForm = function () {
    if (this.spaces.size() == 0) {
      return null
    }
    var fw = this.spaces.get(0);
    return this.getLongForm(fw.getForm())
  };
  dn.prototype.getFormStyle = function () {
    if (this.spaces.size() == 0) {
      return null
    }
    return this.spaces.get(0)
  };
  dn.prototype.getLongForm = function (fw) {
    if ("p" == fw) {
      return "prefix"
    }
    if ("i" == fw) {
      return "infix"
    }
    if ("o" == fw) {
      return "postfix"
    }
    return null
  };
  dn.prototype.setLspace = function (fy) {
    if (this.spaces.size() == 0) {
      var fw = new eR();
      this.spaces.add(fw)
    }
    for (var fx = 0; fx < this.spaces.size(); fx++) {
      var fw = this.spaces.get(fx);
      fw.setLspace(fy)
    }
  };
  dn.prototype.setRspace = function (fy) {
    if (this.spaces.size() == 0) {
      var fw = new eR();
      this.spaces.add(fw)
    }
    for (var fx = 0; fx < this.spaces.size(); fx++) {
      var fw = this.spaces.get(fx);
      fw.setRspace(fy)
    }
  };
  dn.prototype.setFenceString = function (fw) {
    this.fence = "true" == fw
  };
  dn.prototype.setSeparatorString = function (fw) {
    this.separator = "true" == fw
  };
  dn.prototype.setAccent = function (fy) {
    if (this.spaces.size() == 0) {
      var fw = new eR();
      this.spaces.add(fw)
    }
    for (var fx = 0; fx < this.spaces.size(); fx++) {
      var fw = this.spaces.get(fx);
      fw.setAccent("true" == fy)
    }
  };
  dn.prototype.setStretchy = function (fw) {
    if (this.spaces.size() == 0) {
      var fx = new eR();
      this.spaces.add(fx)
    }
    for (var fy = 0; fy < this.spaces.size(); fy++) {
      var fx = this.spaces.get(fy);
      fx.setStretchy("true" == fw)
    }
  };
  dn.prototype.setSymmetricString = function (fw) {
    this.symmetric = "true" == fw
  };
  dn.prototype.setLargeopString = function (fw) {
    this.largeop = "true" == fw
  };
  dn.prototype.setMovablelimitsString = function (fw) {
    this.movablelimits = "true" == fw
  };
  dn.prototype.getOperator = function () {
    return this._operator
  };
  dn.prototype.setOperator = function (fw) {
    this._operator = fw
  };
  dn.prototype.getLspace = function () {
    var fw = this.getFormStyle();
    if (fw == null) {
      return 5
    }
    return fw.getLspace()
  };
  dn.prototype.getRspace = function () {
    var fw = this.getFormStyle();
    if (fw == null) {
      return 5
    }
    return fw.getRspace()
  };
  dn.prototype.isStretchy = function () {
    var fw = this.getFormStyle();
    if (fw == null) {
      return false
    }
    return fw.isStretchy()
  };
  dn.prototype.getIsAxisOperator = function () {
    return this.axisOperator
  };
  dn.prototype.setAxisOperator = function (fw) {
    this.axisOperator = fw
  };
  function cw() {
    this.errorColor = "#FF0000";
    this.scriptlevel = 0;
    this.displaystyle = true;
    this.scriptsizemultiplier = 0.7071;
    this.mscriptsizemultiplier = 0.5;
    this.scriptminsize = 10;
    this.infixlinebreakstyle = "";
    this.decimalpoint = ".";
    this.accent = false;
    this.accentunder = false;
    this.align = "";
    this.alignmentscope = "";
    this.bevelled = false;
    this.charalign = "center";
    this.charspacing = "1";
    this.close = ")";
    this.columnalign = "center";
    this.columnlines = "none";
    this.columnspacing = "0.8em";
    this.columnspan = 0;
    this.columnwidth = "";
    this.columnlinesthickness = "0.08em";
    this.crossout = "none";
    this.carrythickness = "0.05em";
    this.denomalign = "";
    this.depth = "";
    this.dir;
    this.edge = "";
    this.equalcolumns = false;
    this.equalrows = false;
    this.fence = false;
    this.form;
    this.frame = "none";
    this.framespacing = "0.4em 0.5ex";
    this.framelinesthickness = "0.08em";
    this.groupalign = "";
    this.height = "";
    this.indentalign = "";
    this.indentalignfirst = "";
    this.indentalignlast = "";
    this.indentshift = "";
    this.indentshiftfirst = "";
    this.indentshiftlast = "";
    this.indenttarget = "";
    this.largeop = false;
    this.leftoverhang = "";
    this.length = 0;
    this.linebreak = "auto";
    this.linebreakmultchar = "";
    this.linebreakstyle = "";
    this.lineleading = "0.08em";
    this.linethickness = "medium";
    this.location = "n";
    this.longdivstyle = "";
    this.lquote = "&quot;";
    this.lspace = 0;
    this.mathsize = 40;
    this.mathvariant = "normal";
    this.maxsize = "";
    this.minlabelspacing = "0.8em";
    this.labelspacing = "200";
    this.minsize = "";
    this.movablelimits = false;
    this.mslinethickness = "medium";
    this.notation = "longdiv";
    this.numalign = "";
    this.enclosethickness = "medium";
    this.encloserounded = "0.3em";
    this.enclosespace = "medium";
    this.open = "(";
    this.position = 0;
    this.rightoverhang = "";
    this.rowalign = "";
    this.rowlines = "none";
    this.rowspacing = "1.0ex";
    this.rowlinesthickness = "0.08em";
    this.mrowspacing = "0.25ex";
    this.rowspan = 0;
    this.rquote = "&quot;";
    this.rspace = 0;
    this.selection = 0;
    this.separator = false;
    this.separators = ",";
    this.shift = 0;
    this.side = "right";
    this.stackalign = "";
    this.stretchy = false;
    this.subscriptshift = "";
    this.superscriptshift = "";
    this.symmetric = false;
    this.valign = "";
    this.width = "";
    this.fractionLineCapMargin = "0.2em";
    this.fractionSpace = "0.15em";
    this.sqrtClosed = false;
    this.sqrtClosedLength = "0.2em";
    this.subscriptPostion = "50%";
    this.superscriptPostion = "50%";
    this.overSpace = "0.1em";
    this.underSpace = "0.1em";
    this.largeOpMultiplier = "150%";
    this.pixelsToMillimeterConversion = 37.79;
    this.cnPolarPres = "exp"
  }
  
  cw.prototype.getPixelsToMillimeterConversion = function () {
    return this.pixelsToMillimeterConversion
  };
  cw.prototype.setPixelsToMillimeterConversion = function (fw) {
    this.pixelsToMillimeterConversion = fw;
    cT.setPxCm(this.pixelsToMillimeterConversion)
  };
  cw.prototype.getErrorColor = function () {
    return this.errorColor
  };
  cw.prototype.setErrorColor = function (fw) {
    this.errorColor = fw
  };
  cw.prototype.getScriptlevel = function () {
    return this.scriptlevel
  };
  cw.prototype.setScriptlevel = function (fw) {
    this.scriptlevel = fw
  };
  cw.prototype.isDisplaystyle = function () {
    return this.displaystyle
  };
  cw.prototype.getDisplaystyle = function () {
    return this.displaystyle
  };
  cw.prototype.setDisplaystyle = function (fw) {
    this.displaystyle = fw
  };
  cw.prototype.getScriptsizemultiplier = function () {
    return this.scriptsizemultiplier
  };
  cw.prototype.setScriptsizemultiplier = function (fw) {
    this.scriptsizemultiplier = fw
  };
  cw.prototype.getScriptminsize = function () {
    return this.scriptminsize
  };
  cw.prototype.setScriptminsize = function (fw) {
    this.scriptminsize = fw
  };
  cw.prototype.getInfixlinebreakstyle = function () {
    return this.infixlinebreakstyle
  };
  cw.prototype.setInfixlinebreakstyle = function (fw) {
    this.infixlinebreakstyle = fw
  };
  cw.prototype.getDecimalpoint = function () {
    return this.decimalpoint
  };
  cw.prototype.setDecimalpoint = function (fw) {
    this.decimalpoint = fw
  };
  cw.prototype.isAccent = function () {
    return this.accent
  };
  cw.prototype.setAccent = function (fw) {
    this.accent = fw
  };
  cw.prototype.isAccentunder = function () {
    return this.accentunder
  };
  cw.prototype.setAccentunder = function (fw) {
    this.accentunder = fw
  };
  cw.prototype.getAlign = function () {
    return this.align
  };
  cw.prototype.setAlign = function (fw) {
    this.align = fw
  };
  cw.prototype.getAlignmentscope = function () {
    return this.alignmentscope
  };
  cw.prototype.setAlignmentscope = function (fw) {
    this.alignmentscope = fw
  };
  cw.prototype.isBevelled = function () {
    return this.bevelled
  };
  cw.prototype.setBevelled = function (fw) {
    this.bevelled = fw
  };
  cw.prototype.getCharalign = function () {
    return this.charalign
  };
  cw.prototype.setCharalign = function (fw) {
    this.charalign = fw
  };
  cw.prototype.getCharspacing = function () {
    return this.charspacing
  };
  cw.prototype.setCharspacing = function (fw) {
    this.charspacing = fw
  };
  cw.prototype.getClose = function () {
    return this.close
  };
  cw.prototype.setClose = function (fw) {
    this.close = fw
  };
  cw.prototype.getColumnalign = function () {
    return this.columnalign
  };
  cw.prototype.setColumnalign = function (fw) {
    this.columnalign = fw
  };
  cw.prototype.getColumnlines = function () {
    return this.columnlines
  };
  cw.prototype.setColumnlines = function (fw) {
    this.columnlines = fw
  };
  cw.prototype.getColumnspacing = function () {
    return this.columnspacing
  };
  cw.prototype.setColumnspacing = function (fw) {
    this.columnspacing = fw
  };
  cw.prototype.getColumnspan = function () {
    return this.columnspan
  };
  cw.prototype.setColumnspan = function (fw) {
    this.columnspan = fw
  };
  cw.prototype.getColumnwidth = function () {
    return this.columnwidth
  };
  cw.prototype.setColumnwidth = function (fw) {
    this.columnwidth = fw
  };
  cw.prototype.getCrossout = function () {
    return this.crossout
  };
  cw.prototype.setCrossout = function (fw) {
    this.crossout = fw
  };
  cw.prototype.getDenomalign = function () {
    return this.denomalign
  };
  cw.prototype.setDenomalign = function (fw) {
    this.denomalign = fw
  };
  cw.prototype.getDepth = function () {
    return this.depth
  };
  cw.prototype.setDepth = function (fw) {
    this.depth = fw
  };
  cw.prototype.getDir = function () {
    return this.dir
  };
  cw.prototype.setDir = function (fw) {
    this.dir = fw
  };
  cw.prototype.getEdge = function () {
    return this.edge
  };
  cw.prototype.setEdge = function (fw) {
    this.edge = fw
  };
  cw.prototype.isEqualcolumns = function () {
    return this.equalcolumns
  };
  cw.prototype.setEqualcolumns = function (fw) {
    this.equalcolumns = fw
  };
  cw.prototype.isEqualrows = function () {
    return this.equalrows
  };
  cw.prototype.setEqualrows = function (fw) {
    this.equalrows = fw
  };
  cw.prototype.isFence = function () {
    return this.fence
  };
  cw.prototype.setFence = function (fw) {
    this.fence = fw
  };
  cw.prototype.getForm = function () {
    return this.form
  };
  cw.prototype.setForm = function (fw) {
    this.form = fw
  };
  cw.prototype.getFrame = function () {
    return this.frame
  };
  cw.prototype.setFrame = function (fw) {
    this.frame = fw
  };
  cw.prototype.getFramespacing = function () {
    return this.framespacing
  };
  cw.prototype.setFramespacing = function (fw) {
    this.framespacing = fw
  };
  cw.prototype.getGroupalign = function () {
    return this.groupalign
  };
  cw.prototype.setGroupalign = function (fw) {
    this.groupalign = fw
  };
  cw.prototype.getHeight = function () {
    return this.height
  };
  cw.prototype.setHeight = function (fw) {
    this.height = fw
  };
  cw.prototype.getIndentalign = function () {
    return this.indentalign
  };
  cw.prototype.setIndentalign = function (fw) {
    this.indentalign = fw
  };
  cw.prototype.getIndentalignfirst = function () {
    return this.indentalignfirst
  };
  cw.prototype.setIndentalignfirst = function (fw) {
    this.indentalignfirst = fw
  };
  cw.prototype.getIndentalignlast = function () {
    return this.indentalignlast
  };
  cw.prototype.setIndentalignlast = function (fw) {
    this.indentalignlast = fw
  };
  cw.prototype.getIndentshift = function () {
    return this.indentshift
  };
  cw.prototype.setIndentshift = function (fw) {
    this.indentshift = fw
  };
  cw.prototype.getIndentshiftfirst = function () {
    return this.indentshiftfirst
  };
  cw.prototype.setIndentshiftfirst = function (fw) {
    this.indentshiftfirst = fw
  };
  cw.prototype.getIndentshiftlast = function () {
    return this.indentshiftlast
  };
  cw.prototype.setIndentshiftlast = function (fw) {
    this.indentshiftlast = fw
  };
  cw.prototype.getIndenttarget = function () {
    return this.indenttarget
  };
  cw.prototype.setIndenttarget = function (fw) {
    this.indenttarget = fw
  };
  cw.prototype.isLargeop = function () {
    return this.largeop
  };
  cw.prototype.setLargeop = function (fw) {
    this.largeop = fw
  };
  cw.prototype.getLeftoverhang = function () {
    return this.leftoverhang
  };
  cw.prototype.setLeftoverhang = function (fw) {
    this.leftoverhang = fw
  };
  cw.prototype.getLength = function () {
    return this.length
  };
  cw.prototype.setLength = function (fw) {
    this.length = fw
  };
  cw.prototype.getLinebreak = function () {
    return this.linebreak
  };
  cw.prototype.setLinebreak = function (fw) {
    this.linebreak = fw
  };
  cw.prototype.getLinebreakmultchar = function () {
    return this.linebreakmultchar
  };
  cw.prototype.setLinebreakmultchar = function (fw) {
    this.linebreakmultchar = fw
  };
  cw.prototype.getLinebreakstyle = function () {
    return this.linebreakstyle
  };
  cw.prototype.setLinebreakstyle = function (fw) {
    this.linebreakstyle = fw
  };
  cw.prototype.getLineleading = function () {
    return this.lineleading
  };
  cw.prototype.setLineleading = function (fw) {
    this.lineleading = fw
  };
  cw.prototype.getLinethickness = function () {
    return this.linethickness
  };
  cw.prototype.setLinethickness = function (fw) {
    this.linethickness = fw
  };
  cw.prototype.getLocation = function () {
    return this.location
  };
  cw.prototype.setLocation = function (fw) {
    this.location = fw
  };
  cw.prototype.getLongdivstyle = function () {
    return this.longdivstyle
  };
  cw.prototype.setLongdivstyle = function (fw) {
    this.longdivstyle = fw
  };
  cw.prototype.getLquote = function () {
    return this.lquote
  };
  cw.prototype.setLquote = function (fw) {
    this.lquote = fw
  };
  cw.prototype.getLspace = function () {
    return this.lspace
  };
  cw.prototype.setLspace = function (fw) {
    this.lspace = fw
  };
  cw.prototype.getMathsize = function () {
    return this.mathsize
  };
  cw.prototype.setMathsize = function (fw) {
    this.mathsize = fw
  };
  cw.prototype.getMathvariant = function () {
    return this.mathvariant
  };
  cw.prototype.setMathvariant = function (fw) {
    this.mathvariant = fw
  };
  cw.prototype.getMaxsize = function () {
    return this.maxsize
  };
  cw.prototype.setMaxsize = function (fw) {
    this.maxsize = fw
  };
  cw.prototype.getMinlabelspacing = function () {
    return this.minlabelspacing
  };
  cw.prototype.setMinlabelspacing = function (fw) {
    this.minlabelspacing = fw
  };
  cw.prototype.getMinsize = function () {
    return this.minsize
  };
  cw.prototype.setMinsize = function (fw) {
    this.minsize = fw
  };
  cw.prototype.isMovablelimits = function () {
    return this.movablelimits
  };
  cw.prototype.setMovablelimits = function (fw) {
    this.movablelimits = fw
  };
  cw.prototype.getMslinethickness = function () {
    return this.mslinethickness
  };
  cw.prototype.setMslinethickness = function (fw) {
    this.mslinethickness = fw
  };
  cw.prototype.getNotation = function () {
    return this.notation
  };
  cw.prototype.setNotation = function (fw) {
    this.notation = fw
  };
  cw.prototype.getNumalign = function () {
    return this.numalign
  };
  cw.prototype.setNumalign = function (fw) {
    this.numalign = fw
  };
  cw.prototype.getOpen = function () {
    return this.open
  };
  cw.prototype.setOpen = function (fw) {
    this.open = fw
  };
  cw.prototype.getPosition = function () {
    return this.position
  };
  cw.prototype.setPosition = function (fw) {
    this.position = fw
  };
  cw.prototype.getRightoverhang = function () {
    return this.rightoverhang
  };
  cw.prototype.setRightoverhang = function (fw) {
    this.rightoverhang = fw
  };
  cw.prototype.getRowalign = function () {
    return this.rowalign
  };
  cw.prototype.setRowalign = function (fw) {
    this.rowalign = fw
  };
  cw.prototype.getRowlines = function () {
    return this.rowlines
  };
  cw.prototype.setRowlines = function (fw) {
    this.rowlines = fw
  };
  cw.prototype.getRowspacing = function () {
    return this.rowspacing
  };
  cw.prototype.setRowspacing = function (fw) {
    this.rowspacing = fw
  };
  cw.prototype.getRowspan = function () {
    return this.rowspan
  };
  cw.prototype.setRowspan = function (fw) {
    this.rowspan = fw
  };
  cw.prototype.getRquote = function () {
    return this.rquote
  };
  cw.prototype.setRquote = function (fw) {
    this.rquote = fw
  };
  cw.prototype.getRspace = function () {
    return this.rspace
  };
  cw.prototype.setRspace = function (fw) {
    this.rspace = fw
  };
  cw.prototype.getSelection = function () {
    return this.selection
  };
  cw.prototype.setSelection = function (fw) {
    this.selection = fw
  };
  cw.prototype.isSeparator = function () {
    return this.separator
  };
  cw.prototype.setSeparator = function (fw) {
    this.separator = fw
  };
  cw.prototype.getSeparators = function () {
    return this.separators
  };
  cw.prototype.setSeparators = function (fw) {
    this.separators = fw
  };
  cw.prototype.getShift = function () {
    return this.shift
  };
  cw.prototype.setShift = function (fw) {
    this.shift = fw
  };
  cw.prototype.getSide = function () {
    return this.side
  };
  cw.prototype.setSide = function (fw) {
    this.side = fw
  };
  cw.prototype.getStackalign = function () {
    return this.stackalign
  };
  cw.prototype.setStackalign = function (fw) {
    this.stackalign = fw
  };
  cw.prototype.isStretchy = function () {
    return this.stretchy
  };
  cw.prototype.setStretchy = function (fw) {
    this.stretchy = fw
  };
  cw.prototype.getSubscriptshift = function () {
    return this.subscriptshift
  };
  cw.prototype.setSubscriptshift = function (fw) {
    this.subscriptshift = fw
  };
  cw.prototype.getSuperscriptshift = function () {
    return this.superscriptshift
  };
  cw.prototype.setSuperscriptshift = function (fw) {
    this.superscriptshift = fw
  };
  cw.prototype.isSymmetric = function () {
    return this.symmetric
  };
  cw.prototype.setSymmetric = function (fw) {
    this.symmetric = fw
  };
  cw.prototype.getValign = function () {
    return this.valign
  };
  cw.prototype.setValign = function (fw) {
    this.valign = fw
  };
  cw.prototype.getWidth = function () {
    return this.width
  };
  cw.prototype.setWidth = function (fw) {
    this.width = fw
  };
  cw.prototype.getFractionLineCapMargin = function () {
    return this.fractionLineCapMargin
  };
  cw.prototype.setFractionLineCapMargin = function (fw) {
    this.fractionLineCapMargin = fw
  };
  cw.prototype.getFractionSpace = function () {
    return this.fractionSpace
  };
  cw.prototype.setFractionSpace = function (fw) {
    this.fractionSpace = fw
  };
  cw.prototype.isSqrtClosed = function () {
    return this.sqrtClosed
  };
  cw.prototype.setSqrtClosed = function (fw) {
    this.sqrtClosed = fw
  };
  cw.prototype.getSqrtClosedLength = function () {
    return this.sqrtClosedLength
  };
  cw.prototype.setSqrtClosedLength = function (fw) {
    this.sqrtClosedLength = fw
  };
  cw.prototype.getSubscriptPostion = function () {
    return this.subscriptPostion
  };
  cw.prototype.setSubscriptPostion = function (fw) {
    this.subscriptPostion = fw
  };
  cw.prototype.getSuperscriptPostion = function () {
    return this.superscriptPostion
  };
  cw.prototype.setSuperscriptPostion = function (fw) {
    this.superscriptPostion = fw
  };
  cw.prototype.getOverSpace = function () {
    return this.overSpace
  };
  cw.prototype.setOverSpace = function (fw) {
    this.overSpace = fw
  };
  cw.prototype.getUnderSpace = function () {
    return this.underSpace
  };
  cw.prototype.setUnderSpace = function (fw) {
    this.underSpace = fw
  };
  cw.prototype.getLargeOpMultiplier = function () {
    return this.largeOpMultiplier
  };
  cw.prototype.setLargeOpMultiplier = function (fw) {
    this.largeOpMultiplier = fw
  };
  cw.prototype.getMrowspacing = function () {
    return this.mrowspacing
  };
  cw.prototype.setMrowspacing = function (fw) {
    this.mrowspacing = fw
  };
  cw.prototype.getMscriptsizemultiplier = function () {
    return this.mscriptsizemultiplier
  };
  cw.prototype.setMscriptsizemultiplier = function (fw) {
    this.mscriptsizemultiplier = fw
  };
  cw.prototype.getCarrythickness = function () {
    return this.carrythickness
  };
  cw.prototype.setCarrythickness = function (fw) {
    this.carrythickness = fw
  };
  cw.prototype.getEnclosethickness = function () {
    return this.enclosethickness
  };
  cw.prototype.setEnclosethickness = function (fw) {
    this.enclosethickness = fw
  };
  cw.prototype.getEnclosespace = function () {
    return this.enclosespace
  };
  cw.prototype.setEnclosespace = function (fw) {
    this.enclosespace = fw
  };
  cw.prototype.getEncloserounded = function () {
    return this.encloserounded
  };
  cw.prototype.setEncloserounded = function (fw) {
    this.encloserounded = fw
  };
  cw.prototype.getLabelspacing = function () {
    return this.labelspacing
  };
  cw.prototype.setLabelspacing = function (fw) {
    this.labelspacing = fw
  };
  cw.prototype.getColumnlinesthickness = function () {
    return this.columnlinesthickness
  };
  cw.prototype.setColumnlinesthickness = function (fw) {
    this.columnlinesthickness = fw
  };
  cw.prototype.getRowlinesthickness = function () {
    return this.rowlinesthickness
  };
  cw.prototype.setRowlinesthickness = function (fw) {
    this.rowlinesthickness = fw
  };
  cw.prototype.getFramelinesthickness = function () {
    return this.framelinesthickness
  };
  cw.prototype.setFramelinesthickness = function (fw) {
    this.framelinesthickness = fw
  };
  cw.prototype.getCnPolarPres = function () {
    return this.cnPolarPres
  };
  cw.prototype.setCnPolarPres = function (fw) {
    this.cnPolarPres = this.cnPolarPres
  };
  function bP() {
    this.scriptsizemultiplier = 0.583;
    this.superscriptPostion = "33%";
    this.subscriptPostion = "33%";
    this.o = cw;
    this.o()
  }
  
  FMath_extend(bP, cw);
  bP.prototype.getSuperscriptPostion = function () {
    return this.superscriptPostion
  };
  bP.prototype.setSuperscriptPostion = function (fw) {
    this.superscriptPostion = fw
  };
  bP.prototype.getScriptsizemultiplier = function () {
    return this.scriptsizemultiplier
  };
  bP.prototype.setScriptsizemultiplier = function (fw) {
    this.scriptsizemultiplier = fw
  };
  bP.prototype.getSubscriptPostion = function () {
    return this.subscriptPostion
  };
  bP.prototype.setSubscriptPostion = function (fw) {
    this.subscriptPostion = fw
  };
  function dq() {
    this.superscriptPostion = "25%";
    this.subscriptPostion = "14%";
    this.o = cw;
    this.o()
  }
  
  FMath_extend(dq, cw);
  dq.prototype.getSuperscriptPostion = function () {
    return this.superscriptPostion
  };
  dq.prototype.setSuperscriptPostion = function (fw) {
    this.superscriptPostion = fw
  };
  dq.prototype.getSubscriptPostion = function () {
    return this.subscriptPostion
  };
  dq.prototype.setSubscriptPostion = function (fw) {
    this.subscriptPostion = fw
  };
  function d7() {
    this.scriptsizemultiplier = 0.58;
    this.superscriptPostion = "33%";
    this.subscriptPostion = "33%";
    this.o = cw;
    this.o()
  }
  
  FMath_extend(d7, cw);
  d7.prototype.getSuperscriptPostion = function () {
    return this.superscriptPostion
  };
  d7.prototype.setSuperscriptPostion = function (fw) {
    this.superscriptPostion = fw
  };
  d7.prototype.getScriptsizemultiplier = function () {
    return this.scriptsizemultiplier
  };
  d7.prototype.setScriptsizemultiplier = function (fw) {
    this.scriptsizemultiplier = fw
  };
  d7.prototype.getSubscriptPostion = function () {
    return this.subscriptPostion
  };
  d7.prototype.setSubscriptPostion = function (fw) {
    this.subscriptPostion = fw
  };
  function aL() {
    this.scriptsizemultiplier = 0.65;
    this.superscriptPostion = "35%";
    this.subscriptPostion = "14%";
    this.o = cw;
    this.o()
  }
  
  FMath_extend(aL, cw);
  aL.prototype.getSuperscriptPostion = function () {
    return this.superscriptPostion
  };
  aL.prototype.setSuperscriptPostion = function (fw) {
    this.superscriptPostion = fw
  };
  aL.prototype.getScriptsizemultiplier = function () {
    return this.scriptsizemultiplier
  };
  aL.prototype.setScriptsizemultiplier = function (fw) {
    this.scriptsizemultiplier = fw
  };
  aL.prototype.getSubscriptPostion = function () {
    return this.subscriptPostion
  };
  aL.prototype.setSubscriptPostion = function (fw) {
    this.subscriptPostion = fw
  };
  function eb() {
  }
  
  function du() {
    this.mathvariant;
    this.mathsize = 0;
    this.color;
    this.bgcolor;
    this.dir;
    this.displaystyle = true;
    this.scriptlevel = 0;
    this.drawBaseline = false;
    this.drawAxisline = false;
    this.drawSuperscriptline = false;
    this.drawMaxwidthline = false
  }
  
  du.prototype.getCopy = function () {
    var fw = new du();
    fw.setMathvariant(this.mathvariant);
    fw.setMathsize(this.mathsize);
    fw.setColor(this.color);
    fw.setBgcolor(this.bgcolor);
    fw.setDir(this.dir);
    fw.setDisplaystyle(this.displaystyle);
    fw.setScriptlevel(this.scriptlevel);
    fw.setDrawAxisline(this.drawAxisline);
    fw.setDrawBaseline(this.drawBaseline);
    fw.setDrawMaxwidthline(this.drawMaxwidthline);
    fw.setDrawSuperscriptline(this.drawSuperscriptline);
    return fw
  };
  du.prototype.getMathvariant = function () {
    return this.mathvariant
  };
  du.prototype.getMathML_mathvariant = function () {
    return this.mathvariant
  };
  du.prototype.setMathvariant = function (fw) {
    this.mathvariant = fw
  };
  du.prototype.setMathML_mathvariant = function (fw) {
    this.mathvariant = fw
  };
  du.prototype.setDefaultValues = function (fw) {
    this.mathvariant = fw.getMathvariant();
    this.mathsize = fw.getMathsize();
    this.color = "black"
  };
  du.prototype.setBold = function (fw) {
    this.mathvariant = du.getBold(this.mathvariant, fw)
  };
  du.prototype.setItalic = function (fw) {
    this.mathvariant = du.getItalic(this.mathvariant, fw)
  };
  du.prototype.getMathsize = function () {
    return this.mathsize
  };
  du.prototype.getMathML_mathsize = function () {
    return this.mathsize
  };
  du.prototype.setMathsize = function (fw) {
    this.mathsize = fw
  };
  du.prototype.setMathML_mathsize = function (fw) {
    this.mathsize = fw
  };
  du.prototype.getColor = function () {
    return this.color
  };
  du.prototype.getMathML_color = function () {
    return this.color
  };
  du.prototype.setColor = function (fw) {
    this.color = fw
  };
  du.prototype.setMathML_color = function (fw) {
    this.color = fw
  };
  du.prototype.getBgcolor = function () {
    return this.bgcolor
  };
  du.prototype.getMathML_bgcolor = function () {
    return this.bgcolor
  };
  du.prototype.setBgcolor = function (fw) {
    this.bgcolor = fw
  };
  du.prototype.setMathML_bgcolor = function (fw) {
    this.bgcolor = fw
  };
  du.prototype.isDrawBaseline = function () {
    return this.drawBaseline
  };
  du.prototype.setDrawBaseline = function (fw) {
    this.drawBaseline = fw
  };
  du.prototype.isDrawAxisline = function () {
    return this.drawAxisline
  };
  du.prototype.setDrawAxisline = function (fw) {
    this.drawAxisline = fw
  };
  du.prototype.isDrawMaxwidthline = function () {
    return this.drawMaxwidthline
  };
  du.prototype.setDrawMaxwidthline = function (fw) {
    this.drawMaxwidthline = fw
  };
  du.prototype.isDrawSuperscriptline = function () {
    return this.drawSuperscriptline
  };
  du.prototype.setDrawSuperscriptline = function (fw) {
    this.drawSuperscriptline = fw
  };
  du.prototype.getDir = function () {
    return this.dir
  };
  du.prototype.setDir = function (fw) {
    this.dir = fw
  };
  du.prototype.isDisplaystyle = function () {
    return this.displaystyle
  };
  du.prototype.setDisplaystyle = function (fw) {
    this.displaystyle = fw
  };
  du.prototype.getScriptlevel = function () {
    return this.scriptlevel
  };
  du.prototype.setScriptlevel = function (fw) {
    this.scriptlevel = fw
  };
  du.prototype.isItalic = function () {
    return du.isItalic(this.mathvariant)
  };
  du.prototype.isBold = function () {
    return du.isBold(this.mathvariant)
  };
  du.isBold = function (fw) {
    if (fw == null) {
      return false
    }
    if (fw.toLowerCase().indexOf("bold") > -1) {
      return true
    }
    return false
  };
  du.isItalic = function (fw) {
    if (fw == null) {
      return false
    }
    if (fw.toLowerCase().indexOf("italic") > -1) {
      return true
    }
    return false
  };
  du.hasBold = function (fw) {
    if (fw == null) {
      return true
    }
    fw = du.getItalic(fw, false);
    fw = du.getBold(fw, false);
    if (fw == "monospace") {
      return false
    }
    return true
  };
  du.hasItalic = function (fw) {
    if (fw == null) {
      return true
    }
    fw = du.getItalic(fw, false);
    fw = du.getBold(fw, false);
    if (fw == "monospace") {
      return false
    }
    if (fw == "fraktur") {
      return false
    }
    if (fw == "script") {
      return false
    }
    return true
  };
  du.getItalic = function (fx, fw) {
    if (fw) {
      if (fx == null || fx == "normal") {
        return "italic"
      } else {
        if (fx == "italic" || fx == "bold-italic" || fx == "double-struck-italic" || fx == "double-struck-bold-italic" || fx == "fraktur" || fx == "bold-fraktur" || fx == "script" || fx == "bold-script" || fx == "sans-serif-italic" || fx == "sans-serif-bold-italic" || fx == "monospace") {
          return fx
        } else {
          if (fx == "bold-double-struck") {
            return "double-struck-bold-italic"
          } else {
            if (fx == "bold-sans-serif") {
              return "sans-serif-bold-italic"
            }
          }
        }
      }
      return fx + "-italic"
    } else {
      if (fx == null || fx == "italic") {
        return "normal"
      } else {
        if (fx == "bold-italic") {
          return "bold"
        } else {
          if (fx == "normal" || fx == "bold" || fx == "double-struck" || fx == "bold-double-struck" || fx == "fraktur" || fx == "bold-fraktur" || fx == "script" || fx == "bold-script" || fx == "sans-serif" || fx == "bold-sans-serif" || fx == "monospace") {
            return fx
          } else {
            if (fx == "double-struck-bold-italic") {
              return "bold-double-struck"
            } else {
              if (fx == "sans-serif-bold-italic") {
                return "bold-sans-serif"
              } else {
                if (fx.indexOf("-italic") > -1) {
                  return fx.substring(0, fx.indexOf("-italic"))
                }
              }
            }
          }
        }
      }
    }
    return fx
  };
  du.getBold = function (fx, fw) {
    if (fw) {
      if (fx == null || fx == "normal") {
        return "bold"
      } else {
        if (fx == "bold" || fx == "bold-italic" || fx == "bold-double-struck" || fx == "double-struck-bold-italic" || fx == "bold-fraktur" || fx == "bold-script" || fx == "sans-serif-bold-italic" || fx == "monospace") {
          return fx
        } else {
          if (fx == "double-struck-italic") {
            return "double-struck-bold-italic"
          } else {
            if (fx == "sans-serif-italic") {
              return "sans-serif-bold-italic"
            }
          }
        }
      }
      return "bold-" + fx
    } else {
      if (fx == null || fx == "bold") {
        return "normal"
      } else {
        if (fx == "bold-italic") {
          return "italic"
        } else {
          if (fx == "normal" || fx == "italic" || fx == "double-struck" || fx == "double-struck-italic" || fx == "fraktur" || fx == "script" || fx == "sans-serif" || fx == "sans-serif-italic" || fx == "monospace") {
            return fx
          } else {
            if (fx == "double-struck-bold-italic") {
              return "double-struck-italic"
            } else {
              if (fx == "sans-serif-bold-italic") {
                return "sans-serif-italic"
              } else {
                if (fx.indexOf("bold-") == 0) {
                  return fx.substring(5, fx.length)
                }
              }
            }
          }
        }
      }
    }
    return fx
  };
  du.getDefault = function (fw) {
    if (fw == "bold-italic") {
      return "bold"
    } else {
      if (fw.indexOf("-bold-italic") > -1) {
        return "bold-italic"
      } else {
        if (fw.indexOf("bold-") > -1) {
          return "bold"
        } else {
          if (fw.indexOf("-italic") > -1) {
            return "italic"
          }
        }
      }
    }
    return "normal"
  };
  function eu() {
  }
  
  eu.getBase64Value = function () {
    return al
  };
  function N(fx, fw) {
    this.code;
    this.name;
    this.rgb = 0;
    this.r = 0;
    this.g = 0;
    this.b = 0;
    this.code = fx;
    this.name = fw;
    if (this.code != null) {
      if (this.code.indexOf("#") == 0) {
        this.code = this.code.substring(1, this.code.length)
      }
      if (this.code.length > 5) {
        this.r = ds.getIntFromHexCode(this.code.substring(0, 2));
        this.g = ds.getIntFromHexCode(this.code.substring(2, 4));
        this.b = ds.getIntFromHexCode(this.code.substring(4, 6))
      } else {
        if (this.code.length > 2) {
          this.r = ds.getIntFromHexCode(this.code.substring(0, 1) + this.code.substring(0, 1));
          this.g = ds.getIntFromHexCode(this.code.substring(1, 2) + this.code.substring(1, 2));
          this.b = ds.getIntFromHexCode(this.code.substring(2, 3) + this.code.substring(2, 3))
        }
      }
    }
    this.rgb = this.b + this.g * 256 + this.r * 65536
  }
  
  N.prototype.getName = function () {
    return this.name
  };
  N.prototype.setName = function (fw) {
    this.name = fw
  };
  N.prototype.getR = function () {
    return this.r
  };
  N.prototype.getG = function () {
    return this.g
  };
  N.prototype.getB = function () {
    return this.b
  };
  N.prototype.getRgb = function () {
    return this.rgb
  };
  function r() {
  }
  
  r.cleanUpOmmlXML = function (fw) {
    r.cleanUpEmptyOmmlXML(fw)
  };
  r.cleanUpEmptyOmmlXML = function (fy) {
    var fw = fy.localName();
    for (var fx = 0; fx < fy.getChildren().length; fx++) {
      var fA = fy.getChildren()[fx];
      if (fA.localName() == null && !(fw == "t")) {
        var fz = fA.toString();
        fz = fu.trim(fz);
        if (fz.length == 0) {
          aH.xmlDeleteChild(fy, fA.childIndex());
          fx--
        }
      } else {
        r.cleanUpEmptyOmmlXML(fA)
      }
    }
  };
  r.removeNamespace = function (fw) {
    while (fw.indexOf(" xmlns:") > -1) {
      var fx = fw.indexOf(" xmlns:");
      var fz = fw.indexOf("http", fx);
      var fA = fx;
      var fy = fw.indexOf(" ", fz);
      if (fy > -1) {
        fA = fy
      }
      fy = fw.indexOf(">", fz);
      if (fy > -1 && fy < fA) {
        fA = fy
      }
      fw = fw.substring(0, fx) + fw.substring(fA, fw.length)
    }
    fw = r.replaceInTag(fw);
    return fw
  };
  r.replaceInTag = function (fx) {
    var fy = fx.indexOf("<");
    while (fy > -1) {
      var fB = fx.indexOf(">", fy);
      if (fB == -1) {
        break
      }
      var fw = fx.substring(fy, fB);
      var fz = 1;
      if (fw.indexOf("</") == 0) {
        fz = 2
      }
      if (fw.indexOf(":") > -1) {
        var fA = fw.substring(fz, fw.indexOf(":"));
        fw = fu.replace(fw, fA + ":", "");
        fw = r.replaceOtherNameSpace(fw);
        fx = fx.substring(0, fy) + fw + fx.substring(fB, fx.length)
      }
      fy = fy + fw.length;
      fy = fx.indexOf("<", fy)
    }
    return fx
  };
  r.replaceOtherNameSpace = function (fw) {
    if (fw.indexOf(":") == -1) {
      return fw
    }
    var fx = fw.indexOf(":");
    var fy = fw.lastIndexOf(" ", fx);
    if (fy == -1) {
      return fw
    }
    fw = fw.substring(0, fy + 1) + fw.substring(fx + 1, fw.length);
    return r.replaceOtherNameSpace(fw)
  };
  r.getNameFromTag = function (fw) {
    if (fw == null) {
      return null
    }
    fw = fu.trim(fw);
    var fy = fw.indexOf(" ");
    var fx = fw.indexOf(">");
    if (fx > -1) {
      if (fy > -1) {
        if (fx < fy) {
          fy = fx
        }
      } else {
        fy = fx
      }
    }
    return fw.substring(1, fy)
  };
  function fu() {
  }
  
  fu.trimLeft = function (fw) {
    if (fw == "") {
      return ""
    }
    while (true) {
      if (fw.length == 0) {
        return ""
      }
      var fx = fw.charCodeAt(0);
      if (fx < 33) {
      } else {
        break
      }
      fw = fw.substring(1, fw.length)
    }
    return fw
  };
  fu.trimRight = function (fw) {
    if (fw == "") {
      return ""
    }
    while (true) {
      var fx = fw.charCodeAt(fw.length - 1);
      if (fx < 33) {
      } else {
        break
      }
      fw = fw.substring(0, fw.length - 1)
    }
    return fw
  };
  fu.trim = function (fw) {
    return fu.trimRight(fu.trimLeft(fw))
  };
  fu.replace = function (fx, fA, fz) {
    var fy = -1;
    while (fx.indexOf(fA, fy) != -1) {
      var fw = fx.indexOf(fA, fy);
      fx = fx.substring(0, fw) + fz + fx.substring(fw + fA.length, fx.length);
      fy = fw + fz.length
    }
    return fx
  };
  fu.replaceFirstChar = function (fx, fy, fA, fz) {
    if (fx.indexOf(fA, fy) != -1) {
      var fw = fx.indexOf(fA, fy);
      fx = fx.substring(0, fw) + fz + fx.substring(fw + fA.length, fx.length);
      fy = fw + fz.length
    }
    return fx
  };
  fu.isLowercase = function (fy) {
    for (var fw = 0; fw < fy.length; fw++) {
      var fz = fy.charAt(fw) + "";
      if (!fu.isAZ09az(fz)) {
        return false
      }
      if (fz == "b" || fz == "d" || fz == "f" || fz == "h" || fz == "i" || fz == "j" || fz == "k" || fz == "l" || fz == "t") {
        return false
      }
      try {
        Integer.parseInt(fz);
        return false
      } catch (fx) {
      }
      if (!fz == fz.toLowerCase()) {
        return false
      }
    }
    return true
  };
  fu.isUndercase = function (fx) {
    for (var fw = 0; fw < fx.length; fw++) {
      var fy = fx.charAt(fw) + "";
      if (!fu.isAZ09az(fy)) {
        return true
      }
      if (fy == "g" || fy == "j" || fy == "p" || fy == "q" || fy == "y") {
        return true
      }
    }
    return false
  };
  fu.isAZ09az = function (fw) {
    if (fu.is09(fw) || fu.isAZ(fw) || fu.isaz(fw)) {
      return true
    }
    return false
  };
  fu.is09 = function (fx) {
    var fw = fx.charCodeAt(0);
    if (fw >= 48 && fw <= 57) {
      return true
    }
    return false
  };
  fu.isAZ = function (fx) {
    var fw = fx.charCodeAt(0);
    if (fw >= 65 && fw <= 90) {
      return true
    }
    return false
  };
  fu.isaz = function (fx) {
    var fw = fx.charCodeAt(0);
    if (fw >= 97 && fw <= 122) {
      return true
    }
    return false
  };
  fu.deleteText = function (fz, fy, fw) {
    var fx = fz.indexOf(fy);
    while (fx > -1) {
      var fA = fz.indexOf(fw, fx);
      if (fA == -1) {
        break
      }
      fz = fz.substring(0, fx) + fz.substring(fA + fw.length, fz.length);
      fx = fz.indexOf(fy)
    }
    return fz
  };
  fu.xmlescape = function (fx) {
    for (var fw = 0; fw < fx.length; fw++) {
      var fy = fx.charAt(fw);
      if (fy == "<") {
        fx = fx.substring(0, fw) + "&lt;" + fx.substring(fw + 1, fx.length);
        fw = fw + 3
      } else {
        if (fy == ">") {
          fx = fx.substring(0, fw) + "&gt;" + fx.substring(fw + 1, fx.length);
          fw = fw + 3
        }
      }
    }
    return fx
  };
  fu.changeA0 = function (fx) {
    for (var fw = 0; fw < fx.length; fw++) {
      var fy = fx.charAt(fw);
      if (fy == 160) {
        fx = fx.substring(0, fw) + " " + fx.substring(fw + 1, fx.length)
      }
    }
    return fx
  };
  fu.preserveSpace = function (fx) {
    for (var fw = 0; fw < fx.length; fw++) {
      var fy = fx.charAt(fw);
      if (fy == " ") {
        fx = fx.substring(0, fw) + "&nbsp;" + fx.substring(fw + 1, fx.length);
        fw = fw + 5
      } else {
        break
      }
    }
    for (var fw = fx.length - 1; fw >= 0; fw--) {
      var fy = fx.charAt(fw);
      if (fy == " ") {
        fx = fx.substring(0, fw) + "&nbsp;" + fx.substring(fw + 1, fx.length);
        fw = fw - 5
      } else {
        break
      }
    }
    return fx
  };
  fu.addTabs = function (fz, fx) {
    if (!fx) {
      return ""
    }
    var fy = new cE("");
    for (var fw = 0; fw < fz; fw++) {
      fy.append("    ")
    }
    return fy.toString()
  };
  fu.addNewLine = function (fx, fw) {
    if (!fw) {
      return fx
    }
    return fx + "\n"
  };
  fu.deleteAttribute = function (fy, fz) {
    var fx = fy.substring(0, fy.indexOf(">"));
    var fw = fy.substring(fy.indexOf(">"), fy.length);
    if (fx.indexOf(" " + fz + "=") > -1) {
      var fB = fx.indexOf(" " + fz + "=");
      var fA = fx.indexOf('"', fB + fz.length + 3);
      fx = fx.substring(0, fB) + fx.substring(fA + 1, fx.length)
    }
    return fx + fw
  };
  function fq() {
  }
  
  fq.convertToMathML = function (fw) {
    return dw.convertToMathML(fw)
  };
  function a5() {
  }
  
  a5.convertToLatex = function (fy) {
    try {
      var fA = c9.createBeanStructure(fy, aC);
      var fw = new fg();
      var fB = new eq();
      var fx = fB.processToLatex(fA, fw);
      return fx
    } catch (fz) {
    }
    return "$ Error $"
  };
  function fe() {
  }
  
  fe.writeWordDocStreamFromMathML = function (fw, fx) {
    var fy = aU.convertToOMML(fx);
    dB.writeOmmlInWordDocument(fw, fy)
  };
  fe.writeWordDocFromMathML = function (fy, fx) {
    var fw = new FileOutputStream(fy);
    try {
      fe.writeWordDocStreamFromMathML(fw, fx)
    } finally {
      if (fw != null) {
        fw.close()
      }
    }
  };
  function b7() {
  }
  
  b7.getMathMLFromDocStream = function (fx, fy) {
    var fw = dB.getOMMLFromStream(fx, fy);
    return bn.createMathMLFromOmmlList(fw)
  };
  b7.getMathMLFromDocFile = function (fx) {
    var fw = dB.getOMMLFromLocalDoc(fx);
    return bn.createMathMLFromOmmlList(fw)
  };
  function dw() {
  }
  
  dw.convertToMathML = function (fx) {
    fx = ak.insertParanthesisInLatex(fx);
    fx = bs.insertParanthesisInLatex(fx);
    fx = bU.changeToUnicode(fx);
    var fw = new b0(fx);
    fw.processDocumentInfo();
    aA.splitTextModeAndMathMode(fw);
    R.insertSpaceNodesOnlyInTextMode(fw);
    cA.insertParanthesisInMathMode(fw, cL.getCodes(), cL.getKeys());
    cA.insertParanthesisInMathMode(fw, dg.getCodes(), dg.getKeys());
    cA.insertParanthesisInMathMode(fw, aR.getCodes(), aR.getKeys());
    cA.insertParanthesisInMathMode(fw, cH.getCodes(), cH.getKeys());
    cA.insertParanthesisInMathMode(fw, R.getCodes(), R.getKeys());
    cA.insertParanthesisInMathMode(fw, cV.getCodes(), cV.getKeys());
    cA.insertParanthesisInMathMode(fw, d1.getCodes(), d1.getKeys());
    cA.insertParanthesisInMathMode(fw, bu.getCodes(), bu.getKeys());
    cA.insertParanthesisInMathMode(fw, dE.getCodes(), dE.getKeys());
    aR.insertParanthesisInMathMode(fw);
    bE.splitInBlocks(fw);
    bE.removeBlockWithOneChild(fw);
    dE.searchRoot(fw);
    bs.searchMatrix(fw);
    ak.searchFence(fw);
    cH.searchFunctions(fw);
    cL.findFunctions(fw);
    R.searchSpaces(fw);
    cV.searchFontChange(fw);
    d1.searchTextMode(fw);
    bu.searchPhantom(fw);
    t.searchOperators(fw);
    dg.searchFractions(fw);
    aR.findAllMultiNode(fw);
    aR.findPrescript(fw);
    bE.trimBlock(fw);
    bE.removeBlockWithOneChild(fw);
    bE.removeBlockInBlock(fw);
    fw.doOptimization();
    fw.optimizationStyle(fw.getStyle());
    fw.changeToMathMLSymbole();
    return fw.toMathMLString(0)
  };
  function bE() {
  }
  
  bE.splitInBlocks = function (fy) {
    var fx = fy.getChildren();
    for (var fw = 0; fw < fx.size(); fw++) {
      var fA = fx.get(fw);
      if (fA instanceof L) {
        var fz = fA.getText();
        fA.setText(null);
        bE.splitInBlocksText(fA, fz)
      }
    }
  };
  bE.removeBlockWithOneChild = function (fA) {
    var fx = fA.getChildren();
    for (var fw = 0; fw < fx.size(); fw++) {
      var fB = fx.get(fw);
      var fz = fB.getChildren();
      if (fz.size() == 1) {
        var fy = fz.get(0);
        if (bE.acceptParentChild(fB, fy)) {
          fy.getStyle().copyAllFrom(fB.getStyle());
          if (fB.isDefinedByUser()) {
            fy.setDefinedByUser(true)
          }
          fx.remove(fw);
          fx.addTo(fw, fy);
          fw = fw - 1
        }
      }
    }
    fx = fA.getChildren();
    for (var fw = 0; fw < fx.size(); fw++) {
      var fB = fx.get(fw);
      bE.removeBlockWithOneChild(fB)
    }
  };
  bE.acceptParentChild = function (fx, fw) {
    if ("block" == fx.getName()) {
      if ("block" == fw.getName()) {
        return true
      }
      if ("mfrac" == fw.getName()) {
        return true
      }
      if ("multi" == fw.getName()) {
        return true
      }
      if ("mo" == fw.getName()) {
        return true
      }
      if ("runtime" == fw.getName()) {
        return true
      }
      if ("mfenced" == fw.getName()) {
        return true
      }
      if ("matrix" == fw.getName()) {
        return true
      }
      if ("mphantom" == fw.getName()) {
        return true
      }
      if ("textmode" == fw.getName()) {
        return true
      }
    }
    return false
  };
  bE.removeBlockInBlock = function (fA) {
    var fy = fA.getChildren();
    for (var fx = 0; fx < fy.size(); fx++) {
      var fB = fy.get(fx);
      if (bE.acceptParentChildInBloc(fA, fB)) {
        fy.remove(fx);
        var fz = fB.getChildren();
        for (var fw = 0; fw < fz.size(); fw++) {
          fy.addTo(fx + fw, fz.get(fw))
        }
        fx--
      }
    }
    fy = fA.getChildren();
    for (var fx = 0; fx < fy.size(); fx++) {
      var fB = fy.get(fx);
      bE.removeBlockInBlock(fB)
    }
  };
  bE.acceptParentChildInBloc = function (fw, fx) {
    if (fx.getStyleAttributes().length > 0) {
      return false
    }
    if (fx.getChildren().size() == 0) {
      return false
    }
    if ("block" == fw.getName() || "math" == fw.getName() || "mathmode" == fw.getName() || "mfenced" == fw.getName()) {
      if ("block" == fx.getName()) {
        return true
      }
    }
    return false
  };
  bE.trimBlock = function (fA) {
    var fz = fA.getChildren();
    for (var fB = 0; fB < fz.size(); fB++) {
      var fx = fz.get(fB);
      if (fx instanceof c6) {
        continue
      }
      var fE = fx.getText();
      if (fE != null) {
        fE = fu.trim(fE);
        fx.setText(fE);
        if (fE.length == 0) {
          fz.remove(fB);
          fB--;
          continue
        } else {
          if (fE.indexOf(" ") > -1) {
            var fC = fE.indexOf(" ");
            var fy = fE.substring(0, fC);
            fy = fu.trim(fy);
            var fw = fE.substring(fC, fE.length);
            fw = fu.trim(fw);
            fx.setText(fy);
            var fD = new el("block");
            fD.setText(fw);
            fD.setStyle(fx.getStyle().createCopy());
            fz.addTo(fB + 1, fD)
          }
        }
      }
    }
    for (var fB = 0; fB < fz.size(); fB++) {
      var fx = fz.get(fB);
      bE.trimBlock(fx)
    }
  };
  bE.splitInBlocksText = function (fz, fy) {
    var fx = null;
    var fw = 0;
    var fB = 0;
    if (fy != null && fy.length > 0) {
      do {
        var fA = fy.charAt(fw);
        if (fA == "{") {
          fw = fw + 1;
          fx = new el("block");
          fx.setDefinedByUser(true);
          fz.getChildren().add(fx);
          fw = fw + bE.splitInBlocksText(fx, fy.substring(fw, fy.length));
          fw = fw + 1;
          fB = fw;
          fx = null;
          continue
        } else {
          if (fA == "}") {
            return fw
          } else {
            if (fx == null) {
              fx = new el("block");
              fz.getChildren().add(fx)
            }
            fx.setText(fy.substring(fB, fw + 1))
          }
        }
        fw = fw + 1
      } while (fw < fy.length)
    }
    return 0
  };
  function bU() {
  }
  
  bU.changeToUnicode = function (fy) {
    var fC = -1;
    var fH = e6.split("|");
    while ((fC = fy.indexOf("\\", fC)) > -1) {
      fC = fC + 1;
      var fE = false;
      for (var fB = 0; fB < fH.length; fB++) {
        if (fy.indexOf(fH[fB], fC) == fC) {
          fE = true;
          break
        }
      }
      if (fE) {
        continue
      }
      var fA = "";
      for (var fB = fC; fB < fy.length; fB++) {
        if ((fB - fC) < 1) {
          continue
        }
        var fx = fy.substring(fC, fB);
        if (!br.hasSymbolsStartWith("\\" + fx)) {
          break
        }
        fA = fx
      }
      if (!br.hasSymbol("\\" + fA) || ca.indexOf("," + fA + ",") > -1) {
        fA = ""
      }
      var fz = "";
      var fw = -1;
      var fG = fj.split(",");
      for (var fB = 0; fB < fG.length; fB++) {
        var fx = fG[fB];
        if (fx.length == 0) {
          continue
        }
        if (ca.indexOf("," + fx + ",") > -1) {
          continue
        }
        if (fy.indexOf(fx, fC) == fC) {
          if (fz.length < fx.length) {
            fz = fx;
            fw = fB
          }
        }
      }
      var fI = "";
      for (var fB = fC; fB < fy.length; fB++) {
        if ((fB - fC) < 2) {
          continue
        }
        var fx = fy.substring(fC, fB);
        if (!bB.hasSymbolsStartWith(fx)) {
          break
        }
        fI = fx
      }
      if (!bB.hasSymbol(fI)) {
        fI = ""
      }
      if (ca.indexOf("," + fI + ",") > -1) {
        fI = ""
      }
      if (fI.length == 0 && fz.length == 0 && fA.length == 0) {
        continue
      }
      if (fA.length >= fz.length && fA.length >= fI.length) {
        var fD = br.getUnicodeCharForCode("\\" + fA);
        fy = fy.substring(0, fC - 1) + fD + fy.substring(fC + fA.length, fy.length);
        continue
      }
      if (fz.length > fA.length && fz.length > fI.length) {
        var fF = ai.split(",");
        var fD = bB.getChar(fF[fw]);
        fy = fy.substring(0, fC - 1) + fD + fy.substring(fC + fz.length, fy.length);
        continue
      }
      if (fI.length > fA.length && fI.length > fz.length) {
        var fD = bB.getChar(fI);
        fy = fy.substring(0, fC - 1) + fD + fy.substring(fC + fI.length, fy.length);
        continue
      }
    }
    return fy
  };
  bU.convToMathML = function (fB) {
    if (fB == null) {
      return null
    }
    var fA = new cE("");
    for (var fy = 0; fy < fB.length; fy++) {
      var fx = fB.charAt(fy);
      if (fx == "<") {
        fA.append("&lt;");
        continue
      } else {
        if (fx == ">") {
          fA.append("&gt;");
          continue
        }
      }
      var fw = fB.charCodeAt(fy);
      if (fw > 127) {
        var fz = bB.getFirstCodeForNumber(fw);
        if (fz.length > 0) {
          fA.append("&" + fz + ";")
        } else {
          fA.append(fx + "")
        }
      } else {
        fA.append(fx + "")
      }
    }
    return fA.toString()
  };
  function ak() {
  }
  
  ak.insertParanthesisInLatex = function (fx) {
    var fy = f.split(",");
    for (var fw = 0; fw < fy.length; fw++) {
      var fz = fy[fw];
      if (fz.length > 0) {
        fx = ak.insertParanthesis(fx, "left" + fz, fz, true);
        fx = ak.insertParanthesis(fx, "right" + fz, fz, false)
      }
    }
    return fx
  };
  ak.insertParanthesis = function (fz, fy, fA, fx) {
    var fw = -1;
    do {
      fw = fz.indexOf("\\" + fy, fw);
      if (fw == -1) {
        break
      }
      if (fA == "\\{") {
        fA = "F1"
      } else {
        if (fA == "\\}") {
          fA = "F2"
        } else {
          fA = fu.replace(fA, "\\", "?")
        }
      }
      if (fx) {
        fz = fz.substring(0, fw) + "{" + aE + fA + "}{" + fz.substring(fw + 1 + fy.length, fz.length)
      } else {
        fz = fz.substring(0, fw) + "}{" + aE + fA + "}" + fz.substring(fw + 1 + fy.length, fz.length)
      }
      fw = fw + aE.length + fA.length + 3
    } while (true);
    return fz
  };
  ak.searchFence = function (fy) {
    var fx = fy.getChildren();
    for (var fz = 0; fz < fx.size(); fz++) {
      var fw = fx.get(fz);
      if (fw instanceof el && fz < (fx.size() - 2)) {
        var fE = fw.getText();
        if (fE != null && fE.indexOf(aE) == 0) {
          var fC = null;
          if ((fz + 1) < fx.size()) {
            fC = fx.get(fz + 1)
          }
          var fD = null;
          if ((fz + 2) < fx.size()) {
            fD = fx.get(fz + 2)
          }
          var fA = ak.getCharFrom(fw);
          var fF = ak.getCharFrom(fD);
          var fB = new aP(fA, fF);
          fB.getChildren().add(fC);
          fx.remove(fz);
          if (fC != null) {
            fx.remove(fz)
          }
          if (fD != null) {
            fx.remove(fz)
          }
          fx.addTo(fz, fB)
        }
      }
      fw = fx.get(fz);
      ak.searchFence(fw)
    }
  };
  ak.getCharFrom = function (fC) {
    if (fC == null) {
      return ""
    }
    var fA = fC.getText();
    var fy = fA.substring(aE.length, fA.length);
    if (fy == "F1") {
      fy = "\\{"
    } else {
      if (fy == "F2") {
        fy = "\\}"
      }
    }
    fy = fu.replace(fy, "?", "\\");
    var fz = f.split(",");
    var fx = G.split(",");
    for (var fw = 0; fw < fz.length; fw++) {
      var fB = fz[fw];
      if (fB.length > 0) {
        if (fy == fB) {
          return fx[fw]
        }
      }
    }
    return ""
  };
  function cV() {
  }
  
  cV.getCodes = function () {
    return be.split("|")
  };
  cV.getKeys = function () {
    return eo
  };
  cV.searchFontChange = function (fz) {
    var fx = fz.getChildren();
    for (var fw = 0; fw < fx.size(); fw++) {
      var fD = fx.get(fw);
      var fB = null;
      if ((fw + 1) < fx.size()) {
        fB = fx.get(fw + 1)
      }
      var fy = null;
      if ((fw + 2) < fx.size()) {
        fy = fx.get(fw + 2)
      }
      if (fD instanceof el) {
        var fC = fD.getText();
        if (fC != null && fC.indexOf(eo) == 0) {
          var fA = fC.substring(eo.length, fC.length);
          fx.remove(fw);
          fw--;
          if (fB != null) {
            if ("mathnormal" == fA || "mathrm" == fA) {
              fB.getStyle().setFont("normal")
            } else {
              if ("mathit" == fA) {
                fB.getStyle().setFont("italic")
              } else {
                if ("mathbfup" == fA || "mathbf" == fA || "emph" == fA) {
                  fB.getStyle().setFont("bold")
                } else {
                  if ("mathbi" == fA) {
                    fB.getStyle().setFont("bold-italic")
                  } else {
                    if ("mathsf" == fA) {
                      fB.getStyle().setFont("sans-serif")
                    } else {
                      if ("mathsfb" == fA) {
                        fB.getStyle().setFont("bold-sans-serif")
                      } else {
                        if ("mathsfi" == fA) {
                          fB.getStyle().setFont("sans-serif-italic")
                        } else {
                          if ("mathsfbi" == fA) {
                            fB.getStyle().setFont("sans-serif-bold-italic")
                          } else {
                            if ("mathbb" == fA) {
                              fB.getStyle().setFont("double-struck")
                            } else {
                              if ("mathbbb" == fA) {
                                fB.getStyle().setFont("bold-double-struck")
                              } else {
                                if ("mathbbi" == fA) {
                                  fB.getStyle().setFont("double-struck-italic")
                                } else {
                                  if ("mathbbbi" == fA) {
                                    fB.getStyle().setFont("double-struck-bold-italic")
                                  } else {
                                    if ("mathfrak" == fA) {
                                      fB.getStyle().setFont("fraktur")
                                    } else {
                                      if ("mathfrakb" == fA) {
                                        fB.getStyle().setFont("bold-fraktur")
                                      } else {
                                        if ("mathcal" == fA) {
                                          fB.getStyle().setFont("script")
                                        } else {
                                          if ("mathscr" == fA) {
                                            fB.getStyle().setFont("script")
                                          } else {
                                            if ("mathcalb" == fA) {
                                              fB.getStyle().setFont("bold-script")
                                            } else {
                                              if ("mathscrb" == fA) {
                                                fB.getStyle().setFont("bold-script")
                                              } else {
                                                if ("mathtt" == fA) {
                                                  fB.getStyle().setFont("monospace")
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (fy != null) {
            if ("textcolor" == fA) {
              fy.getStyle().setColor(fB.getText());
              fx.remove(fw + 1)
            }
          }
        }
      }
      cV.searchFontChange(fD)
    }
  };
  function dg() {
  }
  
  dg.getCodes = function () {
    return b.split("|")
  };
  dg.getKeys = function () {
    return W
  };
  dg.searchFractions = function (fy) {
    var fx = fy.getChildren();
    var fE = false;
    var fz = false;
    var fD = false;
    for (var fB = 0; fB < fx.size(); fB++) {
      var fw = fx.get(fB);
      if (fw instanceof el && fB < (fx.size() - 2)) {
        var fG = fw.getText();
        if (fG != null && fG.indexOf(W) == 0) {
          var fF = fG.substring(W.length, fG.length);
          fE = "binom" == fF;
          fz = "sfrac" == fF;
          fD = "cfrac" == fF;
          var fC = fx.get(fB + 1);
          var fA = fx.get(fB + 2);
          fw = new a0(fC, fA, fE, fz, fD);
          fx.remove(fB);
          fx.remove(fB);
          fx.remove(fB);
          fx.addTo(fB, fw)
        }
      }
      dg.searchFractions(fw)
    }
  };
  function cH() {
  }
  
  cH.getCodes = function () {
    return a6.split(",")
  };
  cH.getKeys = function () {
    return e0
  };
  cH.searchFunctions = function (fy) {
    var fx = fy.getChildren();
    for (var fw = 0; fw < fx.size(); fw++) {
      var fA = fx.get(fw);
      if (fA instanceof el) {
        var fz = fA.getText();
        if (fz != null && fz.indexOf(e0) == 0) {
          fA.setType("FUNCTION");
          fA.setText(fz.substring(e0.length, fz.length));
          fA.getStyle().setFont("normal")
        }
      }
      cH.searchFunctions(fA)
    }
  };
  function cL() {
  }
  
  cL.getCodes = function () {
    return c1.split("|")
  };
  cL.getKeys = function () {
    return aX
  };
  cL.findFunctions = function (fA) {
    var fy = fA.getChildren();
    for (var fx = 0; fx < fy.size(); fx++) {
      var fC = fy.get(fx);
      if (fx < (fy.size() - 3)) {
        if (fC instanceof el) {
          var fB = fC.getText();
          if (fB != null) {
            if (fB == aX + "bar") {
              var fz = fy.get(fx + 1);
              var fw = new cK("bar", fz);
              fy.remove(fx + 1);
              fy.addTo(fx + 1, fw);
              fy.remove(fx);
              fx = fx - 1
            }
          }
        }
      }
      cL.findFunctions(fC)
    }
  };
  function aA() {
  }
  
  aA.splitTextModeAndMathMode = function (fw) {
    aA.processNode(fw, "\\begin{equation}", "\\end{equation}");
    aA.processNode(fw, "\\begin{math}", "\\end{math}");
    aA.processNode(fw, "\\begin{displaymath}", "\\end{displaymath}");
    aA.processNode(fw, "\\[", "\\]");
    aA.processNode(fw, "\\(", "\\)");
    aA.processNode(fw, "$$", "$$");
    aA.processNode(fw, "$", "$");
    aA.cleanUpDelimitators(fw)
  };
  aA.cleanUpDelimitators = function (fy) {
    var fx = fy.getChildren();
    for (var fw = 0; fw < fx.size(); fw++) {
      var fA = fx.get(fw);
      var fz = fA.getText();
      if (fA instanceof c6) {
        fz = fu.replace(fz, "\\$", "$");
        fA.setText(fz)
      }
      if (fz.length == 0) {
        fx.remove(fw);
        fw--
      }
    }
  };
  aA.processNode = function (fz, fE, fw) {
    var fJ = false;
    var fy = fz.getChildren();
    do {
      fJ = false;
      for (var fC = 0; fC < fy.size(); fC++) {
        var fx = fy.get(fC);
        if (fx instanceof c6) {
          var fI = fx.getText();
          if (fI == null) {
            continue
          }
          var fH = aA.getNextDelim(fI, fE, -1);
          if (fH > -1) {
            var fG = aA.getNextDelim(fI, fw, fH + fE.length);
            if (fG > -1) {
              fy.remove(fC);
              var fB = new c6();
              var fD = fI.substring(0, fH);
              fB.setText(fD);
              fy.addTo(fC, fB);
              var fF = aA.getMathModeNode(fI.substring(fH + fE.length, fG), fE);
              fy.addTo(fC + 1, fF);
              var fA = new c6();
              fD = fI.substring(fG + fw.length);
              fA.setText(fD);
              fy.addTo(fC + 2, fA);
              fJ = true;
              break
            }
          }
        }
      }
    } while (fJ)
  };
  aA.getNextDelim = function (fz, fy, fx) {
    var fw = fz.indexOf(fy, fx);
    while (fw > -1) {
      if ("$" == fy && fw > 0) {
        var fA = fz.charAt(fw - 1);
        if (fA == "\\") {
          fx = fw + 1;
          fw = fz.indexOf(fy, fx);
          continue
        }
      }
      return fw
    }
    return fw
  };
  aA.getMathModeNode = function (fy, fx) {
    var fw = new L();
    if (fx == "\\begin{equation}") {
      fw.setLabeled(true)
    } else {
      if (fx == "\\begin{math}" || fx == "\\(" || fx == "$") {
        fw.getStyle().setInline("true")
      }
    }
    fy = aA.processTextInMathMode(fy);
    fw.setText(fy);
    return fw
  };
  aA.processTextInMathMode = function (fw) {
    fw = fu.trim(fw);
    fw = fu.replace(fw, "\\$", "$");
    fw = fu.replace(fw, "\\#", "#");
    return fw
  };
  function bs() {
  }
  
  bs.insertParanthesisInLatex = function (fy) {
    var fw = cZ.split("|");
    for (var fx = 0; fx < fw.length; fx++) {
      var fz = fw[fx];
      if (fz.length > 0) {
        fy = bs.insertParanthesis(fy, "begin{" + fz + "}", fz, true);
        fy = bs.insertParanthesis(fy, "end{" + fz + "}", fz, false)
      }
    }
    return fy
  };
  bs.insertParanthesis = function (fA, fy, fB, fx) {
    var fw = -1;
    do {
      fw = fA.indexOf("\\" + fy, fw);
      if (fw == -1) {
        break
      }
      var fz = "F";
      if (fB.indexOf("*") > -1) {
        if (fA.charAt(fw + fy.length + 1) == "[") {
          fz = "T";
          fA = fu.replaceFirstChar(fA, fw, "[", "{");
          fA = fu.replaceFirstChar(fA, fw, "]", "}")
        }
      } else {
        if (fA.charAt(fw + fy.length + 1) == "{") {
          fz = "T"
        }
      }
      if (fx) {
        fA = fA.substring(0, fw) + "{" + cS + fB + fz + "}{" + fA.substring(fw + 1 + fy.length, fA.length);
        fw = fw + cS.length + fB.length + 4
      } else {
        fA = fA.substring(0, fw) + "}" + fA.substring(fw + 1 + fy.length, fA.length);
        fw = fw + 1
      }
    } while (true);
    return fA
  };
  bs.searchMatrix = function (fz) {
    var fy = fz.getChildren();
    for (var fC = 0; fC < fy.size(); fC++) {
      var fx = fy.get(fC);
      if (fx instanceof el && fC < (fy.size() - 1)) {
        var fI = fx.getText();
        if (fI != null && fI.indexOf(cS) == 0) {
          var fH = fI.substring(cS.length, fI.length);
          var fJ = false;
          var fF = fH.substring(0, fH.length - 1);
          var fB = fH.substring(fF.length, fH.length);
          if ("T" == fB) {
            fJ = true
          }
          var fG = new eH(fF);
          var fE = fy.get(fC + 1);
          var fD = fE.getChildren();
          for (var fA = 0; fA < fD.size(); fA++) {
            var fw = fD.get(fA);
            if (fJ && fA == 0) {
              fG.setParams(fw.getText())
            } else {
              fG.getChildren().add(fw)
            }
          }
          fy.remove(fC);
          fy.remove(fC);
          fy.addTo(fC, fG);
          fC--
        }
      }
    }
    fy = fz.getChildren();
    for (var fC = 0; fC < fy.size(); fC++) {
      var fx = fy.get(fC);
      bs.searchMatrix(fx)
    }
  };
  function t() {
  }
  
  t.searchOperators = function (fx) {
    var fw = e8.getAllOperators();
    t.searchRecursiveOperators(fx, fw.split(";"))
  };
  t.searchRecursiveOperators = function (fy, fA) {
    var fx = fy.getChildren();
    for (var fB = 0; fB < fx.size(); fB++) {
      var fw = fx.get(fB);
      if (fw instanceof M) {
        continue
      }
      if (fw instanceof c6) {
        continue
      }
      if (fw.getType() != null) {
        continue
      }
      if (fw.getText() != null) {
        var fJ = fw.getText();
        if (fJ.indexOf("\\latex") == 0) {
          continue
        }
        for (var fz = 0; fz < fA.length; fz++) {
          var fD = fA[fz];
          if (fD.length == 0) {
            continue
          }
          var fE = fJ.indexOf(fD);
          if (fE > -1) {
            var fI = new el("block");
            fI.setText(fJ.substring(0, fE));
            var fG = new M(fD);
            var fF = new el("block");
            fF.setText(fJ.substring(fE + fD.length, fJ.length));
            var fC = true;
            if (fw instanceof el) {
              var fH = fw;
              fC = !fH.isDefinedByUser()
            }
            if (fw.getStyleAttributes().length > 0) {
              fC = false
            }
            if (!fC) {
              fw.setText(null);
              if (fI.getText().length > 0) {
                fw.getChildren().add(fI)
              }
              fw.getChildren().add(fG);
              if (fF.getText().length > 0) {
                fw.getChildren().add(fF)
              }
              fB--
            } else {
              fw.setText(fI.getText());
              fx.addTo(fB + 1, fG);
              if (fF.getText().length > 0) {
                fx.addTo(fB + 2, fF)
              }
              if (fI.getText().length == 0) {
                fx.remove(fB)
              }
              fB--
            }
            break
          }
        }
      }
    }
    for (var fB = 0; fB < fx.size(); fB++) {
      var fw = fx.get(fB);
      t.searchRecursiveOperators(fw, fA)
    }
  };
  function cA() {
  }
  
  cA.insertParanthesisInMathMode = function (fB, fA, fx) {
    var fz = fB.getChildren();
    for (var fy = 0; fy < fz.size(); fy++) {
      var fD = fz.get(fy);
      if (fD instanceof L) {
        var fC = fD.getText();
        for (var fw = 0; fw < fA.length; fw++) {
          if (fA[fw].length > 0) {
            fC = cA.insertParanthesisFor(fC, fA[fw], fx)
          }
        }
        fD.setText(fC)
      }
    }
  };
  cA.insertParanthesisFor = function (fB, fy, fx) {
    var fw = -1;
    do {
      fw = fB.indexOf("\\" + fy, fw);
      if (fw == -1) {
        break
      }
      var fA = fB.substring(0, fw);
      var fz = fB.substring(fw + 1 + fy.length, fB.length);
      fA = fu.trim(fA);
      fz = fu.trim(fz);
      fB = fA + "{" + fx + fy + "}" + fz;
      fw = fA.length + 2 + fx.length + fy.length
    } while (true);
    return fB
  };
  function bu() {
  }
  
  bu.getCodes = function () {
    return dY.split("|")
  };
  bu.getKeys = function () {
    return e1
  };
  bu.searchPhantom = function (fz) {
    var fy = fz.getChildren();
    for (var fx = 0; fx < fy.size(); fx++) {
      var fC = fy.get(fx);
      if (fC instanceof el && fx < (fy.size() - 1)) {
        var fB = fC.getText();
        if (fB != null && fB.indexOf(e1) == 0) {
          var fA = fy.get(fx + 1);
          var fw = new dC(fA);
          fy.remove(fx);
          fy.remove(fx);
          fy.addTo(fx, fw)
        }
      }
    }
    for (var fx = 0; fx < fy.size(); fx++) {
      var fC = fy.get(fx);
      bu.searchPhantom(fC)
    }
  };
  function dE() {
  }
  
  dE.getCodes = function () {
    return ev.split("|")
  };
  dE.getKeys = function () {
    return C
  };
  dE.searchRoot = function (fA) {
    var fy = fA.getChildren();
    for (var fB = 0; fB < fy.size(); fB++) {
      var fx = fy.get(fB);
      if (fx instanceof el && fB < (fy.size() - 1)) {
        var fD = fx.getText();
        if (fD != null && fD.indexOf(C) == 0) {
          var fC = null;
          var fw = fy.get(fB + 1);
          if (fB < (fy.size() - 2)) {
            var fE = fw.getText();
            if (fE != null && fE.indexOf("[") == 0 && fE.indexOf("]") == (fE.length - 1)) {
              fC = fE.substring(1, fE.length - 1);
              fw = fy.get(fB + 2);
              fy.remove(fB)
            }
          }
          var fz = new cm(fw, fC);
          fy.remove(fB);
          fy.remove(fB);
          fy.addTo(fB, fz)
        }
      }
    }
    for (var fB = 0; fB < fy.size(); fB++) {
      var fx = fy.get(fB);
      dE.searchRoot(fx)
    }
  };
  function R() {
  }
  
  R.getCodes = function () {
    return ef.split("|")
  };
  R.getKeys = function () {
    return bS
  };
  R.searchSpaces = function (fB) {
    var fx = fB.getChildren();
    for (var fw = 0; fw < fx.size(); fw++) {
      var fD = fx.get(fw);
      if (fD instanceof el) {
        var fC = fD.getText();
        if (fC != null && fC.indexOf(bS) == 0) {
          var fA = fC.substring(bS.length, fC.length);
          var fz = R.getWidthForType(fA);
          var fy = R.getSpaceNode(fz);
          fx.remove(fw);
          fx.addTo(fw, fy)
        }
      }
      R.searchSpaces(fD)
    }
  };
  R.getSpaceNode = function (fw) {
    var fx = false;
    if ("newline" == fw) {
      fx = true
    }
    return new bq(fw, fx)
  };
  R.getWidthForType = function (fz) {
    var fx = ef.split("|");
    var fw = dO.split("|");
    for (var fy = 0; fy < fx.length; fy++) {
      if (fz == fx[fy]) {
        return fw[fy]
      }
    }
    return "1em"
  };
  R.insertSpaceNodesOnlyInTextMode = function (fE) {
    var fH = ef.split("|");
    var fF = ef.split("|");
    var fy = fE.getChildren();
    for (var fC = 0; fC < fy.size(); fC++) {
      var fx = fy.get(fC);
      if (fx instanceof c6) {
        var fG = fx.getText();
        for (var fA = 0; fA < fH.length; fA++) {
          if (fH[fA].length > 0) {
            if (fG.indexOf("\\" + fH[fA]) > -1) {
              var fD = fG.indexOf("\\" + fH[fA]);
              fx.setText(fG.substring(0, fD));
              var fB = R.getSpaceNode(fF[fA]);
              fy.addTo(fC + 1, fB);
              var fw = fG.substring(fD + 1 + fH[fA].length, fG.length);
              if ((fu.trim(fw)).length > 0) {
                var fz = new c6();
                fz.setText(fw);
                fy.addTo(fC + 2, fz)
              }
            }
          }
        }
      }
    }
  };
  function aR() {
  }
  
  aR.getCodes = function () {
    return eX.split("|")
  };
  aR.getKeys = function () {
    return er
  };
  aR.insertParanthesisInMathMode = function (fy) {
    var fx = fy.getChildren();
    for (var fw = 0; fw < fx.size(); fw++) {
      var fA = fx.get(fw);
      if (fA instanceof L) {
        var fz = fA.getText();
        fz = aR.insertParanthesisFor(fz, "_");
        fz = aR.insertParanthesisFor(fz, "^");
        fA.setText(fz)
      }
    }
  };
  aR.insertParanthesisFor = function (fC, fz) {
    var fw = -1;
    do {
      fw = fC.indexOf(fz, fw);
      if (fw == -1) {
        break
      }
      var fB = fC.substring(0, fw);
      var fA = fC.substring(fw + 1, fC.length);
      fB = fu.trim(fB);
      fA = fu.trim(fA);
      fC = fB + fz + fA;
      fw = fB.length;
      if (fw > 0) {
        var fy = fC.charAt(fw - 1);
        if (fy != "}") {
          fC = fC.substring(0, fw - 1) + "{" + fy + "}" + fC.substring(fw, fC.length);
          fw = fw + 2
        }
      }
      if (fw < (fC.length - 1)) {
        var fx = fC.charAt(fw + 1);
        if (fx != "{") {
          fC = fC.substring(0, fw + 1) + "{" + fx + "}" + fC.substring(fw + 2, fC.length)
        }
      }
      fw = fw + fz.length
    } while (true);
    return fC
  };
  aR.findAllMultiNode = function (fz) {
    var fy = fz.getChildren();
    for (var fA = 0; fA < fy.size(); fA++) {
      var fx = fy.get(fA);
      if (fA > 0 && fA < (fy.size() - 1)) {
        if (fx instanceof el) {
          var fD = fx.getText();
          if (fD != null) {
            if ("_" == fD || "^" == fD) {
              var fC = fy.get(fA - 1);
              var fE = fy.get(fA + 1);
              fy.remove(fA + 1);
              fy.remove(fA);
              var fB = null;
              if (fC instanceof da) {
                fB = fC
              } else {
                var fw = null;
                if (fC.getText() != null) {
                  if (fC.getText().indexOf(er) == 0 && fA > 1) {
                    fw = fC.getText();
                    fw = fw.substring(er.length, fw.length);
                    fC = fy.get(fA - 2)
                  }
                }
                fB = new da(fC);
                fB.setLimitsValue(fw);
                fy.remove(fA - 1);
                fy.addTo(fA - 1, fB);
                if (fw != null) {
                  fy.remove(fA - 2)
                }
              }
              if ("_" == fD) {
                fB.addSubBlocks(fE)
              } else {
                fB.addSupBlocks(fE)
              }
              fA = fA - 2
            }
          }
        }
      }
      aR.findAllMultiNode(fx)
    }
  };
  aR.findPrescript = function (fz) {
    var fy = fz.getChildren();
    for (var fB = 0; fB < fy.size(); fB++) {
      var fx = fy.get(fB);
      if (fB < (fy.size() - 3)) {
        if (fx instanceof el) {
          var fF = fx.getText();
          if (fF != null) {
            if (fF == er + "prescript") {
              var fA = fy.get(fB + 1);
              var fw = fy.get(fB + 2);
              var fD = fy.get(fB + 3);
              var fE = null;
              if (fD instanceof da) {
                fE = fD
              } else {
                fE = new da(fD);
                fy.remove(fB + 3);
                fy.addTo(fB + 3, fE)
              }
              fy.remove(fB + 2);
              fy.remove(fB + 1);
              fy.remove(fB);
              fE.addPreSubBlocks(fw);
              fE.addPreSupBlocks(fA);
              fB = fB - 1
            } else {
              if (fF == er + "bar") {
                var fD = fy.get(fB + 1);
                var fE = new da(fD);
                fE.setLimitsValue("limits");
                fy.remove(fB + 1);
                fy.addTo(fB + 1, fE);
                fy.remove(fB);
                var fC = new M(bB.changeCharForCode("&oline;"));
                fE.addSupBlocks(fC);
                fB = fB - 1
              }
            }
          }
        }
      }
      aR.findPrescript(fx)
    }
  };
  function d1() {
  }
  
  d1.getCodes = function () {
    return fl.split("|")
  };
  d1.getKeys = function () {
    return cb
  };
  d1.searchTextMode = function (fy) {
    var fx = fy.getChildren();
    for (var fw = 0; fw < fx.size(); fw++) {
      var fD = fx.get(fw);
      if (fD instanceof el) {
        var fC = fD.getText();
        if (fC != null && fC.indexOf(cb) == 0) {
          if ((fw + 1) < fx.size()) {
            var fA = fC.substring(cb.length, fC.length);
            var fz = fx.get(fw + 1);
            var fB = d1.getTextMode(fA);
            fB.setText(fz.getText());
            fx.remove(fw);
            fx.remove(fw);
            fx.addTo(fw, fB);
            fw--
          }
        }
      }
      d1.searchTextMode(fD)
    }
  };
  d1.getTextMode = function (fx) {
    var fw = new c6();
    if ("textnormal" == fx || "textrm" == fx) {
      fw.getStyle().setFont("normal")
    } else {
      if ("textit" == fx) {
        fw.getStyle().setFont("italic")
      } else {
        if ("textbf" == fx || "emph" == fx) {
          fw.getStyle().setFont("bold")
        } else {
          if ("textbi" == fx) {
            fw.getStyle().setFont("bold-italic")
          } else {
            if ("textsf" == fx) {
              fw.getStyle().setFont("sans-serif")
            } else {
              if ("textsfb" == fx) {
                fw.getStyle().setFont("bold-sans-serif")
              } else {
                if ("textsfi" == fx) {
                  fw.getStyle().setFont("sans-serif-italic")
                } else {
                  if ("textsfbi" == fx) {
                    fw.getStyle().setFont("sans-serif-bold-italic")
                  } else {
                    if ("texttt" == fx) {
                      fw.getStyle().setFont("monospace")
                    } else {
                      if ("textfrak" == fx) {
                        fw.getStyle().setFont("fraktur")
                      } else {
                        if ("textfrakb" == fx) {
                          fw.getStyle().setFont("bold-fraktur")
                        } else {
                          if ("textcal" == fx) {
                            fw.getStyle().setFont("script")
                          } else {
                            if ("textcalb" == fx) {
                              fw.getStyle().setFont("bold-script")
                            } else {
                              if ("textbb" == fx) {
                                fw.getStyle().setFont("double-struck")
                              } else {
                                if ("textbbb" == fx) {
                                  fw.getStyle().setFont("bold-double-struck")
                                } else {
                                  if ("textbbi" == fx) {
                                    fw.getStyle().setFont("double-struck-italic")
                                  } else {
                                    if ("textbbbi" == fx) {
                                      fw.getStyle().setFont("double-struck-bold-italic")
                                    } else {
                                      if ("textscr" == fx) {
                                        fw.getStyle().setFont("script")
                                      } else {
                                        if ("textscrb" == fx) {
                                          fw.getStyle().setFont("bold-script")
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return fw
  };
  function dx(fw) {
    this.name;
    this.type;
    this.definedByUser = false;
    this.style = new bQ();
    this.text;
    this.children = new aT();
    this.name = fw
  }
  
  dx.prototype.isDefinedByUser = function () {
    return this.definedByUser
  };
  dx.prototype.setDefinedByUser = function (fw) {
    this.definedByUser = fw
  };
  dx.prototype.processDocumentInfo = function () {
  };
  dx.prototype.setName = function (fw) {
    this.name = fw
  };
  dx.prototype.getName = function () {
    return this.name
  };
  dx.prototype.getText = function () {
    return this.text
  };
  dx.prototype.setText = function (fw) {
    this.text = fw
  };
  dx.prototype.getChildren = function () {
    return this.children
  };
  dx.prototype.setChildren = function (fw) {
    this.children = fw
  };
  dx.prototype.getStyle = function () {
    return this.style
  };
  dx.prototype.setStyle = function (fw) {
    this.style = fw
  };
  dx.prototype.getType = function () {
    return this.type
  };
  dx.prototype.setType = function (fw) {
    this.type = fw
  };
  dx.prototype.copyAllFrom = function (fw) {
    this.text = fw.text;
    this.children = fw.getChildren();
    this.style.copyAllFrom(fw.getStyle())
  };
  dx.prototype.toString = function () {
    return this.toMathMLString(0)
  };
  dx.prototype.changeToMathMLSymbole = function () {
    this.text = bU.convToMathML(this.text);
    for (var fw = 0; fw < this.children.size(); fw++) {
      var fx = this.children.get(fw);
      fx.changeToMathMLSymbole()
    }
  };
  dx.prototype.toMathMLString = function (fw) {
    var fx = new cE("");
    fx.append(this.getSpace(fw) + "<" + this.name + this.getStyleAttributes() + ">\n");
    this.toMathMLTextChildren(fx, fw);
    fx.append(this.getSpace(fw) + "</" + this.name + ">\n");
    return fx.toString()
  };
  dx.prototype.getStyleAttributes = function () {
    var fw = new cE("");
    if (this.style.getFont() != null) {
      fw.append(" mathvariant='" + this.style.getFont() + "'")
    }
    if (this.style.getFontSize() > -1) {
      fw.append(" mathsize='" + this.style.getFontSize() + "'")
    }
    if (this.style.getColor() != null) {
      fw.append(" mathcolor='" + this.style.getColor() + "'")
    }
    return fw.toString()
  };
  dx.prototype.toMathMLTextChildren = function (fx, fw) {
    if (this.getText() == null) {
      this.getMathMLChildren(fx, fw)
    } else {
      this.getMathMLText(fx, fw)
    }
  };
  dx.prototype.getMathMLText = function (fx, fw) {
    fx.append(this.getSpace(fw + 1) + this.text + "\n")
  };
  dx.prototype.getMathMLChildren = function (fz, fx) {
    for (var fw = 0; fw < this.children.size(); fw++) {
      var fy = this.children.get(fw);
      fz.append(fy.toMathMLString(fx + 1))
    }
  };
  dx.prototype.getSpace = function (fx) {
    var fy = new cE("");
    for (var fw = 0; fw < fx; fw++) {
      fy.append("    ")
    }
    return fy.toString()
  };
  dx.prototype.doOptimization = function () {
    this.doChildrenOptimization()
  };
  dx.prototype.doChildrenOptimization = function () {
    for (var fw = 0; fw < this.children.size(); fw++) {
      var fx = this.children.get(fw);
      fx.doOptimization()
    }
  };
  dx.prototype.optimizationStyle = function (fB) {
    for (var fz = 0; fz < this.children.size(); fz++) {
      var fA = this.children.get(fz);
      var fy = fB.createCopy();
      var fw = fy.getFont();
      var fx = fA.getStyle().getFont();
      if (fx != null) {
        if (fx == fw) {
          fA.getStyle().setFont(null)
        } else {
          fy.setFont(fx)
        }
      }
      fA.optimizationStyle(fy)
    }
  };
  function el(fw) {
    this.p = dx;
    this.p(fw)
  }
  
  FMath_extend(el, dx);
  el.prototype.toMathMLString = function (fx) {
    var fy = new cE("");
    if (this.getText() == null && this.getChildren().size() > 0) {
      fy.append(this.getSpace(fx) + "<mrow" + this.getStyleAttributes() + ">\n");
      this.getMathMLChildren(fy, fx);
      fy.append(this.getSpace(fx) + "</mrow>\n")
    } else {
      var fw = this.format(this.getText());
      if (ej.stringIsNumber(fw)) {
        fy.append(this.getSpace(fx) + "<mn" + this.getStyleAttributes() + ">");
        fy.append(fw);
        fy.append("</mn>\n")
      } else {
        if (fw.length == 1) {
          fy.append(this.getSpace(fx) + "<mi" + this.getStyleAttributes() + ">");
          fy.append(fw);
          fy.append("</mi>\n")
        } else {
          fy.append(this.getSpace(fx) + "<mtext" + this.getStyleAttributes() + ">");
          fy.append(fw);
          fy.append("</mtext>\n")
        }
      }
    }
    return fy.toString()
  };
  el.prototype.format = function (fw) {
    if (fw == null) {
      return ""
    }
    return fw
  };
  function b0(fw) {
    this.documentClass = "\\documentclass";
    this.beginDocument = "\\begin{document}";
    this.endDocument = "\\end{document}";
    this.labed = false;
    this.latexLabelStyle;
    this.textsizeValue = null;
    this.q = el;
    this.q("document");
    this.setText(fw);
    this.latexLabelStyle = new eZ()
  }
  
  FMath_extend(b0, el);
  b0.prototype.processDocumentInfo = function () {
    var fz = this.getText();
    fz = fu.trim(fz);
    var fA = fz.indexOf(this.documentClass);
    var fy = fz.indexOf(this.beginDocument);
    var fx = fz.lastIndexOf(this.endDocument);
    if (fA > -1) {
      if (fy == -1) {
        throw new RuntimeException("No \\begin{document} for \\documentclass")
      }
      if (fx == -1) {
        throw new RuntimeException("No \\end{document} for \\documentclass")
      }
      this.textsizeValue = this.getTextSize(fz.substring(fA + this.documentClass.length, fy));
      fz = fz.substring(fy + this.beginDocument.length, fx)
    } else {
      if (fy > -1) {
        if (fx == -1) {
          throw new RuntimeException("No \\end{document} for \\begin{document}")
        }
        fz = fz.substring(fy + this.beginDocument.length, fx)
      }
    }
    fz = fu.trim(fz);
    fz = fu.replace(fz, "\n\n", "\\newline");
    fz = fu.replace(fz, "\r\r", "\\newline");
    fz = fu.replace(fz, "\n\r\n\r", "\\newline");
    fz = fu.replace(fz, "\r\n\r\n", "\\newline");
    fz = fu.replace(fz, "\\\\", "\\newline");
    fz = fu.replace(fz, "\n", " ");
    fz = fu.replace(fz, "\t", " ");
    fz = fu.replace(fz, "  ", " ");
    var fw = new c6();
    fw.setText(fz);
    this.getChildren().add(fw);
    this.setText(null)
  };
  b0.prototype.getTextSize = function (fx) {
    if (fx.indexOf("[") == 0) {
      var fy = fx.indexOf("[");
      var fw = fx.indexOf("]");
      if (fw > -1) {
        return fx.substring(fy + 1, fw)
      }
    }
    return null
  };
  b0.prototype.doOptimization = function () {
    this.oneChildOptimization();
    this.labeledVerificationAndUpdate();
    this.doChildrenOptimization()
  };
  b0.prototype.labeledVerificationAndUpdate = function () {
    var fx = this.getChildren();
    for (var fw = 0; fw < fx.size(); fw++) {
      var fz = fx.get(fw);
      if (fz instanceof L) {
        var fy = fz;
        if (fy.isLabeled()) {
          this.labed = true;
          fy.setLabel(this.latexLabelStyle.getNextLabel())
        }
      }
    }
  };
  b0.prototype.oneChildOptimization = function () {
    var fw = this.getChildren();
    if (fw.size() == 1) {
      var fy = fw.get(0);
      if (fy instanceof L) {
        var fx = fy;
        if (!fx.isLabeled()) {
          this.copyAllFrom(fy);
          fw.remove(0)
        }
      }
    }
  };
  b0.prototype.getStyleAttributes = function () {
    var fx = new cE("");
    var fw = dx.prototype.getStyleAttributes.call(this);
    fx.append(fw);
    if (this.getStyle().getInline() != null) {
      fx.append(" display='inline'")
    }
    fx.append(this.getTextSizeValue());
    return fx.toString()
  };
  b0.prototype.getTextSizeValue = function () {
    if (this.textsizeValue != null) {
      return " mathsize='" + this.textsizeValue + "'"
    }
    return ""
  };
  b0.prototype.toMathMLString = function (fy) {
    var fB = new cE("");
    fB.append(this.getSpace(fy) + "<math" + this.getStyleAttributes() + ">\n");
    if (this.labed) {
      fB.append(this.getSpace(fy + 1) + "<mtable columnalign='left'>\n");
      var fz = new aT();
      var fx = this.getChildren();
      for (var fw = 0; fw < fx.size(); fw++) {
        var fA = fx.get(fw);
        this.addRowTable(fB, fy, fA, fz)
      }
      this.createRowTable(fB, fy, fz);
      fB.append(this.getSpace(fy + 1) + "</mtable>\n")
    } else {
      this.toMathMLTextChildren(fB, fy)
    }
    fB.append(this.getSpace(fy) + "</math>\n");
    return fB.toString()
  };
  b0.prototype.addRowTable = function (fA, fw, fy, fx) {
    if (fy instanceof L) {
      var fz = fy;
      if (fz.isLabeled()) {
        this.createRowTable(fA, fw, fx);
        fx.clear();
        this.createLabeledRowTable(fA, fw, fz)
      } else {
        fx.add(fy)
      }
    } else {
      fx.add(fy)
    }
  };
  b0.prototype.createLabeledRowTable = function (fy, fw, fx) {
    fy.append(this.getSpace(fw + 2) + "<mlabeledtr>\n");
    fy.append(this.getSpace(fw + 3) + "<mtd>\n");
    fy.append(this.getSpace(fw + 4) + fx.getLabel() + "\n");
    fy.append(this.getSpace(fw + 3) + "</mtd>\n");
    fy.append(this.getSpace(fw + 3) + "<mtd>\n");
    fy.append(fx.toMathMLString(fw + 4));
    fy.append(this.getSpace(fw + 3) + "</mtd>\n");
    fy.append(this.getSpace(fw + 2) + "</mlabeledtr>\n")
  };
  b0.prototype.createRowTable = function (fA, fx, fy) {
    if (fy.size() > 0) {
      fA.append(this.getSpace(fx + 2) + "<mtr>\n");
      fA.append(this.getSpace(fx + 3) + "<mtd>\n");
      for (var fw = 0; fw < fy.size(); fw++) {
        var fz = fy.get(fw);
        fA.append(fz.toMathMLString(fx + 4))
      }
      fA.append(this.getSpace(fx + 3) + "</mtd>\n");
      fA.append(this.getSpace(fx + 2) + "</mtr>\n")
    }
  };
  function aP(fw, fx) {
    this.openValue;
    this.closeValue;
    this.q = el;
    this.q("mfenced");
    this.openValue = fw;
    this.closeValue = fx
  }
  
  FMath_extend(aP, el);
  aP.prototype.changeToMathMLSymbole = function () {
    this.openValue = bU.convToMathML(this.openValue);
    this.closeValue = bU.convToMathML(this.closeValue);
    dx.prototype.changeToMathMLSymbole.call(this)
  };
  aP.prototype.toMathMLString = function (fw) {
    var fx = new cE("");
    fx.append(this.getSpace(fw) + "<mfenced" + this.getStyleAttributes() + this.getFences() + ">\n");
    if (this.getChildren().size() < 2) {
      this.getMathMLChildren(fx, fw)
    } else {
      fx.append(this.getSpace(fw + 1) + "<mrow>\n");
      this.getMathMLChildren(fx, fw + 1);
      fx.append(this.getSpace(fw + 1) + "</mrow>\n")
    }
    fx.append(this.getSpace(fw) + "</mfenced>\n");
    return fx.toString()
  };
  aP.prototype.getFences = function () {
    var fw = new cE("");
    fw.append(" open='" + this.openValue + "'");
    fw.append(" close='" + this.closeValue + "'");
    return fw.toString()
  };
  function a0(fw, fA, fx, fy, fz) {
    this.binom = false;
    this.attributes = "";
    this.q = el;
    this.q("mfrac");
    this.binom = fx;
    if (fy) {
      this.attributes = " bevelled='true'"
    }
    if (fz) {
      this.attributes = " mathsize='75%'"
    }
    this.getChildren().add(fw);
    this.getChildren().add(fA)
  }
  
  FMath_extend(a0, el);
  a0.prototype.toMathMLString = function (fy) {
    var fB = new cE("");
    if (this.binom) {
      fB.append(this.getSpace(fy) + "<mfenced>\n");
      fB.append(this.getSpace(fy + 1) + "<mtable>\n");
      fB.append(this.getSpace(fy + 2) + "<mtr>\n");
      fB.append(this.getSpace(fy + 3) + "<mtd>\n");
      var fx = this.getChildren().get(0);
      fB.append(fx.toMathMLString(fy + 4));
      fB.append(this.getSpace(fy + 3) + "</mtd>\n");
      fB.append(this.getSpace(fy + 2) + "</mtr>\n");
      fB.append(this.getSpace(fy + 2) + "<mtr>\n");
      fB.append(this.getSpace(fy + 3) + "<mtd>\n");
      var fw = this.getChildren().get(1);
      fB.append(fw.toMathMLString(fy + 4));
      fB.append(this.getSpace(fy + 3) + "</mtd>\n");
      fB.append(this.getSpace(fy + 2) + "</mtr>\n");
      fB.append(this.getSpace(fy + 1) + "</mtable>\n");
      fB.append(this.getSpace(fy) + "</mfenced>\n");
      return fB.toString()
    }
    fB.append(this.getSpace(fy) + "<mfrac" + this.attributes + this.getStyleAttributes() + ">\n");
    var fz = this.getChildren().get(0);
    fB.append(fz.toMathMLString(fy + 1));
    var fA = this.getChildren().get(1);
    fB.append(fA.toMathMLString(fy + 1));
    fB.append(this.getSpace(fy) + "</mfrac>\n");
    return fB.toString()
  };
  function am(fw) {
    this.q = el;
    this.q("mo");
    this.setText(fw);
    this.getStyle().setFont("normal")
  }
  
  FMath_extend(am, el);
  function cK(fw, fx) {
    this.type;
    this.q = el;
    this.q("func");
    this.type = fw;
    this.getChildren().add(fx)
  }
  
  FMath_extend(cK, el);
  cK.prototype.toMathMLString = function (fw) {
    var fy = new cE("");
    if ("bar" == this.type) {
      fy.append(this.getSpace(fw) + "<mover" + this.getStyleAttributes() + ">\n");
      var fx = this.getChildren().get(0);
      fy.append(fx.toMathMLString(fw + 1));
      fy.append(this.getSpace(fw + 1) + "<mo accent='true'>&oline;</mo>\n");
      fy.append(this.getSpace(fw) + "</mover>\n")
    }
    return fy.toString()
  };
  function L() {
    this.mathModeTabDistance = 80;
    this.labeled = false;
    this.label = "";
    this.q = el;
    this.q("mathmode");
    this.getStyle().setFont("italic")
  }
  
  FMath_extend(L, el);
  L.prototype.isLabeled = function () {
    return this.labeled
  };
  L.prototype.setLabeled = function (fw) {
    this.labeled = fw
  };
  L.prototype.getLabel = function () {
    return this.label
  };
  L.prototype.setLabel = function (fw) {
    this.label = fw
  };
  L.prototype.getStyleAttributes = function () {
    var fx = new cE("");
    var fw = dx.prototype.getStyleAttributes.call(this);
    fx.append(fw);
    if (this.getStyle().getInline() != null) {
      fx.append(" displaystyle='false'")
    }
    return fx.toString()
  };
  L.prototype.toMathMLString = function (fw) {
    var fx = new cE("");
    if (this.getStyle().getInline() == null) {
      if (!this.labeled) {
        fx.append(this.getSpace(fw) + "<mspace linebreak='newline'></mspace>\n")
      }
      fx.append(this.getSpace(fw) + "<mspace width='" + this.mathModeTabDistance + "'></mspace>\n")
    }
    fx.append(this.getSpace(fw) + "<mstyle" + this.getStyleAttributes() + ">\n");
    this.toMathMLTextChildren(fx, fw);
    fx.append(this.getSpace(fw) + "</mstyle>\n");
    if (this.getStyle().getInline() == null && !this.labeled) {
      fx.append(this.getSpace(fw) + "<mspace linebreak='newline'></mspace>\n")
    }
    return fx.toString()
  };
  function eH(fw) {
    this.type;
    this.parameters;
    this.allParameters;
    this.borderLeft = false;
    this.borderRight = false;
    this.q = el;
    this.q("matrix");
    this.type = fw
  }
  
  FMath_extend(eH, el);
  eH.prototype.setParams = function (fw) {
    this.allParameters = fw;
    if (this.allParameters != null) {
      if (this.allParameters.indexOf("|") == 0) {
        this.borderLeft = true;
        this.allParameters = this.allParameters.substring(1, this.allParameters.length)
      }
      if (this.allParameters.lastIndexOf("|") == (this.allParameters.length - 1)) {
        this.borderRight = true;
        this.allParameters = this.allParameters.substring(0, this.allParameters.length - 1)
      }
    }
    this.parameters = fu.replace(fw, "|", "")
  };
  eH.prototype.toMathMLString = function (fw) {
    var fx = new cE("");
    if (this.type.indexOf("matrix") == 0 || this.type.indexOf("pmatrix") == 0) {
      fx.append(this.getSpace(fw) + "<mfenced>\n");
      this.processTable(fx, this.getChildren(), fw + 1);
      fx.append(this.getSpace(fw) + "</mfenced>\n")
    } else {
      if ("smallmatrix" == this.type) {
        fx.append(this.getSpace(fw) + "<mfenced mathsize='50%'>\n");
        this.processTable(fx, this.getChildren(), fw + 1);
        fx.append(this.getSpace(fw) + "</mfenced>\n")
      } else {
        if (this.type.indexOf("bmatrix") == 0) {
          fx.append(this.getSpace(fw) + "<mfenced open='[' close=']'>\n");
          this.processTable(fx, this.getChildren(), fw + 1);
          fx.append(this.getSpace(fw) + "</mfenced>\n")
        } else {
          if (this.type.indexOf("Bmatrix") == 0) {
            fx.append(this.getSpace(fw) + "<mfenced open='{' close='}'>\n");
            this.processTable(fx, this.getChildren(), fw + 1);
            fx.append(this.getSpace(fw) + "</mfenced>\n")
          } else {
            if (this.type.indexOf("vmatrix") == 0) {
              fx.append(this.getSpace(fw) + "<mfenced open='|' close='|'>\n");
              this.processTable(fx, this.getChildren(), fw + 1);
              fx.append(this.getSpace(fw) + "</mfenced>\n")
            } else {
              if (this.type.indexOf("Vmatrix") == 0) {
                fx.append(this.getSpace(fw) + "<mfenced open='&Verbar;' close='&Verbar;'>\n");
                this.processTable(fx, this.getChildren(), fw + 1);
                fx.append(this.getSpace(fw) + "</mfenced>\n")
              } else {
                if (this.type.indexOf("cases") == 0) {
                  fx.append(this.getSpace(fw) + "<mfenced open='{' close=''>\n");
                  this.processTable(fx, this.getChildren(), fw + 1);
                  fx.append(this.getSpace(fw) + "</mfenced>\n")
                } else {
                  this.processTable(fx, this.getChildren(), fw)
                }
              }
            }
          }
        }
      }
    }
    return fx.toString()
  };
  eH.prototype.processTable = function (fB, fA, fy) {
    var fw = new aT();
    fB.append(this.getSpace(fy) + "<mtable" + this.getBorderSeparatorInfo() + ">\n");
    for (var fx = 0; fx < fA.size(); fx++) {
      var fz = fA.get(fx);
      if (fz instanceof bq) {
        this.processRow(fB, fw, fy + 1);
        fw.clear()
      } else {
        fw.add(fz)
      }
    }
    this.processRow(fB, fw, fy + 1);
    fB.append(this.getSpace(fy) + "</mtable>\n")
  };
  eH.prototype.processRow = function (fD, fB, fz) {
    if (fB.size() == 0) {
      return
    }
    var fx = new aT();
    fD.append(this.getSpace(fz) + "<mtr>\n");
    var fw = 0;
    for (var fy = 0; fy < fB.size(); fy++) {
      var fA = fB.get(fy);
      var fC = fA.getText();
      if (fA instanceof M && "&&" == fC) {
        this.processColumn(fD, fx, fz + 1, fw++);
        fx.clear();
        fD.append(this.getSpace(fz + 1) + "<mtd" + this.getColumnAlign(fw) + ">\n");
        fD.append(this.getSpace(fz + 1) + "</mtd>\n")
      } else {
        if (fA instanceof M && "&" == fC) {
          this.processColumn(fD, fx, fz + 1, fw++);
          fx.clear()
        } else {
          fx.add(fA)
        }
      }
    }
    this.processColumn(fD, fx, fz + 1, fw++);
    fD.append(this.getSpace(fz) + "</mtr>\n")
  };
  eH.prototype.processColumn = function (fB, fA, fy, fw) {
    fB.append(this.getSpace(fy) + "<mtd" + this.getColumnAlign(fw) + ">\n");
    for (var fx = 0; fx < fA.size(); fx++) {
      var fz = fA.get(fx);
      fB.append(fz.toMathMLString(fy + 1))
    }
    fB.append(this.getSpace(fy) + "</mtd>\n")
  };
  eH.prototype.getColumnAlign = function (fw) {
    var fx = this.getColumnAlignCode(fw);
    fx = fx.toLowerCase();
    if (fx.length == 0) {
      return ""
    }
    if ("l" == fx) {
      return " columnalign='left'"
    }
    if ("r" == fx) {
      return " columnalign='right'"
    }
    return ""
  };
  eH.prototype.getColumnAlignCode = function (fw) {
    if ("cases" == this.type) {
      return "l"
    }
    if (this.parameters == null || this.parameters.length == 0) {
      return ""
    }
    if (fw < this.parameters.length) {
      return this.parameters.charAt(fw) + ""
    }
    return this.parameters.charAt(this.parameters.length - 1) + ""
  };
  eH.prototype.getBorderSeparatorInfo = function () {
    var fw = "";
    if (this.allParameters != null) {
      if (this.borderLeft) {
        fw = "border-left:0.08em"
      }
      if (this.borderRight) {
        if (fw.length > 0) {
          fw = fw + ";border-right:0.08em"
        } else {
          fw = "border-right:0.08em"
        }
      }
      if (fw.length > 0) {
        fw = " style='" + fw + "'"
      }
      if (this.allParameters.indexOf("|") > -1) {
        var fy = "";
        var fx = false;
        for (var fz = 0; fz < this.allParameters.length; fz++) {
          var fA = this.allParameters.charAt(fz);
          if (fA == "|") {
            fy = fy + "solid ";
            fx = false
          } else {
            if (fx) {
              fy = fy + "none "
            } else {
              fx = true
            }
          }
        }
        fy = fu.trim(fy);
        if (fy.length > 0) {
          fw = fw + " columnlines='" + fy + "'"
        }
      }
    }
    return fw
  };
  function M(fw) {
    this.q = el;
    this.q("mo");
    this.setText(fw)
  }
  
  FMath_extend(M, el);
  M.prototype.toMathMLString = function (fw) {
    var fy = new cE("");
    var fx = "";
    if (e8.isVStretchy(this.getText())) {
      fx = " maxsize='1'"
    }
    fy.append(this.getSpace(fw) + "<mo" + fx + this.getStyleAttributes() + ">" + this.getText() + "</mo>\n");
    return fy.toString()
  };
  function dC(fw) {
    this.q = el;
    this.q("mphantom");
    this.getChildren().add(fw)
  }
  
  FMath_extend(dC, el);
  dC.prototype.doOptimization = function () {
    this.oneChildOptimization()
  };
  dC.prototype.oneChildOptimization = function () {
    var fw = this.getChildren();
    if (fw.size() == 1) {
      var fx = fw.get(0);
      if (fx instanceof el && fx.getText() == null) {
        this.copyAllFrom(fx);
        fw.remove(0)
      }
    }
  };
  dC.prototype.toMathMLString = function (fw) {
    var fx = new cE("");
    fx.append(this.getSpace(fw) + "<mphantom" + this.getStyleAttributes() + ">\n");
    this.toMathMLTextChildren(fx, fw);
    fx.append(this.getSpace(fw) + "</mphantom>\n");
    return fx.toString()
  };
  function cm(fy, fx) {
    this.ismroot = false;
    this.q = el;
    this.q("mroot");
    this.getChildren().add(fy);
    if (fx != null) {
      var fw = new el("block");
      fw.setText(fx);
      this.getChildren().add(fw);
      this.ismroot = true
    }
  }
  
  FMath_extend(cm, el);
  cm.prototype.doOptimization = function () {
    this.oneChildOptimization()
  };
  cm.prototype.oneChildOptimization = function () {
    var fw = this.getChildren();
    if (fw.size() == 1) {
      var fx = fw.get(0);
      if (fx instanceof el && fx.getText() == null) {
        this.copyAllFrom(fx);
        fw.remove(0)
      }
    }
  };
  cm.prototype.toMathMLString = function (fy) {
    var fA = new cE("");
    var fx = this.getChildren();
    if (this.ismroot) {
      fA.append(this.getSpace(fy) + "<mroot" + this.getStyleAttributes() + ">\n");
      var fw = fx.get(0);
      fA.append(fw.toMathMLString(fy + 1));
      var fz = fx.get(1);
      fA.append(fz.toMathMLString(fy + 1));
      fA.append(this.getSpace(fy) + "</mroot>\n")
    } else {
      fA.append(this.getSpace(fy) + "<msqrt" + this.getStyleAttributes() + ">\n");
      this.toMathMLTextChildren(fA, fy);
      fA.append(this.getSpace(fy) + "</msqrt>\n")
    }
    return fA.toString()
  };
  function bq(fx, fw) {
    this.widthValue;
    this.lineBreakValue = false;
    this.q = el;
    this.q("mspace");
    this.widthValue = fx;
    this.lineBreakValue = fw
  }
  
  FMath_extend(bq, el);
  bq.prototype.getWidth = function () {
    return this.widthValue
  };
  bq.prototype.setWidth = function (fw) {
    this.widthValue = fw
  };
  bq.prototype.isLineBreak = function () {
    return this.lineBreakValue
  };
  bq.prototype.setLineBreak = function (fw) {
    this.lineBreakValue = fw
  };
  bq.prototype.toMathMLString = function (fw) {
    if (this.lineBreakValue) {
      return this.getSpace(fw) + "<mspace linebreak='newline'" + this.getStyleAttributes() + "></mspace>\n"
    }
    return this.getSpace(fw) + "<mspace" + this.getStyleAttributes() + " width='" + this.widthValue + "'></mspace>\n"
  };
  function aQ(fw) {
    this.q = el;
    this.q(fw)
  }
  
  FMath_extend(aQ, el);
  function da(fw) {
    this.limitsValue;
    this.preSupBlocks = new aT();
    this.preSubBlocks = new aT();
    this.supBlocks = new aT();
    this.subBlocks = new aT();
    this.flagAdded = "";
    this.q = el;
    this.q("multi");
    this.getChildren().add(fw)
  }
  
  FMath_extend(da, el);
  da.prototype.addSupBlocks = function (fw) {
    if ("Sup" == this.flagAdded) {
      this.subBlocks.add("-1")
    }
    this.supBlocks.add(this.getChildren().size() + "");
    this.getChildren().add(fw);
    this.flagAdded = "Sup"
  };
  da.prototype.addSubBlocks = function (fw) {
    if ("Sub" == this.flagAdded) {
      this.supBlocks.add("-1")
    }
    this.subBlocks.add(this.getChildren().size() + "");
    this.getChildren().add(fw);
    this.flagAdded = "Sub"
  };
  da.prototype.addPreSupBlocks = function (fw) {
    this.preSupBlocks.add(this.getChildren().size() + "");
    this.getChildren().add(fw)
  };
  da.prototype.addPreSubBlocks = function (fw) {
    this.preSubBlocks.add(this.getChildren().size() + "");
    this.getChildren().add(fw)
  };
  da.prototype.getLimitsValue = function () {
    return this.limitsValue
  };
  da.prototype.setLimitsValue = function (fw) {
    this.limitsValue = fw
  };
  da.prototype.toMathMLString = function (fx) {
    var fB = new cE("");
    var fy = this.calculateType();
    if ("mmultiscript" == fy) {
      fB.append(this.getSpace(fx) + "<mmultiscripts" + this.getStyleAttributes() + ">\n");
      var fz = this.getChildren().get(0);
      fB.append(fz.toMathMLString(fx + 1));
      var fA = this.supBlocks.size();
      if (fA < this.subBlocks.size()) {
        fA = this.subBlocks.size()
      }
      for (var fw = 0; fw < fA; fw++) {
        if (fw < this.subBlocks.size()) {
          this.addChildString(this.subBlocks, fw, fB, fx + 1)
        } else {
          fB.append(this.getSpace(fx + 1) + "<none></none>\n")
        }
        if (fw < this.supBlocks.size()) {
          this.addChildString(this.supBlocks, fw, fB, fx + 1)
        } else {
          fB.append(this.getSpace(fx + 1) + "<none></none>\n")
        }
      }
      fA = this.preSupBlocks.size();
      if (fA < this.preSubBlocks.size()) {
        fA = this.preSubBlocks.size()
      }
      if (fA > 0) {
        fB.append(this.getSpace(fx + 1) + "<mprescripts></mprescripts>\n")
      }
      for (var fw = 0; fw < fA; fw++) {
        if (fw < this.preSubBlocks.size()) {
          this.addChildString(this.preSubBlocks, fw, fB, fx + 1)
        } else {
          fB.append(this.getSpace(fx + 1) + "<none></none>\n")
        }
        if (fw < this.preSupBlocks.size()) {
          this.addChildString(this.preSupBlocks, fw, fB, fx + 1)
        } else {
          fB.append(this.getSpace(fx + 1) + "<none></none>\n")
        }
      }
      fB.append(this.getSpace(fx) + "</mmultiscripts" + this.getStyleAttributes() + ">\n")
    } else {
      if ("msup" == fy || "mover" == fy) {
        fB.append(this.getSpace(fx) + "<" + fy + this.getStyleAttributes() + ">\n");
        var fz = this.getChildren().get(0);
        fB.append(fz.toMathMLString(fx + 1));
        this.addList(fB, this.supBlocks, fx + 1);
        fB.append(this.getSpace(fx) + "</" + fy + ">\n")
      } else {
        if ("msub" == fy || "munder" == fy) {
          fB.append(this.getSpace(fx) + "<" + fy + this.getStyleAttributes() + ">\n");
          var fz = this.getChildren().get(0);
          fB.append(fz.toMathMLString(fx + 1));
          this.addList(fB, this.subBlocks, fx + 1);
          fB.append(this.getSpace(fx) + "</" + fy + ">\n")
        } else {
          fB.append(this.getSpace(fx) + "<" + fy + this.getStyleAttributes() + ">\n");
          var fz = this.getChildren().get(0);
          fB.append(fz.toMathMLString(fx + 1));
          this.addList(fB, this.subBlocks, fx + 1);
          this.addList(fB, this.supBlocks, fx + 1);
          fB.append(this.getSpace(fx) + "</" + fy + ">\n")
        }
      }
    }
    return fB.toString()
  };
  da.prototype.addList = function (fz, fy, fx) {
    if (fy.size() == 1) {
      this.addChildString(fy, 0, fz, fx)
    } else {
      fz.append(this.getSpace(fx) + "<mrow>\n");
      for (var fw = 0; fw < fy.size(); fw++) {
        this.addChildString(fy, fw, fz, fx + 1)
      }
      fz.append(this.getSpace(fx) + "</mrow>\n")
    }
  };
  da.prototype.addChildString = function (fA, fy, fC, fx) {
    var fB = fA.get(fy);
    var fw = ej.getIntegerValue(fB, -1);
    if (fw < 0) {
      fC.append(this.getSpace(fx) + "<none></none>\n")
    } else {
      var fz = this.getChildren().get(fw);
      fC.append(fz.toMathMLString(fx))
    }
  };
  da.prototype.calculateType = function () {
    var fy = null;
    var fz = this.getTextBase();
    if (fz == null) {
      fz = ""
    }
    var fx = bB.changeCharForCode(fz);
    var fw = e8.getStyleForOperator(fx);
    if (this.preSupBlocks.size() > 0 || this.preSubBlocks.size() > 0 || this.supBlocks.size() > 1 || this.subBlocks.size() > 1) {
      return "mmultiscript"
    }
    if (this.supBlocks.size() == 0) {
      fy = this.verifyOperators(fw, "msub", "munder");
      if (fy != null) {
        return fy
      }
      if ("limits" == this.limitsValue || "lim" == fz || "inf" == fz || "sup" == fz) {
        return "munder"
      }
      return "msub"
    }
    if (this.subBlocks.size() == 0) {
      fy = this.verifyOperators(fw, "msup", "mover");
      if (fy != null) {
        return fy
      }
      if ("limits" == this.limitsValue) {
        return "mover"
      }
      return "msup"
    }
    fy = this.verifyOperators(fw, "msubsup", "munderover");
    if (fy == null) {
      fy = "msubsup"
    }
    return fy
  };
  da.prototype.verifyOperators = function (fy, fx, fw) {
    if (fy.isIntegral()) {
      if ("limits" == this.limitsValue) {
        return fw
      }
      return fx
    }
    if (fy.isLargeop()) {
      if ("nolimits" == this.limitsValue) {
        return fx
      }
      return fw
    }
    return null
  };
  da.prototype.getTextBase = function () {
    var fw = this.getChildren().get(0);
    return fw.getText()
  };
  function c6() {
    this.q = el;
    this.q("textmode")
  }
  
  FMath_extend(c6, el);
  c6.prototype.toMathMLString = function (fw) {
    var fx = new cE("");
    fx.append(this.getSpace(fw) + "<mtext" + this.getStyleAttributes() + ">");
    fx.append(this.format(this.getText()));
    fx.append("</mtext>\n");
    return fx.toString()
  };
  c6.prototype.format = function (fw) {
    if (fw == null) {
      return ""
    }
    if (fw.indexOf(" ") == 0) {
      fw = "&nbsp;" + fw.substring(1, fw.length)
    }
    if (fw.length > 0) {
      if (fw.lastIndexOf(" ") == (fw.length - 1)) {
        fw = fw.substring(0, fw.length - 1) + "&nbsp;"
      }
    }
    return fw
  };
  function eZ() {
    this.index = 1
  }
  
  eZ.prototype.getNextLabel = function () {
    var fw = "( " + this.index + " )";
    this.index = this.index + 1;
    return fw
  };
  function bQ() {
    this.inline;
    this.font;
    this.fontSize = -1;
    this.bold;
    this.italic;
    this.color;
    this.bgcolor
  }
  
  bQ.prototype.getFont = function () {
    return this.font
  };
  bQ.prototype.setFont = function (fw) {
    this.font = fw
  };
  bQ.prototype.getFontSize = function () {
    return this.fontSize
  };
  bQ.prototype.setFontSize = function (fw) {
    this.fontSize = fw
  };
  bQ.prototype.getBold = function () {
    return this.bold
  };
  bQ.prototype.setBold = function (fw) {
    this.bold = fw
  };
  bQ.prototype.getItalic = function () {
    return this.italic
  };
  bQ.prototype.setItalic = function (fw) {
    this.italic = fw
  };
  bQ.prototype.getColor = function () {
    return this.color
  };
  bQ.prototype.setColor = function (fw) {
    this.color = fw
  };
  bQ.prototype.getBgcolor = function () {
    return this.bgcolor
  };
  bQ.prototype.setBgcolor = function (fw) {
    this.bgcolor = fw
  };
  bQ.prototype.getInline = function () {
    return this.inline
  };
  bQ.prototype.setInline = function (fw) {
    this.inline = fw
  };
  bQ.prototype.createCopy = function () {
    var fw = new bQ();
    fw.setFont(this.font);
    fw.setFontSize(this.fontSize);
    fw.setBold(this.bold);
    fw.setItalic(this.italic);
    fw.setColor(this.color);
    fw.setBgcolor(this.bgcolor);
    fw.setInline(this.inline);
    return fw
  };
  bQ.prototype.copyAllFrom = function (fw) {
    if (this.font == null) {
      this.font = fw.getFont()
    }
    if (this.fontSize == -1) {
      this.fontSize = fw.getFontSize()
    }
    if (this.bold == null) {
      this.bold = fw.getBold()
    }
    if (this.italic == null) {
      this.italic = fw.getItalic()
    }
    if (this.color == null) {
      this.color = fw.getColor()
    }
    if (this.bgcolor == null) {
      this.bgcolor = fw.getBgcolor()
    }
    if (this.inline == null) {
      this.inline = fw.getInline()
    }
  };
  function bK() {
  }
  
  bK.prototype.processToLatex = function (fw, fx) {
    return ""
  };
  bK.prototype.processToOmml = function (fw, fy, fx) {
    return ""
  };
  bK.prototype.addTextAndColor = function (fw, fx) {
    if (fw.getAttribute("mathvariant") != null) {
      fx = fu.trim(fx);
      fx = "\\" + this.getTextType(fw.getAttribute("mathvariant")) + "{" + fx + "}"
    }
    if (fw.getAttribute("mathcolor") != null) {
      fx = fu.trim(fx);
      fx = "\\textcolor{" + this.getColorType(fw.getAttribute("mathcolor")) + "}{" + fx + "}"
    }
    return fx
  };
  bK.prototype.getColorType = function (fw) {
    fw = aw.getColorName(fw);
    fw = fw.toLowerCase();
    return fw
  };
  bK.prototype.getTextType = function (fw) {
    if ("italic" == fw) {
      return "mathit"
    }
    if ("script" == fw) {
      return "mathcal"
    }
    if ("double-struck" == fw) {
      return "mathbb"
    }
    if ("fraktur" == fw) {
      return "mathfrak"
    }
    if ("sans-serif" == fw) {
      return "mathsf"
    }
    return "mathnormal"
  };
  bK.prototype.addTabs = function (fy) {
    var fx = new cE("");
    for (var fw = 0; fw < fy; fw++) {
      fx.append("    ")
    }
    return fx.toString()
  };
  bK.prototype.displayText = function (fx, fz, fw) {
    fx = fu.xmlescape(fx);
    fx = fu.changeA0(fx);
    var fy = new cE("");
    fy.append(this.addTabs(fz) + "<" + fw.getNamespace() + "r>\n");
    fy.append(this.addTabs(fz + 1) + '<w:rPr><w:rFonts w:ascii="Cambria Math" w:hAnsi="Cambria Math"/></w:rPr>\n');
    fy.append(this.addTabs(fz + 1) + "<" + fw.getNamespace() + "t");
    if (fx.indexOf(" ") > -1) {
      fy.append(' xml:space="preserve"')
    }
    fy.append(">");
    fy.append(fx);
    fy.append("</" + fw.getNamespace() + "t>\n");
    fy.append(this.addTabs(fz) + "</" + fw.getNamespace() + "r>\n");
    fw.setParentMrow(false);
    return fy.toString()
  };
  bK.prototype.copyInfo = function (fx) {
    var fw = new U();
    fw.setNamespace(fx.getNamespace());
    fw.setNamespaceUrl(fx.getNamespaceUrl());
    return fw
  };
  bK.prototype.copyInfoRTag = function (fx) {
    var fw = this.copyInfo(fx);
    fw.setParentMrow(fx.isParentMrow());
    return fw
  };
  bK.prototype.copyInfoRTagAndRow = function (fx) {
    var fw = this.copyInfo(fx);
    fw.setParentMrow(true);
    return fw
  };
  function df() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(df, bK);
  function eq() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(eq, bK);
  eq.prototype.processToLatex = function (fK, fJ) {
    var fI = "";
    if (eq.isNotMathBean(fK) || eq.isOnlyItalic(fK)) {
      this.removeItalic(fK);
      fJ.setMathMode(true);
      var fF = eS.process(fK, fJ);
      fF = fu.trim(fF);
      fI = "\\[" + fF + "\\]"
    } else {
      if (eq.isInline(fK)) {
        this.removeItalic(fK);
        fJ.setMathMode(true);
        var fF = eS.process(fK, fJ);
        fF = fu.trim(fF);
        fI = eq.getOpen(fK) + fF + eq.getClose(fK)
      } else {
        if (this.islabelMode(fK)) {
          var fx = fK.getChildren();
          for (var fA = 0; fA < fx.size(); fA++) {
            var fL = fx.get(fA);
            var fC = fL.getChildren();
            if (fC.size() == 1) {
              var fw = fC.get(0);
              if (fw instanceof cW) {
                var fE = fw;
                var fD = fE.getChildren();
                for (var fB = 0; fB < fD.size(); fB++) {
                  var fG = fD.get(fB);
                  var fH = fG.getChildren();
                  for (var fz = 0; fz < fH.size(); fz++) {
                    var fy = fH.get(fz);
                    fI = fI + this.processMathModes(fy, fJ)
                  }
                }
              }
            }
          }
        } else {
          this.cleanupChildren(fK);
          fI = this.processMathModes(fK, fJ)
        }
      }
    }
    return fu.trim(fI)
  };
  eq.prototype.processMathModes = function (fE, fD) {
    var fC = "";
    var fx = fE.getChildren();
    for (var fz = 0; fz < fx.size(); fz++) {
      var fF = fx.get(fz);
      var fB = fF.getChildren();
      for (var fA = 0; fA < fB.size(); fA++) {
        var fw = fB.get(fA);
        if (fw instanceof au) {
          this.removeItalic(fw);
          var fG = fD.clone();
          fG.setMathMode(true);
          var fy = eS.process(fw, fG);
          fy = fu.trim(fy);
          fC = fC + eq.getOpen(fw) + fy + eq.getClose(fw)
        } else {
          var fG = fD.clone();
          fG.setMathMode(false);
          fC = fC + eS.process(fw, fG)
        }
      }
    }
    return fC
  };
  eq.prototype.islabelMode = function (fE) {
    if (fE instanceof fi) {
      var fx = fE.getChildren();
      for (var fy = 0; fy < fx.size(); fy++) {
        var fF = fx.get(fy);
        var fA = fF.getChildren();
        if (fA.size() == 1) {
          var fw = fA.get(0);
          if (fw instanceof cW) {
            var fC = fw;
            var fB = fC.getChildren();
            for (var fz = 0; fz < fB.size(); fz++) {
              var fD = fB.get(fz);
              if (fD instanceof a1) {
                return true
              }
            }
          }
        }
      }
    }
    return false
  };
  eq.prototype.cleanupChildren = function (fE) {
    var fw = fE.getChildren();
    for (var fy = 0; fy < (fw.size() - 1); fy++) {
      var fF = fw.get(fy);
      var fD = fF.getChildren();
      if (fD.size() == 3) {
        var fC = fD.get(0);
        var fB = fD.get(1);
        var fA = fD.get(2);
        var fx = fw.get(fy + 1);
        var fG = fx.getChildren();
        if (fG.size() > 0) {
          var fz = fG.get(0);
          if (fC instanceof j) {
            if (fB instanceof j) {
              if (fA instanceof au) {
                if (fz instanceof j) {
                  fD.remove(1);
                  fD.remove(0);
                  fG.remove(0)
                }
              }
            }
          }
        }
      }
    }
  };
  eq.prototype.removeItalic = function (fw) {
    var fx = fw.getStyle().getMathvariant();
    if (fx != null) {
      fw.getStyle().setItalic(false);
      fx = fw.getStyle().getMathvariant();
      if ("normal" == fx) {
        fw.getStyle().setMathvariant(null)
      }
      fw.setAttribute("mathvariant", fw.getStyle().getMathvariant())
    }
  };
  eq.isNotMathBean = function (fw) {
    if (fw instanceof fi) {
      return false
    }
    return true
  };
  eq.isOnlyItalic = function (fw) {
    if (eq.isItalic(fw)) {
      return !eq.isInline(fw)
    }
    return false
  };
  eq.isItalic = function (fw) {
    var fx = fw.getStyle().getMathvariant();
    if (fx != null) {
      if ("italic" == fx) {
        return true
      }
    }
    return false
  };
  eq.getOpen = function (fw) {
    if (eq.isLabeled(fw)) {
      return "\\begin{equation}"
    }
    if (eq.isInline(fw)) {
      return "$"
    }
    return "\\["
  };
  eq.getClose = function (fw) {
    if (eq.isLabeled(fw)) {
      return "\\end{equation}"
    }
    if (eq.isInline(fw)) {
      return "$"
    }
    return "\\]"
  };
  eq.isLabeled = function (fx) {
    var fy = fx.getParentBean();
    if (fy != null) {
      fy = fy.getParentBean();
      if (fy != null && fy instanceof bF) {
        var fw = fy.getParentBean();
        if (fw != null && fw instanceof a1) {
          return true
        }
      }
    }
    return false
  };
  eq.isInline = function (fw) {
    var fx = fw.getCurrentDefStyle().getDisplaystyle();
    if (fx != null) {
      if ("false" == fx || "inline" == fx) {
        return true
      }
    }
    return false
  };
  eq.prototype.processToOmml = function (fw, fy, fx) {
    return ""
  };
  function fb() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(fb, bK);
  fb.prototype.processToLatex = function (fw, fx) {
    var fy = eS.processChildren(fw, fx);
    return this.addTextAndColor(fw, fy)
  };
  fb.prototype.processToOmml = function (fy, fx, fw) {
    return aU.processChildren(fy, fx, fw)
  };
  function bO() {
    this.s = fb;
    this.s()
  }
  
  FMath_extend(bO, fb);
  function cD() {
    this.s = fb;
    this.s()
  }
  
  FMath_extend(cD, fb);
  cD.prototype.processToLatex = function (fB, fG) {
    var fE = fB;
    var fH = fE.getChildren();
    if (fH != null) {
      for (var fx = 0; fx < fH.size(); fx++) {
        var fI = fH.get(fx);
        var fw = fI.getChildren();
        if (fw != null) {
          var fF = fw.get(fw.size() - 1);
          if (fF.isDynamicCreated()) {
            fw.remove(fw.size() - 1)
          }
          var fy = fw.get(0);
          if (fy.isDynamicCreated()) {
            fw.remove(0)
          }
        }
      }
    }
    if (this.isBinom(fE)) {
      return "\\binom{" + this.getBinom(fE, 0, fG) + "}{" + this.getBinom(fE, 1, fG) + "}"
    }
    var fC = this.getMatrixType(fE);
    if (fC != null) {
      var fA = this.getTableBean(fE);
      var fz = bX.buildArrayContent(fA, fG);
      if (fC.indexOf("*") > -1) {
        return "\\begin{" + fC + "}[" + bX.computeAlignment(fA) + "]" + fz + "\\end{" + fC + "}"
      }
      return "\\begin{" + fC + "}" + fz + "\\end{" + fC + "}"
    }
    var fD = fb.prototype.processToLatex.call(this, fE, fG);
    fD = fu.trim(fD);
    return this.getCharFrom("\\left", fE.getOpen()) + " " + fD + " " + this.getCharFrom("\\right", fE.getClose())
  };
  cD.prototype.getBinom = function (fG, fC, fI) {
    var fJ = fG.getChildren();
    if (fJ != null && fJ.size() == 1) {
      var fK = fJ.get(0);
      var fw = fK.getChildren();
      if (fw != null && fw.size() == 1) {
        var fy = fw.get(0);
        if (fy instanceof cW) {
          var fH = fy;
          var fF = fH.getChildren();
          if (fF.size() == 2) {
            var fA = fF.get(fC);
            var fB = fA.getChildren();
            if (fB.size() == 1) {
              var fz = fB.get(0);
              return eS.process(fz, fI)
            }
          }
          if (fF.size() == 1) {
            var fD = fF.get(0);
            var fE = fD.getChildren();
            if (fE.size() == 2) {
              var fz = fE.get(fC);
              return eS.process(fz, fI)
            }
          }
        } else {
          if (fy instanceof ft) {
            var fx = fy;
            if (fC == 0) {
              return eS.process(fx.getNum(), fI)
            }
            if (fC == 1) {
              return eS.process(fx.getDenum(), fI)
            }
          }
        }
      }
    }
    return ""
  };
  cD.prototype.isBinom = function (fE) {
    var fG = fE.getChildren();
    if (fG != null && fG.size() == 1) {
      var fH = fG.get(0);
      var fw = fH.getChildren();
      if (fw != null && fw.size() == 1) {
        var fy = fw.get(0);
        if (fy instanceof cW) {
          var fF = fy;
          var fD = fF.getChildren();
          if (fD.size() == 2) {
            var fB = fD.get(0);
            var fz = fD.get(1);
            var fC = fB.getChildren();
            var fA = fz.getChildren();
            if (fC.size() == 1 && fA.size() == 1) {
              return true
            }
          }
        } else {
          if (fy instanceof ft) {
            var fx = fy;
            if ("0" == fx.getLinethickness()) {
              return true
            }
          }
        }
      }
    }
    return false
  };
  cD.prototype.getMatrixType = function (fz) {
    var fy = fz.getChildren();
    if (fy != null && fy.size() == 1) {
      var fx = fy.get(0);
      var fA = fx.getChildren();
      if (fA != null && fA.size() == 1) {
        var fD = fA.get(0);
        if (fD instanceof cW) {
          var fB = fD;
          if ("50%" == fz.getAttribute("mathsize")) {
            return "smallmatrix"
          }
          var fC = bX.computeAlignment(fB);
          if ("[" == fz.getOpen() && "]" == fz.getClose()) {
            if (fC.indexOf("l") > -1 || fC.indexOf("r") > -1) {
              return "bmatrix*"
            }
            return "bmatrix"
          }
          if ("{" == fz.getOpen() && "}" == fz.getClose()) {
            if (fC.indexOf("l") > -1 || fC.indexOf("r") > -1) {
              return "Bmatrix*"
            }
            return "Bmatrix"
          }
          if ("|" == fz.getOpen() && "|" == fz.getClose()) {
            if (fC.indexOf("l") > -1 || fC.indexOf("r") > -1) {
              return "vmatrix*"
            }
            return "vmatrix"
          }
          if ("{" == fz.getOpen() && "" == fz.getClose()) {
            return "cases"
          }
          var fw = bB.convertToChars("&Verbar;");
          if (fw == fz.getOpen() && fw == fz.getClose()) {
            if (fC.indexOf("l") > -1 || fC.indexOf("r") > -1) {
              return "Vmatrix*"
            }
            return "Vmatrix"
          }
          if ("(" == fz.getOpen() && ")" == fz.getClose()) {
            if (fC.indexOf("l") > -1 || fC.indexOf("r") > -1) {
              return "matrix*"
            }
            return "matrix"
          }
        }
      }
    }
    return null
  };
  cD.prototype.getTableBean = function (fy) {
    var fx = fy.getChildren();
    var fw = fx.get(0);
    var fz = fw.getChildren();
    return fz.get(0)
  };
  cD.prototype.getCharFrom = function (fy, fA) {
    if ("" == fA) {
      return fy + "."
    }
    fA = bB.convToEntities(fA);
    var fz = f.split(",");
    var fx = G.split(",");
    for (var fw = 0; fw < fx.length; fw++) {
      var fB = fx[fw];
      if (fB.length > 0) {
        if (fA == fB) {
          return fy + fz[fw]
        }
      }
    }
    return ""
  };
  cD.prototype.processToOmml = function (fE, fx, fA) {
    var fH = fE;
    var fJ = fH.getChildren();
    if (fJ != null) {
      for (var fC = 0; fC < fJ.size(); fC++) {
        var fK = fJ.get(fC);
        var fw = fK.getChildren();
        if (fw != null) {
          for (var fB = 0; fB < fw.size(); fB++) {
            var fz = fw.get(fB);
            if (fz.isDynamicCreated()) {
              fw.remove(fB);
              fB--
            }
          }
        }
      }
    }
    var fF = new cE("");
    fF.append(this.addTabs(fx) + "<" + fA.getNamespace() + "d>\n");
    fF.append(this.addTabs(fx + 1) + "<" + fA.getNamespace() + "dPr>\n");
    if (fH.getOpen() != null && !(fH.getOpen() == ar)) {
      fF.append(this.addTabs(fx + 2) + "<" + fA.getNamespace() + "begChr " + fA.getNamespace() + 'val="' + fH.getOpen() + '"/>\n')
    }
    if (fH.getClose() != null && !(fH.getClose() == b5)) {
      fF.append(this.addTabs(fx + 2) + "<" + fA.getNamespace() + "endChr " + fA.getNamespace() + 'val="' + fH.getClose() + '"/>\n')
    }
    if (fH.getSeparators() != null) {
      var fI = fu.trim(fH.getSeparators());
      if (fI.length > 0 && !fI == "|") {
        fI = fI.substring(0, 1);
        fF.append(this.addTabs(fx + 2) + "<" + fA.getNamespace() + "sepChr " + fA.getNamespace() + 'val="' + fI + '"/>\n')
      }
    }
    fF.append(this.addTabs(fx + 2) + "<" + fA.getNamespace() + "ctrlPr>\n");
    fF.append(this.addTabs(fx + 2) + "</" + fA.getNamespace() + "ctrlPr>\n");
    fF.append(this.addTabs(fx + 1) + "</" + fA.getNamespace() + "dPr>\n");
    var fy = fH.getChildren();
    for (var fC = 0; fC < fy.size(); fC++) {
      var fD = fy.get(fC);
      var fw = fD.getChildren();
      for (var fB = 0; fB < fw.size(); fB++) {
        var fG = fw.get(fB);
        fF.append(this.addTabs(fx + 1) + "<" + fA.getNamespace() + "e>\n");
        fF.append(aU.processBeans(fG, fx + 2, this.copyInfoRTagAndRow(fA)));
        fF.append(this.addTabs(fx + 1) + "</" + fA.getNamespace() + "e>\n")
      }
    }
    fF.append(this.addTabs(fx) + "</" + fA.getNamespace() + "d>\n");
    fA.setParentMrow(false);
    return fF.toString()
  };
  function i() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(i, bK);
  i.prototype.processToLatex = function (fB, fz) {
    var fw = fB;
    var fy = eS.process(fw.getNum(), fz);
    var fx = eS.process(fw.getDenum(), fz);
    fy = fu.trim(fy);
    fx = fu.trim(fx);
    var fA = "";
    if (fw.isBevelled()) {
      fA = "\\sfrac{" + fy + "}{" + fx + "}"
    } else {
      if ("75%" == fw.getAttribute("mathsize")) {
        fA = "\\cfrac{" + fy + "}{" + fx + "}"
      } else {
        if (fw.getLinethickness() == "0") {
          fA = "\\begin{array}" + fy + " \\\\ " + fx + "\\end{array}"
        } else {
          fA = "\\frac{" + fy + "}{" + fx + "}"
        }
      }
    }
    return this.addTextAndColor(fw, fA)
  };
  i.prototype.processToOmml = function (fA, fz, fx) {
    var fw = fA;
    var fy = new cE("");
    fy.append(this.addTabs(fz) + "<" + fx.getNamespace() + "f>\n");
    fy.append(this.addTabs(fz + 1) + "<" + fx.getNamespace() + "fPr>\n");
    if (fw.isBevelled()) {
      fy.append(this.addTabs(fz + 2) + "<" + fx.getNamespace() + 'type m:val="skw"/>\n')
    }
    if (fw.getLinethickness() == "0") {
      fy.append(this.addTabs(fz + 2) + "<" + fx.getNamespace() + 'type m:val="noBar"/>\n')
    }
    fy.append(this.addTabs(fz + 2) + "<" + fx.getNamespace() + "ctrlPr>\n");
    fy.append(this.addTabs(fz + 2) + "</" + fx.getNamespace() + "ctrlPr>\n");
    fy.append(this.addTabs(fz + 1) + "</" + fx.getNamespace() + "fPr>\n");
    fy.append(this.addTabs(fz + 1) + "<" + fx.getNamespace() + "num>\n");
    fy.append(aU.processBeans(fw.getNum(), fz + 2, this.copyInfoRTagAndRow(fx)));
    fy.append(this.addTabs(fz + 1) + "</" + fx.getNamespace() + "num>\n");
    fy.append(this.addTabs(fz + 1) + "<" + fx.getNamespace() + "den>\n");
    fy.append(aU.processBeans(fw.getDenum(), fz + 2, this.copyInfoRTagAndRow(fx)));
    fy.append(this.addTabs(fz + 1) + "</" + fx.getNamespace() + "den>\n");
    fy.append(this.addTabs(fz) + "</" + fx.getNamespace() + "f>\n");
    fx.setParentMrow(false);
    return fy.toString()
  };
  function cq() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(cq, bK);
  cq.prototype.processToLatex = function (fA, fx) {
    var fw = fA;
    var fy = fw.getText();
    if (cq.textIsFunction(fy)) {
      return "\\" + fy
    }
    fy = fu.replace(fy, "$", "\\$");
    if (fx.isMathMode()) {
      fy = fu.replace(fy, "#", "\\#")
    }
    fy = br.convToEntities(fy);
    if (fx.isMathMode()) {
      if (fy.indexOf(" ") > -1) {
        return "\\" + cq.getTypeOfText(fw.getAttribute("mathvariant")) + "{" + fy + "}"
      }
      if (fw.getAttribute("mathvariant") != null) {
        var fz = fw.getAttribute("mathvariant");
        if (!"italic" == fz) {
          return "\\" + cq.getTypeOfText(fz) + "{" + fy + "}"
        }
      }
    }
    return fy
  };
  cq.getTypeOfText = function (fw) {
    if ("normal" == fw) {
      return "textnormal"
    }
    if ("italic" == fw) {
      return "textit"
    }
    if ("bold" == fw) {
      return "textbf"
    }
    if ("bold-italic" == fw) {
      return "textbi"
    }
    if ("monospace" == fw) {
      return "texttt"
    }
    if ("sans-serif" == fw) {
      return "textsf"
    }
    if ("script" == fw) {
      return "textcal"
    }
    if ("double-struck" == fw) {
      return "textbb"
    }
    return "text"
  };
  cq.textIsFunction = function (fy) {
    var fz = a6.split(",");
    for (var fw = 0; fw < fz.length; fw++) {
      var fx = fz[fw];
      if (fx.length > 0) {
        if (fx == fy) {
          return true
        }
      }
    }
    return false
  };
  function ei() {
    this.t = cq;
    this.t()
  }
  
  FMath_extend(ei, cq);
  ei.prototype.processToOmml = function (fw, fz, fy) {
    var fx = fw;
    return this.displayText(fx.getText(), fz, fy)
  };
  function d8() {
    this.s = fb;
    this.s()
  }
  
  FMath_extend(d8, fb);
  function ah() {
    this.u = d8;
    this.u()
  }
  
  FMath_extend(ah, d8);
  ah.prototype.processToLatex = function (fw, fx) {
    return eS.processChildren(fw, fx)
  };
  ah.prototype.processToOmml = function (fD, fC, fz) {
    var fw = fD;
    var fB = new cE("");
    fB.append(this.addTabs(fC) + "<" + fz.getNamespace() + "oMath>\n");
    fz.setParentMrow(true);
    var fy = fw.getChildren();
    if (fy.size() == 1) {
      var fA = fy.get(0);
      fB.append(aU.processBeans(fA, fC + 1, fz))
    } else {
      if (fy.size() > 1) {
        for (var fx = 0; fx < fy.size(); fx++) {
          var fA = fy.get(fx);
          fB.append(aU.processBeans(fA, fC + 1, fz))
        }
      }
    }
    fB.append(this.addTabs(fC) + "</" + fz.getNamespace() + "oMath>\n");
    return fB.toString()
  };
  function aq() {
    this.s = fb;
    this.s()
  }
  
  FMath_extend(aq, fb);
  function e() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(e, bK);
  function eL() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(eL, bK);
  eL.prototype.processToLatex = function (fy, fB) {
    if (fy instanceof av) {
      var fN = fy;
      var fM = this.getSupSubElement(fN.getBase(), fB);
      var fw = this.getSupSubElement(fN.getExp(), fB);
      var fC = this.getSupSubElement(fN.getSub(), fB);
      if (!af.findIsIntegrale(fN.getBase()) && af.findIsBigOperator(fN.getBase())) {
        return " " + fM + "\\nolimits_" + fC + "^" + fw + " "
      }
      return " " + fM + "_" + fC + "^" + fw + " "
    } else {
      if (fy instanceof cl) {
        var fz = fy;
        var fM = this.getSupSubElement(fz.getBase(), fB);
        var fw = this.getSupSubElement(fz.getExp(), fB);
        if (!af.findIsIntegrale(fz.getBase()) && af.findIsBigOperator(fz.getBase())) {
          return " " + fM + "\\nolimits^" + fw + " "
        }
        return " " + fM + "^" + fw + " "
      } else {
        if (fy instanceof ce) {
          var fE = fy;
          var fM = this.getSupSubElement(fE.getBase(), fB);
          var fC = this.getSupSubElement(fE.getSub(), fB);
          if (!af.findIsIntegrale(fE.getBase()) && af.findIsBigOperator(fE.getBase())) {
            return " " + fM + "\\nolimits_" + fC + " "
          }
          return " " + fM + "_" + fC + " "
        } else {
          if (fy instanceof bL) {
            var fx = fy;
            var fM = this.getSupSubElement(fx.getBase(), fB);
            var fC = this.getSupSubElement(fx.getSub(), fB);
            if (af.findIsIntegrale(fx.getBase())) {
              return " " + fM + "\\limits_" + fC + " "
            }
            if (af.isOperator(fx.getSub(), "︸")) {
              return " \\underbrace" + eS.addParanthesifNone(fM) + " "
            }
            return " " + fM + "_" + fC + " "
          } else {
            if (fy instanceof g) {
              var fF = fy;
              var fM = this.getSupSubElement(fF.getBase(), fB);
              var fw = this.getSupSubElement(fF.getExp(), fB);
              if ("\\oline" == fw || "\\textasciimacron" == fw) {
                return " \\bar{" + fM + "}"
              }
              if (af.findIsIntegrale(fF.getBase())) {
                return " " + fM + "\\limits^" + fw + " "
              }
              if (af.isOperator(fF.getExp(), "︷")) {
                return " \\overbrace" + eS.addParanthesifNone(fM) + " "
              } else {
                if (af.isOperatorValue(fF.getExp(), 8407) || af.isOperatorValue(fF.getExp(), 8594)) {
                  return " \\vec" + eS.addParanthesifNone(fM) + " "
                }
              }
              return " " + fM + "^" + fw + " "
            } else {
              if (fy instanceof b1) {
                var fJ = fy;
                var fM = this.getSupSubElement(fJ.getBase(), fB);
                var fw = this.getSupSubElement(fJ.getExp(), fB);
                var fC = this.getSupSubElement(fJ.getSub(), fB);
                if (af.findIsIntegrale(fJ.getBase())) {
                  return " " + fM + "\\limits_" + fC + "^" + fw + " "
                }
                return " " + fM + "^" + fw + "_" + fC + " "
              } else {
                if (fy instanceof u) {
                  var fH = fy;
                  var fM = this.getElement(fH.getBase(), fB);
                  var fD = this.buildList(fH.getPreSub(), fB);
                  var fA = this.buildList(fH.getPreExp(), fB);
                  var fG = "";
                  if (fD.length > 0 || fA.length > 0) {
                    fG = " \\prescript{" + fA + "}{" + fD + "}{" + fM + "}"
                  } else {
                    fG = " " + fM
                  }
                  for (var fL = 0; fL < fH.getPostExp().size(); fL++) {
                    var fO = fH.getPostSub().get(fL);
                    var fK = fH.getPostExp().get(fL);
                    var fP = this.getElement(fO, fB);
                    var fI = this.getElement(fK, fB);
                    if (fI.length > 0) {
                      fG = fG + "^" + eS.addParanthesisExceptOne(fI)
                    }
                    if (fP.length > 0) {
                      fG = fG + "_" + eS.addParanthesisExceptOne(fP)
                    }
                  }
                  return fG + " "
                }
              }
            }
          }
        }
      }
    }
    return ""
  };
  eL.prototype.buildList = function (fB, fz) {
    var fw = fz.clone();
    if (fB == null || fB.size() == 0) {
      return ""
    }
    var fA = "";
    for (var fy = 0; fy < fB.size(); fy++) {
      var fx = fB.get(fy);
      fA = fA + eS.process(fx, fw)
    }
    fA = fu.trim(fA);
    return fA
  };
  eL.prototype.getElement = function (fx, fz) {
    var fw = fz.clone();
    var fy = eS.process(fx, fw);
    fy = fu.trim(fy);
    return fy
  };
  eL.prototype.getSupSubElement = function (fw, fy) {
    var fx = this.getElement(fw, fy);
    fx = eS.addParanthesisExceptOne(fx);
    return fx
  };
  eL.prototype.processToOmml = function (fC, fB, fy) {
    var fw = fC;
    var fA = new cE("");
    fA.append(this.addTabs(fB) + "<" + fy.getNamespace() + "sPre>\n");
    fA.append(this.addTabs(fB + 1) + "<" + fy.getNamespace() + "sPrePr>\n");
    fA.append(this.addTabs(fB + 2) + "<" + fy.getNamespace() + "ctrlPr>\n");
    fA.append(this.addTabs(fB + 2) + "</" + fy.getNamespace() + "ctrlPr>\n");
    fA.append(this.addTabs(fB + 1) + "</" + fy.getNamespace() + "sPrePr>\n");
    var fx = fw.getPreSub().get(0);
    fA.append(this.addTabs(fB + 1) + "<" + fy.getNamespace() + "sub>\n");
    fA.append(aU.processBeans(fx, fB + 2, this.copyInfoRTagAndRow(fy)));
    fA.append(this.addTabs(fB + 1) + "</" + fy.getNamespace() + "sub>\n");
    var fz = fw.getPreExp().get(0);
    fA.append(this.addTabs(fB + 1) + "<" + fy.getNamespace() + "sup>\n");
    fA.append(aU.processBeans(fz, fB + 2, this.copyInfoRTag(fy)));
    fA.append(this.addTabs(fB + 1) + "</" + fy.getNamespace() + "sup>\n");
    fA.append(this.addTabs(fB + 1) + "<" + fy.getNamespace() + "e>\n");
    fA.append(aU.processBeans(fw.getBase(), fB + 2, this.copyInfoRTagAndRow(fy)));
    fA.append(this.addTabs(fB + 1) + "</" + fy.getNamespace() + "e>\n");
    fA.append(this.addTabs(fB) + "</" + fy.getNamespace() + "sPre>\n");
    fy.setParentMrow(false);
    return fA.toString()
  };
  function eD() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(eD, bK);
  eD.prototype.processToOmml = function (fA, fz, fx) {
    var fw = fA;
    var fy = new cE("");
    fy.append(this.addTabs(fz) + "<" + fx.getNamespace() + "nary>\n");
    fy.append(this.addTabs(fz + 1) + "<" + fx.getNamespace() + "naryPr>\n");
    if (!("∫" == fw.getChr())) {
      fy.append(this.addTabs(fz + 2) + "<" + fx.getNamespace() + 'chr m:val="' + fw.getChr() + '"/>\n')
    }
    fy.append(this.addTabs(fz + 2) + "<" + fx.getNamespace() + 'limLoc m:val="' + fw.getLimLoc() + '"/>\n');
    if (fw.isSupHide()) {
      fy.append(this.addTabs(fz + 2) + "<" + fx.getNamespace() + 'supHide m:val="on"/>\n')
    }
    if (fw.isSubHide()) {
      fy.append(this.addTabs(fz + 2) + "<" + fx.getNamespace() + 'subHide m:val="on"/>\n')
    }
    fy.append(this.addTabs(fz + 2) + "<" + fx.getNamespace() + "ctrlPr>\n");
    fy.append(this.addTabs(fz + 2) + "</" + fx.getNamespace() + "ctrlPr>\n");
    fy.append(this.addTabs(fz + 1) + "</" + fx.getNamespace() + "naryPr>\n");
    if (fw.isSubHide()) {
      fy.append(this.addTabs(fz + 1) + "<" + fx.getNamespace() + "sub/>\n")
    } else {
      fy.append(this.addTabs(fz + 1) + "<" + fx.getNamespace() + "sub>\n");
      fy.append(aU.processBeans(fw.getSub(), fz + 2, this.copyInfoRTagAndRow(fx)));
      fy.append(this.addTabs(fz + 1) + "</" + fx.getNamespace() + "sub>\n")
    }
    if (fw.isSupHide()) {
      fy.append(this.addTabs(fz + 1) + "<" + fx.getNamespace() + "sup/>\n")
    } else {
      fy.append(this.addTabs(fz + 1) + "<" + fx.getNamespace() + "sup>\n");
      fy.append(aU.processBeans(fw.getSup(), fz + 2, this.copyInfoRTagAndRow(fx)));
      fy.append(this.addTabs(fz + 1) + "</" + fx.getNamespace() + "sup>\n")
    }
    fy.append(this.addTabs(fz + 1) + "<" + fx.getNamespace() + "e>\n");
    fy.append(aU.processBeans(fw.getE(), fz + 2, this.copyInfoRTagAndRow(fx)));
    fy.append(this.addTabs(fz + 1) + "</" + fx.getNamespace() + "e>\n");
    fy.append(this.addTabs(fz) + "</" + fx.getNamespace() + "nary>\n");
    fx.setParentMrow(false);
    return fy.toString()
  };
  function X() {
    this.t = cq;
    this.t()
  }
  
  FMath_extend(X, cq);
  X.prototype.processToOmml = function (fx, fz, fy) {
    var fw = fx;
    return this.displayText(fw.getText(), fz, fy)
  };
  function cg() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(cg, bK);
  function cX() {
    this.t = cq;
    this.t()
  }
  
  FMath_extend(cX, cq);
  cX.prototype.processToLatex = function (fw, fx) {
    var fy = fw;
    return cX.addSpaceToOperator(fy, cq.prototype.processToLatex.call(this, fw, fx))
  };
  cX.addSpaceToOperator = function (fw, fx) {
    if (fw.getOperatorStyle().getLspace() > 1) {
      fx = " " + fx
    }
    if (fw.getOperatorStyle().getRspace() > 1) {
      fx = fx + " "
    }
    return fx
  };
  cX.prototype.processToOmml = function (fw, fz, fy) {
    var fx = fw;
    return this.displayText(fx.getText(), fz, fy)
  };
  function dK() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(dK, bK);
  function cN() {
    this.s = fb;
    this.s()
  }
  
  FMath_extend(cN, fb);
  function ee() {
    this.s = fb;
    this.s()
  }
  
  FMath_extend(ee, fb);
  ee.prototype.processToLatex = function (fw, fx) {
    var fy = fb.prototype.processToLatex.call(this, fw, fx);
    fy = fu.trim(fy);
    return "\\phantom{" + fy + "}"
  };
  function dP() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(dP, bK);
  function de() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(de, bK);
  de.prototype.processToLatex = function (fA, fx) {
    var fw = fA;
    var fz = eS.process(fw.getIndex(), fx);
    fz = fu.trim(fz);
    var fy = eS.process(fw.getBase(), fx);
    fy = fu.trim(fy);
    return "\\sqrt[" + fz + "]{" + fy + "}"
  };
  de.prototype.processToOmml = function (fA, fz, fx) {
    var fw = fA;
    var fy = new cE("");
    fy.append(this.addTabs(fz) + "<" + fx.getNamespace() + "rad>\n");
    fy.append(this.addTabs(fz + 1) + "<" + fx.getNamespace() + "radPr>\n");
    fy.append(this.addTabs(fz + 2) + "<" + fx.getNamespace() + "ctrlPr>\n");
    fy.append(this.addTabs(fz + 2) + "</" + fx.getNamespace() + "ctrlPr>\n");
    fy.append(this.addTabs(fz + 1) + "</" + fx.getNamespace() + "radPr>\n");
    fy.append(this.addTabs(fz + 1) + "<" + fx.getNamespace() + "deg>\n");
    fy.append(aU.processBeans(fw.getIndex(), fz + 2, this.copyInfoRTagAndRow(fx)));
    fy.append(this.addTabs(fz + 1) + "</" + fx.getNamespace() + "deg>\n");
    fy.append(this.addTabs(fz + 1) + "<" + fx.getNamespace() + "e>\n");
    fy.append(aU.processBeans(fw.getBase(), fz + 2, this.copyInfoRTagAndRow(fx)));
    fy.append(this.addTabs(fz + 1) + "</" + fx.getNamespace() + "e>\n");
    fy.append(this.addTabs(fz) + "</" + fx.getNamespace() + "rad>\n");
    fx.setParentMrow(false);
    return fy.toString()
  };
  function d0() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(d0, bK);
  d0.prototype.processToLatex = function (fw, fx) {
    return eS.processChildren(fw, fx)
  };
  d0.prototype.processToOmml = function (fD, fC, fz) {
    var fw = fD;
    this.changeNaryBeans(fw);
    var fB = new cE("");
    var fy = fw.getChildren();
    if (fy.size() == 1) {
      var fA = fy.get(0);
      fB.append(aU.processBeans(fA, fC, this.copyInfoRTagAndRow(fz)))
    } else {
      if (fy.size() > 1 && fz.isParentMrow()) {
        for (var fx = 0; fx < fy.size(); fx++) {
          var fA = fy.get(fx);
          fB.append(aU.processBeans(fA, fC, this.copyInfoRTagAndRow(fz)))
        }
      } else {
        if (fy.size() > 1) {
          fB.append(this.addTabs(fC) + "<" + fz.getNamespace() + "e>\n");
          fz.setParentMrow(true);
          for (var fx = 0; fx < fy.size(); fx++) {
            var fA = fy.get(fx);
            fB.append(aU.processBeans(fA, fC + 1, this.copyInfoRTagAndRow(fz)))
          }
          fB.append(this.addTabs(fC) + "</" + fz.getNamespace() + "e>\n")
        }
      }
    }
    return fB.toString()
  };
  d0.prototype.changeNaryBeans = function (fw) {
    var fz = fw.getChildren();
    for (var fy = 0; fy < fz.size(); fy++) {
      var fB = fz.get(fy);
      if (fB instanceof cf || fB instanceof av || fB instanceof ce || fB instanceof cl || fB instanceof b1 || fB instanceof bL || fB instanceof g) {
        if (d0.isLargeOperator(fB)) {
          var fx = new T(fB.getParentBean());
          fx.setChr(d0.getCharFromBean(fB));
          if (fB instanceof b1 || fB instanceof bL || fB instanceof g) {
            fx.setLimLoc("undOvr")
          }
          if (fB instanceof av || fB instanceof cl || fB instanceof b1 || fB instanceof g) {
            fx.setSup(d0.getSupFromBean(fB))
          } else {
            fx.setSupHide(true)
          }
          if (fB instanceof av || fB instanceof ce || fB instanceof b1 || fB instanceof bL) {
            fx.setSub(d0.getSubFromBean(fB))
          } else {
            fx.setSubHide(true)
          }
          if (fy < (fz.size() - 1)) {
            var fA = fz.get(fy + 1);
            fx.setE(fA);
            fz.remove(fy + 1)
          }
          fz.remove(fy);
          fz.addTo(fy, fx);
          this.changeNaryBeans(fw)
        }
      }
    }
  };
  d0.getSubFromBean = function (fA) {
    if (fA instanceof av) {
      var fz = fA;
      return fz.getSub()
    } else {
      if (fA instanceof ce) {
        var fx = fA;
        return fx.getSub()
      } else {
        if (fA instanceof b1) {
          var fw = fA;
          return fw.getSub()
        } else {
          if (fA instanceof bL) {
            var fy = fA;
            return fy.getSub()
          }
        }
      }
    }
    return null
  };
  d0.getSupFromBean = function (fA) {
    if (fA instanceof av) {
      var fz = fA;
      return fz.getExp()
    } else {
      if (fA instanceof cl) {
        var fx = fA;
        return fx.getExp()
      } else {
        if (fA instanceof b1) {
          var fw = fA;
          return fw.getExp()
        } else {
          if (fA instanceof g) {
            var fy = fA;
            return fy.getExp()
          }
        }
      }
    }
    return null
  };
  d0.getCharFromBean = function (fD) {
    if (fD instanceof cf) {
      var fy = fD;
      return fy.getText()
    } else {
      if (fD instanceof av) {
        var fC = fD;
        return d0.getCharFromBean(fC.getBase())
      } else {
        if (fD instanceof ce) {
          var fz = fD;
          return d0.getCharFromBean(fz.getBase())
        } else {
          if (fD instanceof cl) {
            var fx = fD;
            return d0.getCharFromBean(fx.getBase())
          } else {
            if (fD instanceof b1) {
              var fw = fD;
              return d0.getCharFromBean(fw.getBase())
            } else {
              if (fD instanceof bL) {
                var fB = fD;
                return d0.getCharFromBean(fB.getBase())
              } else {
                if (fD instanceof g) {
                  var fA = fD;
                  return d0.getCharFromBean(fA.getBase())
                }
              }
            }
          }
        }
      }
    }
    return ""
  };
  d0.isLargeOperator = function (fD) {
    if (fD instanceof cf) {
      var fy = fD;
      return fy.getLargeop()
    } else {
      if (fD instanceof av) {
        var fC = fD;
        return d0.isLargeOperator(fC.getBase())
      } else {
        if (fD instanceof ce) {
          var fz = fD;
          return d0.isLargeOperator(fz.getBase())
        } else {
          if (fD instanceof cl) {
            var fx = fD;
            return d0.isLargeOperator(fx.getBase())
          } else {
            if (fD instanceof b1) {
              var fw = fD;
              return d0.isLargeOperator(fw.getBase())
            } else {
              if (fD instanceof bL) {
                var fB = fD;
                return d0.isLargeOperator(fB.getBase())
              } else {
                if (fD instanceof g) {
                  var fA = fD;
                  return d0.isLargeOperator(fA.getBase())
                }
              }
            }
          }
        }
      }
    }
    return false
  };
  function aj() {
    this.t = cq;
    this.t()
  }
  
  FMath_extend(aj, cq);
  aj.prototype.processToOmml = function (fz, fy, fx) {
    var fw = fz;
    return this.displayText(fw.getText(), fy, fx)
  };
  function cU() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(cU, bK);
  function ep() {
    this.s = fb;
    this.s()
  }
  
  FMath_extend(ep, fb);
  function I() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(I, bK);
  function dR() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(dR, bK);
  function fp() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(fp, bK);
  fp.prototype.processToLatex = function (fx, fB) {
    var fw = fx;
    if (fw.isLineBreak()) {
      return "\\newline"
    }
    var fC = fw.getWidth();
    if (fC != null) {
      var fz = ef.split("|");
      var fy = dO.split("|");
      for (var fA = 0; fA < fy.length; fA++) {
        if (fC == fy[fA]) {
          return "\\" + fz[fA]
        }
      }
    }
    return ""
  };
  function ck() {
    this.s = fb;
    this.s()
  }
  
  FMath_extend(ck, fb);
  ck.prototype.processToLatex = function (fw, fx) {
    var fy = fb.prototype.processToLatex.call(this, fw, fx);
    fy = fu.trim(fy);
    return "\\sqrt{" + fy + "}"
  };
  ck.prototype.processToOmml = function (fw, fC, fz) {
    var fB = new cE("");
    fB.append(this.addTabs(fC) + "<" + fz.getNamespace() + "rad>\n");
    fB.append(this.addTabs(fC + 1) + "<" + fz.getNamespace() + "radPr>\n");
    fB.append(this.addTabs(fC + 2) + "<" + fz.getNamespace() + 'degHide m:val="on"/>\n');
    fB.append(this.addTabs(fC + 2) + "<" + fz.getNamespace() + "ctrlPr>\n");
    fB.append(this.addTabs(fC + 2) + "</" + fz.getNamespace() + "ctrlPr>\n");
    fB.append(this.addTabs(fC + 1) + "</" + fz.getNamespace() + "radPr>\n");
    fB.append(this.addTabs(fC + 1) + "<" + fz.getNamespace() + "deg/>\n");
    fB.append(this.addTabs(fC + 1) + "<" + fz.getNamespace() + "e>\n");
    fz.setParentMrow(true);
    var fy = fw.getChildren();
    for (var fx = 0; fx < fy.size(); fx++) {
      var fA = fy.get(fx);
      fB.append(aU.processBeans(fA, fC + 2, this.copyInfoRTagAndRow(fz)))
    }
    fB.append(this.addTabs(fC + 1) + "</" + fz.getNamespace() + "e>\n");
    fB.append(this.addTabs(fC) + "</" + fz.getNamespace() + "rad>\n");
    fz.setParentMrow(false);
    return fB.toString()
  };
  function aW() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(aW, bK);
  function aO() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(aO, bK);
  function dS() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(dS, bK);
  dS.prototype.processToOmml = function (fA, fz, fx) {
    var fw = fA;
    var fy = new cE("");
    fy.append(this.addTabs(fz) + "<" + fx.getNamespace() + "sSub>\n");
    fy.append(this.addTabs(fz + 1) + "<" + fx.getNamespace() + "e>\n");
    fy.append(aU.processBeans(fw.getBase(), fz + 2, this.copyInfoRTagAndRow(fx)));
    fy.append(this.addTabs(fz + 1) + "</" + fx.getNamespace() + "e>\n");
    fy.append(this.addTabs(fz + 1) + "<" + fx.getNamespace() + "sub>\n");
    fy.append(aU.processBeans(fw.getSub(), fz + 2, this.copyInfoRTagAndRow(fx)));
    fy.append(this.addTabs(fz + 1) + "</" + fx.getNamespace() + "sub>\n");
    fy.append(this.addTabs(fz) + "</" + fx.getNamespace() + "sSub>\n");
    fx.setParentMrow(false);
    return fy.toString()
  };
  function w() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(w, bK);
  w.prototype.processToOmml = function (fA, fz, fx) {
    var fw = fA;
    var fy = new cE("");
    fy.append(this.addTabs(fz) + "<" + fx.getNamespace() + "sSubSup>\n");
    fy.append(this.addTabs(fz + 1) + "<" + fx.getNamespace() + "e>\n");
    fy.append(aU.processBeans(fw.getBase(), fz + 2, this.copyInfoRTagAndRow(fx)));
    fy.append(this.addTabs(fz + 1) + "</" + fx.getNamespace() + "e>\n");
    fy.append(this.addTabs(fz + 1) + "<" + fx.getNamespace() + "sub>\n");
    fy.append(aU.processBeans(fw.getSub(), fz + 2, this.copyInfoRTagAndRow(fx)));
    fy.append(this.addTabs(fz + 1) + "</" + fx.getNamespace() + "sub>\n");
    fy.append(this.addTabs(fz + 1) + "<" + fx.getNamespace() + "sup>\n");
    fy.append(aU.processBeans(fw.getExp(), fz + 2, this.copyInfoRTag(fx)));
    fy.append(this.addTabs(fz + 1) + "</" + fx.getNamespace() + "sup>\n");
    fy.append(this.addTabs(fz) + "</" + fx.getNamespace() + "sSubSup>\n");
    fx.setParentMrow(false);
    return fy.toString()
  };
  function dV() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(dV, bK);
  dV.prototype.processToOmml = function (fA, fz, fx) {
    var fw = fA;
    var fy = new cE("");
    fy.append(this.addTabs(fz) + "<" + fx.getNamespace() + "sSup>\n");
    fy.append(this.addTabs(fz + 1) + "<" + fx.getNamespace() + "sSupPr>\n");
    fy.append(this.addTabs(fz + 2) + "<" + fx.getNamespace() + "ctrlPr>\n");
    fy.append(this.addTabs(fz + 2) + "</" + fx.getNamespace() + "ctrlPr>\n");
    fy.append(this.addTabs(fz + 1) + "</" + fx.getNamespace() + "sSupPr>\n");
    fy.append(this.addTabs(fz + 1) + "<" + fx.getNamespace() + "e>\n");
    fy.append(aU.processBeans(fw.getBase(), fz + 2, this.copyInfoRTagAndRow(fx)));
    fy.append(this.addTabs(fz + 1) + "</" + fx.getNamespace() + "e>\n");
    fy.append(this.addTabs(fz + 1) + "<" + fx.getNamespace() + "sup>\n");
    fy.append(aU.processBeans(fw.getExp(), fz + 2, this.copyInfoRTagAndRow(fx)));
    fy.append(this.addTabs(fz + 1) + "</" + fx.getNamespace() + "sup>\n");
    fy.append(this.addTabs(fz) + "</" + fx.getNamespace() + "sSup>\n");
    fx.setParentMrow(false);
    return fy.toString()
  };
  function bX() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(bX, bK);
  bX.prototype.processToLatex = function (fz, fx) {
    var fw = fz;
    var fy = bX.buildArrayContent(fw, fx);
    fy = "\\begin{array}" + this.getAlignment(fw) + fy + "\\end{array}";
    return this.addTextAndColor(fw, fy)
  };
  bX.buildArrayContent = function (fw, fz) {
    var fC = new cE("");
    var fy = fw.getChildren();
    for (var fx = 0; fx < fy.size(); fx++) {
      var fB = fy.get(fx);
      var fA = eS.process(fB, fz);
      fA = fu.trim(fA);
      if (fC.toString().length > 0) {
        fA = " \\\\ " + fA
      }
      fC.append(fA)
    }
    return fC.toString()
  };
  bX.prototype.getAlignment = function (fw) {
    var fx = bX.computeAlignment(fw);
    fx = this.addColumnLines(fw, fx);
    if (fx.length == 0) {
      return ""
    }
    return "{" + fx + "}"
  };
  bX.prototype.addColumnLines = function (fx, fC) {
    if (fx.getColumnlines() != null) {
      var fz = fx.getColumnlines();
      fz = fu.trim(fz);
      if (fz.length > 0 && (!("none" == fz))) {
        var fy = fz.split(" ");
        var fw = fy.length;
        if (fw < fC.length) {
          fw = fC.length
        }
        var fB = new cE("");
        for (var fA = 0; fA < fw; fA++) {
          this.addToString(fA, fy, fC, fB)
        }
        fC = fB.toString()
      }
    }
    if (fx.getCssstyle().getBorder_width_left(100) > 0) {
      fC = "|" + fC
    }
    if (fx.getCssstyle().getBorder_width_right(100) > 0) {
      fC = fC + "|"
    }
    return fC
  };
  bX.prototype.addToString = function (fx, fw, fz, fy) {
    if (fx < fz.length) {
      fy.append(fz.charAt(fx) + "")
    } else {
      fy.append("c")
    }
    if (fx < fw.length) {
      if ("none" == fw[fx]) {
        return
      } else {
        fy.append("|")
      }
    }
    return
  };
  bX.computeAlignment = function (fw) {
    var fx = bX.buildAlignment(fw);
    fx = bX.removeLastDuplicates(fx);
    return fx
  };
  bX.removeLastDuplicates = function (fy) {
    if (fy.length > 1) {
      var fx = fy.charAt(fy.length - 1);
      var fw = fy.charAt(fy.length - 2);
      if (fx == fw) {
        fy = fy.substring(0, fy.length - 1);
        return bX.removeLastDuplicates(fy)
      }
    }
    return fy
  };
  bX.buildAlignment = function (fF) {
    var fD = false;
    if (fF.getColumnalign() != null) {
      return bX.getAlignValuesFromMultiple(fF.getColumnalign())
    }
    var fw = fF.getChildren();
    if (fw.size() > 0) {
      var fB = fw.get(0);
      if (fB.getColumnalign() != null) {
        return bX.getAlignValuesFromMultiple(fB.getColumnalign())
      }
      var fz = fB.getChildren();
      for (var fy = 0; fy < fz.size(); fy++) {
        var fx = fz.get(fy);
        if (fx.getColumnalign() != null) {
          fD = true
        }
      }
    }
    if (!fD) {
      return ""
    }
    var fA = "";
    var fE = fw.get(0);
    var fC = fE.getChildren();
    for (var fy = 0; fy < fC.size(); fy++) {
      var fx = fC.get(fy);
      fA = fA + bX.getAlignValue(fx.getColumnalign())
    }
    return fA
  };
  bX.getAlignValuesFromMultiple = function (fx) {
    var fz = "";
    var fy = fx.split(" ");
    for (var fw = 0; fw < fy.length; fw++) {
      fz = fz + bX.getAlignValue(fy[fw])
    }
    return fz
  };
  bX.getAlignValue = function (fw) {
    if (fw == null) {
      return "c"
    } else {
      if ("left" == fw) {
        return "l"
      } else {
        if ("right" == fw) {
          return "r"
        }
      }
    }
    return "c"
  };
  bX.prototype.processToOmml = function (fE, fw, fx) {
    var fD = new cE("");
    fD.append(this.addTabs(fw) + "<" + fx.getNamespace() + "eqArr>\n");
    fD.append(this.addTabs(fw + 1) + "<" + fx.getNamespace() + "eqArrPr>\n");
    fD.append(this.addTabs(fw + 2) + "<" + fx.getNamespace() + "ctrlPr>\n");
    fD.append(this.addTabs(fw + 2) + "</" + fx.getNamespace() + "ctrlPr>\n");
    fD.append(this.addTabs(fw + 1) + "</" + fx.getNamespace() + "eqArrPr>\n");
    for (var fB = 0; fB < fE.getChildren().size(); fB++) {
      var fF = fE.getChildren().get(fB);
      fD.append(this.addTabs(fw + 1) + "<" + fx.getNamespace() + "e>\n");
      fx.setParentMrow(true);
      for (var fA = 0; fA < fF.getChildren().size(); fA++) {
        var fC = fF.getChildren().get(fA);
        for (var fz = 0; fz < fC.getChildren().size(); fz++) {
          var fy = fC.getChildren().get(fz);
          fD.append(aU.processBeans(fy, fw + 2, this.copyInfoRTagAndRow(fx)))
        }
      }
      fD.append(this.addTabs(fw + 1) + "</" + fx.getNamespace() + "e>\n")
    }
    fD.append(this.addTabs(fw) + "</" + fx.getNamespace() + "eqArr>\n");
    fx.setParentMrow(false);
    return fD.toString()
  };
  function c8() {
    this.t = cq;
    this.t()
  }
  
  FMath_extend(c8, cq);
  c8.prototype.processToOmml = function (fz, fy, fx) {
    var fw = fz;
    return this.displayText(fw.getText(), fy, fx)
  };
  function aV() {
    this.s = fb;
    this.s()
  }
  
  FMath_extend(aV, fb);
  function a4() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(a4, bK);
  a4.prototype.processToLatex = function (fw, fz) {
    var fC = new cE("");
    var fy = fw.getChildren();
    for (var fx = 0; fx < fy.size(); fx++) {
      var fB = fy.get(fx);
      var fA = eS.process(fB, fz);
      fA = fu.trim(fA);
      if (fC.toString().length > 0) {
        fA = " & " + fA
      }
      fC.append(fA)
    }
    return fC.toString()
  };
  function cI() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(cI, bK);
  function h() {
    this.r = bK;
    this.r()
  }
  
  FMath_extend(h, bK);
  function aU() {
  }
  
  aU.convertToOMML = function (fw) {
    cP.ignoreWhitespace = false;
    cP.prettyPrinting = false;
    try {
      return aU.process(fw)
    } catch (fx) {
    }
    return "$ Error $"
  };
  aU.process = function (fx) {
    fx = fu.replace(fx, "&", "&amp;");
    fx = r.removeNamespace(fx);
    var fw = new cw();
    var fy = c9.createBeanStructure(fx, fw);
    return aU.convertToOmmlFromBeans(fy)
  };
  aU.convertToOmmlFromBeans = function (fy) {
    var fx = new U();
    var fw = aU.processBeans(fy, 0, fx);
    return fw
  };
  aU.processBeans = function (fR, fw, f9) {
    aU.compressTextsBeans(fR);
    if (fR instanceof fi) {
      var f5 = new ah();
      return f5.processToOmml(fR, fw, f9)
    } else {
      if (fR instanceof b3) {
        var f3 = new ee();
        return f3.processToOmml(fR, fw, f9)
      } else {
        if (fR instanceof cW) {
          var f1 = new bX();
          return f1.processToOmml(fR, fw, f9)
        } else {
          if (fR instanceof fk) {
            var fZ = new cD();
            return fZ.processToOmml(fR, fw, f9)
          } else {
            if (fR instanceof dh) {
              var fX = new ck();
              return fX.processToOmml(fR, fw, f9)
            } else {
              if (fR instanceof bv) {
                var fV = new d0();
                return fV.processToOmml(fR, fw, f9)
              } else {
                if (fR instanceof aN) {
                  var fU = new fb();
                  return fU.processToOmml(fR, fw, f9)
                } else {
                  if (fR instanceof A) {
                    var fT = new c8();
                    return fT.processToOmml(fR, fw, f9)
                  } else {
                    if (fR instanceof cf) {
                      var fS = new cX();
                      return fS.processToOmml(fR, fw, f9)
                    } else {
                      if (fR instanceof cF) {
                        var gb = new X();
                        return gb.processToOmml(fR, fw, f9)
                      } else {
                        if (fR instanceof cl) {
                          var ga = new dV();
                          return ga.processToOmml(fR, fw, f9)
                        } else {
                          if (fR instanceof aF) {
                            var f8 = new df();
                            return f8.processToOmml(fR, fw, f9)
                          } else {
                            if (fR instanceof eO) {
                              var f7 = new bO();
                              return f7.processToOmml(fR, fw, f9)
                            } else {
                              if (fR instanceof ft) {
                                var f6 = new i();
                                return f6.processToOmml(fR, fw, f9)
                              } else {
                                if (fR instanceof ey) {
                                  var f4 = new ei();
                                  return f4.processToOmml(fR, fw, f9)
                                } else {
                                  if (fR instanceof bt) {
                                    var f2 = new aq();
                                    return f2.processToOmml(fR, fw, f9)
                                  } else {
                                    if (fR instanceof d6) {
                                      var f0 = new e();
                                      return f0.processToOmml(fR, fw, f9)
                                    } else {
                                      if (fR instanceof u) {
                                        var fY = new eL();
                                        return fY.processToOmml(fR, fw, f9)
                                      } else {
                                        if (fR instanceof aI) {
                                          var fW = new cg();
                                          return fW.processToOmml(fR, fw, f9)
                                        } else {
                                          if (fR instanceof g) {
                                            var fQ = new dK();
                                            return fQ.processToOmml(fR, fw, f9)
                                          } else {
                                            if (fR instanceof e3) {
                                              var fP = new cN();
                                              return fP.processToOmml(fR, fw, f9)
                                            } else {
                                              if (fR instanceof b3) {
                                                var fO = new ee();
                                                return fO.processToOmml(fR, fw, f9)
                                              } else {
                                                if (fR instanceof an) {
                                                  var fN = new de();
                                                  return fN.processToOmml(fR, fw, f9)
                                                } else {
                                                  if (fR instanceof ac) {
                                                    var fM = new aj();
                                                    return fM.processToOmml(fR, fw, f9)
                                                  } else {
                                                    if (fR instanceof eY) {
                                                      var fL = new cU();
                                                      return fL.processToOmml(fR, fw, f9)
                                                    } else {
                                                      if (fR instanceof cO) {
                                                        var fK = new ep();
                                                        return fK.processToOmml(fR, fw, f9)
                                                      } else {
                                                        if (fR instanceof c2) {
                                                          var fJ = new I();
                                                          return fJ.processToOmml(fR, fw, f9)
                                                        } else {
                                                          if (fR instanceof ay) {
                                                            var fI = new dR();
                                                            return fI.processToOmml(fR, fw, f9)
                                                          } else {
                                                            if (fR instanceof j) {
                                                              var fH = new fp();
                                                              return fH.processToOmml(fR, fw, f9)
                                                            } else {
                                                              if (fR instanceof ct) {
                                                                var fG = new aW();
                                                                return fG.processToOmml(fR, fw, f9)
                                                              } else {
                                                                if (fR instanceof ea) {
                                                                  var fF = new aO();
                                                                  return fF.processToOmml(fR, fw, f9)
                                                                } else {
                                                                  if (fR instanceof au) {
                                                                    var fE = new d8();
                                                                    return fE.processToOmml(fR, fw, f9)
                                                                  } else {
                                                                    if (fR instanceof ce) {
                                                                      var fD = new dS();
                                                                      return fD.processToOmml(fR, fw, f9)
                                                                    } else {
                                                                      if (fR instanceof bF) {
                                                                        var fC = new aV();
                                                                        return fC.processToOmml(fR, fw, f9)
                                                                      } else {
                                                                        if (fR instanceof bH) {
                                                                          var fB = new cq();
                                                                          return fB.processToOmml(fR, fw, f9)
                                                                        } else {
                                                                          if (fR instanceof bR) {
                                                                            var fA = new a4();
                                                                            return fA.processToOmml(fR, fw, f9)
                                                                          } else {
                                                                            if (fR instanceof bL) {
                                                                              var fz = new cI();
                                                                              return fz.processToOmml(fR, fw, f9)
                                                                            } else {
                                                                              if (fR instanceof b1) {
                                                                                var fy = new h();
                                                                                return fy.processToOmml(fR, fw, f9)
                                                                              } else {
                                                                                if (fR instanceof av) {
                                                                                  var fx = new w();
                                                                                  return fx.processToOmml(fR, fw, f9)
                                                                                } else {
                                                                                  if (fR instanceof T) {
                                                                                    var gc = new eD();
                                                                                    return gc.processToOmml(fR, fw, f9)
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return ""
  };
  aU.compressTextsBeans = function (fw) {
    if (fw instanceof aN) {
      if (fw instanceof fk) {
        return
      }
      var fy = fw.getChildren();
      for (var fx = 0; fx < fy.size(); fx++) {
        var fC = fy.get(fx);
        if (aU.isTextInstance(fC)) {
          if (fx < (fy.size() - 1)) {
            var fz = fy.get(fx + 1);
            if (aU.isTextInstance(fz)) {
              var fA = aU.getText(fC);
              fA = fA + aU.getText(fz);
              fy.remove(fx + 1);
              fy.remove(fx);
              var fB = c9.getTBean(fw, fA);
              fy.addTo(fx, fB);
              aU.compressTextsBeans(fw)
            }
          }
        }
      }
    }
  };
  aU.getText = function (fx) {
    if (bH.isTokenBean(fx)) {
      var fw = fx;
      return fw.getText()
    }
    return ""
  };
  aU.isTextInstance = function (fx) {
    if ((fx instanceof A) || (fx instanceof cF) || (fx instanceof ey)) {
      return true
    }
    if (fx instanceof cf) {
      var fw = fx;
      if (fw.getLargeop()) {
        return false
      }
      if (fw.isAccent()) {
        return false
      }
      return true
    }
    return false
  };
  aU.processChildren = function (fD, fw, fz) {
    var fB = new cE("");
    var fy = fD.getChildren();
    if (fy != null) {
      for (var fA = 0; fA < fy.size(); fA++) {
        var fx = fy.get(fA);
        var fC = aU.processBeans(fx, fw, fz);
        if (fB.toString().length > 0) {
          var fE = fB.toString();
          if (fE.lastIndexOf(" ") == (fE.length - 1)) {
            fC = fu.trimLeft(fC)
          }
        }
        fB.append(fC)
      }
    }
    return fB.toString()
  };
  function bn() {
  }
  
  bn.createMathMLFromOmmlList = function (fz) {
    var fB = new cE("");
    fB.append("<math>\n");
    for (var fx = 0; fx < fz.size(); fx++) {
      try {
        var fw = fz.get(fx);
        var fy = bn.createMathMLFromOmml(fw);
        fy = fu.replace(fy, "<math mathvariant='italic'>", "<mrow>");
        fy = fu.replace(fy, "</math>", "</mrow>");
        fB.append(fy)
      } catch (fA) {
        fB.append("<merror>Error</merror>")
      }
      if (fx < (fz.size() - 1)) {
        fB.append("<mspace linebreak='newline'/>\n")
      }
    }
    fB.append("</math>\n");
    return fB.toString()
  };
  bn.createMathMLFromOmml = function (fw) {
    cP.ignoreWhitespace = false;
    cP.prettyPrinting = false;
    fw = fu.deleteText(fw, "<w:rPr>", "</w:rPr>");
    fw = cG.replacePreferedValue(fw);
    fw = bB.replaceEntitiesAndHexCode(fw, ",&lt;,&gt;,");
    return bn.createMathML(fw)
  };
  bn.replaceAllUTFChars = function (fz) {
    for (var fy = 0; fy < fz.length; fy++) {
      var fw = fz.charCodeAt(fy);
      if (fw > 127) {
        var fx = bB.getFirstCodeForNumber(fw);
        if (fx != null) {
          fx = fu.trim(fx);
          if (fx.length > 0) {
            fz = fz.substring(0, fy) + "&" + fx + ";" + fz.substring(fy + 1, fz.length)
          }
        } else {
          continue
        }
      }
    }
    return fz
  };
  bn.createMathML = function (fw) {
    return bn.create(fw, bn.createDefaultStyle())
  };
  bn.createDefaultStyle = function () {
    var fw = new du();
    fw.setMathvariant("italic");
    fw.setMathsize(24);
    fw.setColor("#000000");
    return fw
  };
  bn.create = function (fw, fx) {
    fw = r.removeNamespace(fw);
    return bn.createFromXML(aH.parse(fw), fx)
  };
  bn.createFromXML = function (fw, fy) {
    var fx = new cE("");
    r.cleanUpOmmlXML(fw);
    bn.loadNode(fw, fx, 0, fy, null);
    return bB.convToEntities(fx.toString())
  };
  bn.loadNode = function (fA, fB, fw, fz, fy) {
    if (fA == null || fA.localName() == null) {
      return
    }
    var fx = fA.localName().toLowerCase();
    if (fx == "omath") {
      bn.loadMath(fA, fB, fw, fz, fy)
    } else {
      if (fx == "r") {
        bn.loadR(fA, fB, fw, fz, fy)
      } else {
        if (fx == "t") {
          bn.loadMtext(fA, fB, fw, fz, fy)
        } else {
          if (fx == "f") {
            bn.loadMfrac(fA, fB, fw, fz, fy)
          } else {
            if (fx == "rad") {
              bn.loadMSqrt(fA, fB, fw, fz, fy)
            } else {
              if (fx == "ssup") {
                bn.loadMSup(fA, fB, fw, fz, fy)
              } else {
                if (fx == "ssub") {
                  bn.loadMSub(fA, fB, fw, fz, fy)
                } else {
                  if (fx == "ssubsup") {
                    bn.loadMSubsup(fA, fB, fw, fz, fy)
                  } else {
                    if (fx == "spre") {
                      bn.loadMSpre(fA, fB, fw, fz, fy)
                    } else {
                      if (fx == "num" || fx == "den" || fx == "e" || fx == "sup" || fx == "sub") {
                        bn.loadMrow(fA, fB, fw, fz, fy)
                      } else {
                        if (fx == "d") {
                          bn.loadMfenced(fA, fB, fw, fz, fy)
                        } else {
                          if (fx == "func") {
                            bn.loadFunction(fA, fB, fw, fz, fy)
                          } else {
                            if (fx == "nary") {
                              bn.loadNary(fA, fB, fw, fz, fy)
                            } else {
                              if (fx == "bar") {
                                bn.loadBar(fA, fB, fw, fz, fy)
                              } else {
                                if (fx == "limlow") {
                                  bn.loadLimlow(fA, fB, fw, fz, fy)
                                } else {
                                  if (fx == "limupp") {
                                    bn.loadLimUpp(fA, fB, fw, fz, fy)
                                  } else {
                                    if (fx == "acc") {
                                      bn.loadAccent(fA, fB, fw, fz, fy)
                                    } else {
                                      if (fx == "lim") {
                                        bn.loadLim(fA, fB, fw, fz, fy)
                                      } else {
                                        if (fx == "m") {
                                          bn.loadMTable(fA, fB, fw, fz, fy)
                                        } else {
                                          if (fx == "eqarr") {
                                            bn.loadMEqarr(fA, fB, fw, fz, fy)
                                          } else {
                                            if (fx == "mpr") {
                                            } else {
                                              if (fx == "mr") {
                                                bn.loadTableRow(fA, fB, fw, fz, fy)
                                              } else {
                                                if (fx == "groupchr") {
                                                  bn.loadGroupChr(fA, fB, fw, fz, fy)
                                                } else {
                                                  System.out.println("name:" + fx)
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  bn.loadNodeWithDefault = function (fA, fD, fw, fz, fy, fB) {
    var fx = new cE("");
    bn.loadNode(fA, fx, fw, null, fy);
    var fC = fx.toString();
    if (fC.length == 0) {
      fD.append(bn.addTabs(fw) + fB + "\n")
    } else {
      fD.append(fx.toString())
    }
  };
  bn.loadMath = function (fz, fA, fw, fy, fx) {
    fA.append(bn.addTabs(fw) + "<math mathvariant='italic'>\n");
    bn.addChildren(fz, fA, fw + 1, null, fy);
    fA.append(bn.addTabs(fw) + "</math>\n")
  };
  bn.addChildren = function (fA, fB, fw, fz, fy) {
    for (var fx = 0; fx < fA.getChildren().length; fx++) {
      if (fA.getChildren()[fx].localName() != null) {
        bn.loadNode(fA.getChildren()[fx], fB, fw, fz, fy)
      }
    }
  };
  bn.loadLim = function (fA, fC, fw, fy, fx) {
    var fz = fx.getCopy();
    if (fA.getChildren().length > 1) {
      fC.append(bn.addTabs(fw) + "<mrow>\n");
      bn.addChildren(fA, fC, fw + 1, null, fz);
      fC.append(bn.addTabs(fw) + "</mrow>\n")
    } else {
      if (fA.getChildren().length == 1) {
        var fB = fA.getChildren()[0];
        bn.loadNode(fB, fC, fw, fy, fx)
      }
    }
  };
  bn.loadMTable = function (fB, fH, fy, fx, fL) {
    var fD = fL.getCopy();
    var fF = new aT();
    var fG = "center";
    var fz = bn.getChild(fB, "mPr");
    if (fz != null) {
      var fK = bn.getChild(fB, "baseJc");
      if (fK != null) {
        fG = fK.attribute("val")
      }
      var fA = bn.getChild(fz, "mcs");
      if (fA != null) {
        var fJ = bn.getChildren(fA, "mc");
        for (var fE = 0; fE < fJ.size(); fE++) {
          var fI = fJ.get(fE);
          var fC = bn.getChild(fI, "mcPr");
          if (fC != null) {
            var fw = bn.getChild(fC, "mcJc");
            fF.add(fw.attribute("val"))
          }
        }
      }
    }
    fH.append(bn.addTabs(fy) + "<mtable" + bn.addColumnAlignAttribute(fG, fF) + ">\n");
    bn.addChildren(fB, fH, fy + 1, null, fD);
    fH.append(bn.addTabs(fy) + "</mtable>\n")
  };
  bn.loadMEqarr = function (fz, fF, fy, fw, fH) {
    var fD = fH.getCopy();
    var fI = bn.getNumberOfColumns(fz);
    fF.append(bn.addTabs(fy) + "<mtable>\n");
    for (var fE = 0; fE < fz.getChildren().length; fE++) {
      var fx = fz.getChildren()[fE];
      if (fx.localName() == null) {
        continue
      }
      if (fx.localName() == "e") {
        fF.append(bn.addTabs(fy + 1) + "<mtr>\n");
        if (fI > 1) {
          for (var fB = 0; fB < fI; fB++) {
            fF.append(bn.addTabs(fy + 2) + "<mtd" + bn.addAlignColumnInfoForEqarr(fB) + ">\n");
            var fG = bn.getTextForRow(fB, fx);
            bn.processText(fG, fF, fy + 3, fw, fD);
            fF.append(bn.addTabs(fy + 2) + "</mtd>\n")
          }
        } else {
          fF.append(bn.addTabs(fy + 2) + "<mtd>\n");
          for (var fC = 0; fC < fx.children().length; fC++) {
            var fA = fx.children()[fC];
            bn.loadNode(fA, fF, fy + 3, fw, fD)
          }
          fF.append(bn.addTabs(fy + 2) + "</mtd>\n")
        }
        fF.append(bn.addTabs(fy + 1) + "</mtr>\n")
      }
    }
    fF.append(bn.addTabs(fy) + "</mtable>\n")
  };
  bn.addAlignColumnInfoForEqarr = function (fw) {
    if (fw == 0) {
      return " columnalign='right'"
    }
    return " columnalign='left'"
  };
  bn.getTextForRow = function (fy, fx) {
    var fD = "";
    var fw = bn.getChild(fx, "r");
    if (fw != null) {
      var fG = bn.getChild(fw, "t");
      if (fG != null) {
        var fE = fG.children()[0].toString();
        var fz = 0;
        var fA = -1;
        var fC = 0;
        var fH = 0;
        var fB = "";
        var fF = true;
        while ((fA = fE.indexOf("&", fH)) > -1) {
          if (bn.notLeftRightSign(fE, fA)) {
            fE = fE.substring(0, fA) + fE.substring(fA + 1, fE.length);
            fB = fE.substring(fC, fA);
            if (fz == fy) {
              return fB
            }
            if (fF) {
              fC = fA;
              fz++;
              fF = false
            } else {
              fF = true
            }
            fH = fA
          } else {
            fH = fA + 1
          }
        }
        if (fz == fy) {
          fB = fE.substring(fC, fE.length);
          return fB
        }
      }
    }
    return fD
  };
  bn.getNumberOfColumns = function (fB) {
    var fx = 1;
    for (var fz = 0; fz < fB.getChildren().length; fz++) {
      var fD = fB.getChildren()[fz];
      if (fD.localName() == null) {
        continue
      }
      if (fD.localName() == "e") {
        var fA = bn.getChild(fD, "r");
        if (fA != null) {
          var fy = bn.getChild(fA, "t");
          if (fy != null) {
            var fC = fy.children()[0].toString();
            var fw = bn.getNumberOfSeparators(fC);
            fx = Math.max(fx, fw)
          }
        }
      }
    }
    return fx
  };
  bn.getNumberOfSeparators = function (fz) {
    var fx = 1;
    var fw = -1;
    var fy = true;
    while ((fw = fz.indexOf("&", fw)) > -1) {
      if (bn.notLeftRightSign(fz, fw)) {
        if (fy) {
          fx++;
          fy = false
        } else {
          fy = true
        }
      }
      fw = fw + 1
    }
    return fx
  };
  bn.notLeftRightSign = function (fx, fw) {
    if (fx.indexOf("&lt;", fw) == fw) {
      return false
    }
    if (fx.indexOf("&le;", fw) == fw) {
      return false
    }
    if (fx.indexOf("&gt;", fw) == fw) {
      return false
    }
    if (fx.indexOf("&ge;", fw) == fw) {
      return false
    }
    return true
  };
  bn.loadTableRow = function (fz, fE, fy, fw, fF) {
    var fC = fF.getCopy();
    fE.append(bn.addTabs(fy) + "<mtr>\n");
    for (var fD = 0; fD < fz.getChildren().length; fD++) {
      var fx = fz.getChildren()[fD];
      if (fx.localName() != null) {
        fE.append(bn.addTabs(fy + 1) + "<mtd>\n");
        for (var fB = 0; fB < fx.children().length; fB++) {
          var fA = fx.children()[fB];
          bn.loadNode(fA, fE, fy + 2, fw, fC)
        }
        fE.append(bn.addTabs(fy + 1) + "</mtd>\n")
      }
    }
    fE.append(bn.addTabs(fy) + "</mtr>\n")
  };
  bn.addColumnAlignAttribute = function (fw, fz) {
    if (fw == null) {
      fw = "center"
    }
    var fy = false;
    if (fw == "left" || fw == "right") {
      fy = true
    }
    var fC = new cE("");
    for (var fx = 0; fx < fz.size(); fx++) {
      var fB = fz.get(fx);
      fB = fB.toLowerCase();
      if (fB == "left" || fB == "right") {
        fy = true
      }
      fC.append(" " + fB)
    }
    if (!fy) {
      return ""
    }
    var fA = fC.toString();
    fA = fA.trim();
    if ("" == fA) {
      return " columnalign='" + fw + "'"
    }
    return " columnalign='" + fA + "'"
  };
  bn.loadGroupChr = function (fz, fE, fy, fx, fH) {
    var fC = fH.getCopy();
    var fD = "&UnderBrace;";
    var fF = "under";
    var fw = bn.getChild(fz, "groupChrPr");
    if (fw != null) {
      var fB = bn.getChild(fw, "chr");
      if (fB != null) {
        fD = fB.attribute("val")
      }
      var fA = bn.getChild(fw, "pos");
      if (fA != null) {
        fF = fA.attribute("val")
      }
    }
    var fG = bn.getChild(fz, "e");
    if (fF == "top") {
      fE.append(bn.addTabs(fy) + "<mover>\n");
      bn.loadNode(fG, fE, fy + 1, null, fC);
      fE.append(bn.addTabs(fy + 1) + "<mo>" + fD + "</mo>\n");
      fE.append(bn.addTabs(fy) + "</mover>\n")
    } else {
      fE.append(bn.addTabs(fy) + "<munder>\n");
      bn.loadNode(fG, fE, fy + 1, null, fC);
      fE.append(bn.addTabs(fy + 1) + "<mo>" + fD + "</mo>\n");
      fE.append(bn.addTabs(fy) + "</munder>\n")
    }
  };
  bn.loadLimlow = function (fC, fD, fw, fA, fz) {
    var fB = fz.getCopy();
    var fy = bn.getChild(fC, "e");
    var fx = bn.getChild(fC, "lim");
    fD.append(bn.addTabs(fw) + "<munder>\n");
    bn.loadNode(fy, fD, fw + 1, null, fB);
    bn.loadNode(fx, fD, fw + 1, null, fB);
    fD.append(bn.addTabs(fw) + "</munder>\n")
  };
  bn.loadLimUpp = function (fB, fD, fw, fz, fy) {
    var fA = fy.getCopy();
    var fx = bn.getChild(fB, "e");
    var fC = bn.getChild(fB, "lim");
    fD.append(bn.addTabs(fw) + "<mover>\n");
    bn.loadNode(fx, fD, fw + 1, null, fA);
    bn.loadNode(fC, fD, fw + 1, null, fA);
    fD.append(bn.addTabs(fw) + "</mover>\n")
  };
  bn.loadAccent = function (fy, fC, fx, fw, fD) {
    var fA = fD.getCopy();
    var fE = bn.getChild(fy, "e");
    var fB = bn.getChild(fy, "accPr");
    var fF = "&Hat;";
    if (fB != null) {
      var fz = bn.getChild(fB, "chr");
      if (fz != null) {
        fF = fz.attribute("val")
      }
    }
    fC.append(bn.addTabs(fx) + "<mover>\n");
    bn.loadNode(fE, fC, fx + 1, null, fA);
    fC.append(bn.addTabs(fx + 1) + "<mo accent='true'>" + fF + "</mo>\n");
    fC.append(bn.addTabs(fx) + "</mover>\n")
  };
  bn.loadBar = function (fz, fD, fy, fx, fF) {
    var fA = fF.getCopy();
    var fC = true;
    var fw = bn.getChild(fz, "barPr");
    var fB = bn.getChild(fw, "pos");
    if (fB != null) {
      var fG = fB.attribute("val");
      fC = "top" == fG
    }
    var fE = bn.getChild(fz, "e");
    if (fC) {
      fD.append(bn.addTabs(fy) + "<mover>\n")
    } else {
      fD.append(bn.addTabs(fy) + "<munder>\n")
    }
    bn.loadNode(fE, fD, fy + 1, null, fA);
    fD.append(bn.addTabs(fy + 1) + "<mo accent='true'>&macr;</mo>\n");
    if (fC) {
      fD.append(bn.addTabs(fy) + "</mover>\n")
    } else {
      fD.append(bn.addTabs(fy) + "</munder>\n")
    }
  };
  bn.loadNary = function (fM, fA, fE, fR, fK) {
    var fJ = fK.getCopy();
    var fT = false;
    var fy = false;
    var fP = false;
    var fD = bn.getChild(fM, "naryPr");
    var fG = bn.getChild(fD, "chr");
    var fF = "&int;";
    if (fG != null) {
      fF = fG.attribute("val")
    }
    var fx = bn.getChild(fD, "limLoc");
    if (fx != null) {
      fT = fx.attribute("val") == "subSup"
    }
    var fO = bn.getChild(fD, "supHide");
    if (fO != null) {
      var fU = fO.attribute("val");
      if (fU != null) {
        fP = fU == "on"
      }
    }
    var fC = bn.getChild(fD, "subHide");
    if (fC != null) {
      var fU = fC.attribute("val");
      if (fU != null) {
        fy = fU == "on"
      }
    }
    var fS = bn.getChild(fM, "e");
    var fH = bn.getChild(fM, "sub");
    var fz = bn.getChild(fM, "sup");
    var fB = new cE("");
    bn.loadNode(fS, fB, fE + 1, null, fJ);
    var fw = false;
    var fL = fB.toString();
    fL = fu.trim(fL);
    fw = !(fL == "");
    if (fw) {
      var fI = fM.parent();
      if (fI != null) {
        var fN = fI.localName().toLowerCase();
        if ("omath" == fN) {
          fw = false
        }
      }
    }
    var fQ = 0;
    if (fw) {
      fA.append(bn.addTabs(fE) + "<mrow>\n");
      fQ = 1
    }
    if (fy && fP) {
      fA.append(bn.addTabs(fE + fQ) + "<mo>" + fF + "</mo>\n")
    } else {
      fA.append(bn.addTabs(fE + fQ) + "<" + bn.getTagSubSup(fT, fy, fP) + ">\n");
      fA.append(bn.addTabs(fE + fQ + 1) + "<mo>" + fF + "</mo>\n");
      if (!fy) {
        bn.loadNode(fH, fA, fE + fQ + 1, null, fJ)
      }
      if (!fy) {
        bn.loadNode(fz, fA, fE + fQ + 1, null, fJ)
      }
      fA.append(bn.addTabs(fE + fQ) + "</" + bn.getTagSubSup(fT, fy, fP) + ">\n")
    }
    bn.loadNode(fS, fA, fE + fQ, null, fJ);
    if (fw) {
      fA.append(bn.addTabs(fE) + "</mrow>\n")
    }
  };
  bn.getTagSubSup = function (fw, fy, fx) {
    if (fw) {
      if (!fy && !fx) {
        return "msubsup"
      }
      if (fy) {
        return "msup"
      }
      if (fx) {
        return "msub"
      }
    } else {
      if (!fy && !fx) {
        return "munderover"
      }
      if (fy) {
        return "mover"
      }
      if (fx) {
        return "munder"
      }
    }
    return ""
  };
  bn.loadR = function (fB, fD, fw, fz, fy) {
    var fA = fy.getCopy();
    var fx = bn.getChild(fB, "rPr");
    if (fx != null) {
      bn.loadStyleFromRunNode(fx, fA)
    }
    var fC = bn.getChildExcept(fB, "rPr");
    bn.loadNode(fC, fD, fw, fA, fy)
  };
  bn.loadStyleFromRunNode = function (fw, fx) {
    var fz = bn.getChild(fw, "sty");
    var fA = bn.getChild(fw, "scr");
    if (fA != null) {
      var fy = fA.attribute("val");
      if (fy == "monospace") {
        fx.setMathvariant("monospace")
      } else {
        if (fy == "sans-serif") {
          fx.setMathvariant("sans-serif")
        } else {
          if (fy == "double-struck") {
            fx.setMathvariant("double-struck")
          } else {
            if (fy == "script") {
              fx.setMathvariant("script")
            } else {
              if (fy == "fraktur") {
                fx.setMathvariant("fraktur")
              } else {
                if (fy == "roman") {
                  fx.setMathvariant("normal")
                }
              }
            }
          }
        }
      }
    }
    if (fz != null) {
      var fy = fz.attribute("val");
      if (fy == "p") {
        fx.setItalic(false);
        fx.setBold(false)
      } else {
        if (fy == "i") {
          fx.setItalic(true);
          fx.setBold(false)
        } else {
          if (fy == "b") {
            fx.setItalic(false);
            fx.setBold(true)
          } else {
            if (fy == "bi") {
              fx.setItalic(true);
              fx.setBold(true)
            }
          }
        }
      }
    }
  };
  bn.loadMrow = function (fB, fC, fw, fz, fy) {
    var fA = fy.getCopy();
    if (fB.getChildren().length > 1) {
      fC.append(bn.addTabs(fw) + "<mrow>\n");
      bn.addChildren(fB, fC, fw + 1, null, fA);
      fC.append(bn.addTabs(fw) + "</mrow>\n")
    } else {
      if (fB.getChildren().length == 1) {
        bn.addChildren(fB, fC, fw, null, fA)
      } else {
        var fx = fB.parent();
        if (fx != null) {
          if ("sSub" == fx.localName() || "sSup" == fx.localName()) {
            fC.append(bn.addTabs(fw) + "<mrow />\n")
          }
        }
      }
    }
  };
  bn.loadMfrac = function (fz, fD, fy, fx, fG) {
    var fA = fG.getCopy();
    var fw = bn.getChild(fz, "fPr");
    var fF = "bar";
    if (fw != null) {
      var fC = bn.getChild(fw, "type");
      if (fC != null) {
        fF = fC.attribute("val")
      }
    }
    var fB = bn.getChild(fz, "num");
    var fE = bn.getChild(fz, "den");
    fD.append(bn.addTabs(fy) + "<mfrac" + bn.insertFractionType(fF) + ">\n");
    bn.loadNode(fB, fD, fy + 1, null, fA);
    bn.loadNode(fE, fD, fy + 1, null, fA);
    fD.append(bn.addTabs(fy) + "</mfrac>\n")
  };
  bn.insertFractionType = function (fw) {
    if (fw == null) {
      return ""
    }
    if ("lin" == fw || "skw" == fw) {
      return " bevelled='true'"
    }
    if ("noBar" == fw) {
      return " linethickness='0'"
    }
    return ""
  };
  bn.loadMSqrt = function (fA, fD, fz, fw, fE) {
    var fB = fE.getCopy();
    var fx = bn.getChild(fA, "e");
    var fy = bn.getChild(fA, "deg");
    var fC = null;
    if (fy != null) {
      fC = bn.getChild(fy, "r")
    }
    if (fC != null) {
      fD.append(bn.addTabs(fz) + "<mroot>\n");
      bn.addChildren(fx, fD, fz + 1, null, fB);
      bn.loadNodeWithDefault(fC, fD, fz + 1, null, fB, "<mrow />");
      fD.append(bn.addTabs(fz) + "</mroot>\n")
    } else {
      fD.append(bn.addTabs(fz) + "<msqrt>\n");
      bn.addChildren(fx, fD, fz + 1, null, fB);
      fD.append(bn.addTabs(fz) + "</msqrt>\n")
    }
  };
  bn.loadMSup = function (fC, fD, fw, fA, fz) {
    var fB = fz.getCopy();
    var fy = bn.getChild(fC, "e");
    var fx = bn.getChild(fC, "sup");
    fD.append(bn.addTabs(fw) + "<msup>\n");
    bn.loadNodeWithDefault(fy, fD, fw + 1, null, fB, "<mrow />");
    bn.loadNodeWithDefault(fx, fD, fw + 1, null, fB, "<mrow />");
    fD.append(bn.addTabs(fw) + "</msup>\n")
  };
  bn.loadMSub = function (fC, fD, fw, fA, fz) {
    var fB = fz.getCopy();
    var fy = bn.getChild(fC, "e");
    var fx = bn.getChild(fC, "sub");
    fD.append(bn.addTabs(fw) + "<msub>\n");
    bn.loadNodeWithDefault(fy, fD, fw + 1, null, fB, "<mrow />");
    bn.loadNodeWithDefault(fx, fD, fw + 1, null, fB, "<mrow />");
    fD.append(bn.addTabs(fw) + "</msub>\n")
  };
  bn.loadMSubsup = function (fz, fC, fy, fx, fD) {
    var fA = fD.getCopy();
    fC.append(bn.addTabs(fy) + "<msubsup>\n");
    var fE = bn.getChild(fz, "e");
    var fw = bn.getChild(fz, "sub");
    var fB = bn.getChild(fz, "sup");
    bn.loadNodeWithDefault(fE, fC, fy + 1, null, fA, "<mrow />");
    bn.loadNodeWithDefault(fw, fC, fy + 1, null, fA, "<mrow />");
    bn.loadNodeWithDefault(fB, fC, fy + 1, null, fA, "<mrow />");
    fC.append(bn.addTabs(fy) + "</msubsup>\n")
  };
  bn.loadMSpre = function (fz, fC, fy, fx, fD) {
    var fA = fD.getCopy();
    fC.append(bn.addTabs(fy) + "<mmultiscripts>\n");
    var fE = bn.getChild(fz, "e");
    var fw = bn.getChild(fz, "sub");
    var fB = bn.getChild(fz, "sup");
    bn.loadNodeWithDefault(fE, fC, fy + 1, null, fA, "<mrow />");
    fC.append(bn.addTabs(fy + 1) + "<mprescripts/>\n");
    bn.loadNodeWithDefault(fw, fC, fy + 1, null, fA, "<mrow />");
    bn.loadNodeWithDefault(fB, fC, fy + 1, null, fA, "<mrow />");
    fC.append(bn.addTabs(fy) + "</mmultiscripts>\n")
  };
  bn.loadMfenced = function (fA, fF, fz, fx, fH) {
    var fB = fH.getCopy();
    var fw = "(";
    var fM = ")";
    var fK = "|";
    var fJ = bn.getChild(fA, "dPr");
    if (fJ != null) {
      var fI = bn.getChild(fJ, "begChr");
      var fD = bn.getChild(fJ, "endChr");
      var fG = bn.getChild(fJ, "sepChr");
      if (fI != null) {
        fw = fI.attribute("val")
      }
      if (fD != null) {
        fM = fD.attribute("val")
      }
      if (fG != null) {
        fK = fG.attribute("val")
      }
      fw = fu.trim(fw);
      fM = fu.trim(fM)
    }
    var fE = bn.getChildren(fA, "e");
    if (fE != null && fE.size() > 0) {
      var fL = "";
      if (fE.size() > 1) {
        fL = " separators='" + fK + "'"
      }
      fF.append(bn.addTabs(fz) + "<mfenced open='" + fw + "' close='" + fM + "'" + fL + ">\n");
      for (var fC = 0; fC < fE.size(); fC++) {
        var fy = fE.get(fC);
        bn.loadNode(fy, fF, fz + 1, null, fB)
      }
      fF.append(bn.addTabs(fz) + "</mfenced>\n")
    }
  };
  bn.loadFunction = function (fB, fD, fw, fz, fy) {
    var fA = fy.getCopy();
    var fC = bn.getChild(fB, "fName");
    var fx = bn.getChild(fB, "e");
    fD.append(bn.addTabs(fw) + "<mrow>\n");
    bn.addChildren(fC, fD, fw + 1, null, fA);
    if (fx != null) {
      bn.addChildren(fx, fD, fw + 1, null, fA)
    }
    fD.append(bn.addTabs(fw) + "</mrow>\n")
  };
  bn.getChild = function (fy, fw) {
    for (var fx = 0; fx < fy.getChildren().length; fx++) {
      var fz = fy.getChildren()[fx];
      if (fz.localName() != null && fz.localName() == fw) {
        return fz
      }
    }
    return null
  };
  bn.getChildExcept = function (fy, fw) {
    for (var fx = 0; fx < fy.getChildren().length; fx++) {
      var fz = fy.getChildren()[fx];
      if (fz.localName() != null && !(fz.localName() == fw)) {
        return fz
      }
    }
    return null
  };
  bn.getChildren = function (fy, fw) {
    var fA = new aT();
    for (var fx = 0; fx < fy.getChildren().length; fx++) {
      var fz = fy.getChildren()[fx];
      if (fz.localName() != null && fz.localName() == fw) {
        fA.add(fz)
      }
    }
    return fA
  };
  bn.loadMtext = function (fz, fC, fy, fx, fF) {
    var fD = false;
    var fB = fz.attribute("space");
    if (fB != null && "preserve" == fB) {
      fD = true
    }
    if (fz.getChildren().length == 0) {
      return
    }
    var fG = fz.getChildren()[0].toString();
    if (fG == null || fG.length == 0) {
      return
    }
    if (fD) {
      fG = fu.xmlescape(fG);
      fG = fu.preserveSpace(fG);
      fC.append(bn.addTabs(fy) + "<mtext" + bn.addStyleInfo(fx, fF) + ">" + fG + "</mtext>\n");
      return
    }
    var fw = bn.splitTextByOperators(fG);
    if (fw.size() == 1) {
      var fE = fw.get(0);
      bn.processText(fE, fC, fy, fx, fF)
    } else {
      fC.append(bn.addTabs(fy) + "<mrow>\n");
      for (var fA = 0; fA < fw.size(); fA++) {
        var fE = fw.get(fA);
        bn.processText(fE, fC, fy + 1, fx, fF)
      }
      fC.append(bn.addTabs(fy) + "</mrow>\n")
    }
  };
  bn.splitTextByOperators = function (fy) {
    if (bI == null) {
      bI = e8.getAllOperators().split(";")
    }
    var fx = new aT();
    fx.add(fy);
    for (var fw = 0; fw < bI.length; fw++) {
      if ("." == bI[fw]) {
        continue
      }
      bn.verifyReplaceOp(fx, bI[fw])
    }
    return fx
  };
  bn.verifyReplaceOp = function (fz, fB) {
    if (fB.length == 0) {
      return
    }
    for (var fx = 0; fx < fz.size(); fx++) {
      var fA = fz.get(fx);
      if ("&" == fB && fA.indexOf("&") == 0 && fA.indexOf(";") == (fA.length - 1)) {
        continue
      }
      fz.remove(fx);
      var fw = fA.indexOf(fB);
      while (fw > -1) {
        var fy = fA.substring(0, fw);
        if (fy.length > 0) {
          fz.addTo(fx, fy);
          fx++
        }
        fz.addTo(fx, fB);
        fx++;
        fA = fA.substring(fw + fB.length, fA.length);
        fw = fA.indexOf(fB)
      }
      if (fA.length > 0) {
        fz.addTo(fx, fA)
      }
    }
  };
  bn.processText = function (fA, fB, fw, fz, fy) {
    fA = fu.xmlescape(fA);
    fA = fA.trim();
    if (fA.length == 0) {
      return
    }
    fA = bn.replaceAllUTFChars(fA);
    var fx = bn.addStyleInfo(fz, fy);
    if (fA == "&thinsp;") {
      return
    } else {
      if (ej.stringIsNumber(fA)) {
        fB.append(bn.addTabs(fw) + "<mn" + bn.addStyleInfo(fz, fy) + ">" + fA + "</mn>\n")
      } else {
        if (bn.isOperator(fA)) {
          if (e8.getStyleForOperator(fA).isFence()) {
            fB.append(bn.addTabs(fw) + "<mo" + bn.addStyleInfo(fz, fy) + bn.addAccentInfo(fA) + " stretchy='false'>" + fA + "</mo>\n")
          } else {
            fB.append(bn.addTabs(fw) + "<mo" + bn.addStyleInfo(fz, fy) + ">" + fA + "</mo>\n")
          }
        } else {
          if (fA.length == 1 && (fA.charCodeAt(0)) > 127) {
            fB.append(bn.addTabs(fw) + "<mo" + bn.addStyleInfo(fz, fy) + bn.addAccentInfo(fA) + ">" + fA + "</mo>\n")
          } else {
            if ("" == fx) {
              fB.append(bn.addTabs(fw) + "<mi" + bn.addStyleInfo(fz, fy) + ">" + fA + "</mi>\n")
            } else {
              fB.append(bn.addTabs(fw) + "<mtext" + bn.addStyleInfo(fz, fy) + ">" + fA + "</mtext>\n")
            }
          }
        }
      }
    }
  };
  bn.addStyleInfo = function (fx, fw) {
    if (fx == null || fx.getMathvariant() == null) {
      return ""
    }
    if (fx.getMathvariant() == fw.getMathvariant()) {
      return ""
    }
    return " mathvariant='" + fx.getMathvariant() + "'"
  };
  bn.addAccentInfo = function (fx) {
    if (fx.length > 1) {
      fx = bB.changeCharForCode(fx)
    }
    var fw = false;
    if (!fw) {
      return ""
    }
    return " accent='true'"
  };
  bn.addTabs = function (fy) {
    var fx = new cE("");
    for (var fw = 0; fw < fy; fw++) {
      fx.append("    ")
    }
    return fx.toString()
  };
  bn.isOperator = function (fx) {
    if (fx.length == 0) {
      return false
    }
    if (fx.substring(0, 1) == "&" && fx.substring(fx.length - 1, fx.length) == ";") {
      return true
    }
    if (fx == ",") {
      return true
    }
    if (fx == "/") {
      return true
    }
    for (var fw = 0; fw < bI.length; fw++) {
      if (bI[fw] == fx) {
        return true
      }
    }
    return false
  };
  function U() {
    this._namespace = "m:";
    this.namespaceUrl = "";
    this.parentMrow = false;
    this.parentStyle
  }
  
  U.prototype.getNamespace = function () {
    return this._namespace
  };
  U.prototype.setNamespace = function (fw) {
    this._namespace = fw
  };
  U.prototype.getNamespaceUrl = function () {
    return this.namespaceUrl
  };
  U.prototype.setNamespaceUrl = function (fw) {
    this.namespaceUrl = fw
  };
  U.prototype.getParentStyle = function () {
    return this.parentStyle
  };
  U.prototype.setParentStyle = function (fw) {
    this.parentStyle = fw
  };
  U.prototype.isParentMrow = function () {
    return this.parentMrow
  };
  U.prototype.setParentMrow = function (fw) {
    this.parentMrow = fw
  };
  function fg() {
    this.mathMode = false;
    this.latexStyle = new bQ()
  }
  
  fg.prototype.isMathMode = function () {
    return this.mathMode
  };
  fg.prototype.setMathMode = function (fw) {
    this.mathMode = fw
  };
  fg.prototype.getLatexStyle = function () {
    return this.latexStyle
  };
  fg.prototype.clone = function () {
    var fw = new fg();
    fw.setMathMode(this.mathMode);
    fw.getLatexStyle().copyAllFrom(this.latexStyle);
    return fw
  };
  function eS() {
  }
  
  eS.process = function (fS, fD) {
    var fH = fD.clone();
    if (fS instanceof fi) {
      var f6 = new ah();
      return f6.processToLatex(fS, fH)
    } else {
      if (fS instanceof b3) {
        var f4 = new ee();
        return f4.processToLatex(fS, fH)
      } else {
        if (fS instanceof cW) {
          var f2 = new bX();
          return f2.processToLatex(fS, fH)
        } else {
          if (fS instanceof fk) {
            var f0 = new cD();
            return f0.processToLatex(fS, fH)
          } else {
            if (fS instanceof dh) {
              var fY = new ck();
              return fY.processToLatex(fS, fH)
            } else {
              if (fS instanceof bv) {
                var fW = new d0();
                return fW.processToLatex(fS, fH)
              } else {
                if (fS instanceof aN) {
                  var fV = new fb();
                  return fV.processToLatex(fS, fH)
                } else {
                  if (fS instanceof A) {
                    var fU = new c8();
                    return fU.processToLatex(fS, fH)
                  } else {
                    if (fS instanceof cf) {
                      var fT = new cX();
                      return fT.processToLatex(fS, fH)
                    } else {
                      if (fS instanceof cF) {
                        var gb = new X();
                        return gb.processToLatex(fS, fH)
                      } else {
                        if (fS instanceof cl) {
                          var ga = new eL();
                          return ga.processToLatex(fS, fH)
                        } else {
                          if (fS instanceof aF) {
                            var f9 = new df();
                            return f9.processToLatex(fS, fH)
                          } else {
                            if (fS instanceof eO) {
                              var f8 = new bO();
                              return f8.processToLatex(fS, fH)
                            } else {
                              if (fS instanceof ft) {
                                var f7 = new i();
                                return f7.processToLatex(fS, fH)
                              } else {
                                if (fS instanceof ey) {
                                  var f5 = new ei();
                                  return f5.processToLatex(fS, fH)
                                } else {
                                  if (fS instanceof bt) {
                                    var f3 = new aq();
                                    return f3.processToLatex(fS, fH)
                                  } else {
                                    if (fS instanceof d6) {
                                      var f1 = new e();
                                      return f1.processToLatex(fS, fH)
                                    } else {
                                      if (fS instanceof u) {
                                        var fZ = new eL();
                                        return fZ.processToLatex(fS, fH)
                                      } else {
                                        if (fS instanceof aI) {
                                          var fX = new cg();
                                          return fX.processToLatex(fS, fH)
                                        } else {
                                          if (fS instanceof g) {
                                            var fR = new eL();
                                            return fR.processToLatex(fS, fH)
                                          } else {
                                            if (fS instanceof e3) {
                                              var fQ = new cN();
                                              return fQ.processToLatex(fS, fH)
                                            } else {
                                              if (fS instanceof b3) {
                                                var fP = new ee();
                                                return fP.processToLatex(fS, fH)
                                              } else {
                                                if (fS instanceof an) {
                                                  var fO = new de();
                                                  return fO.processToLatex(fS, fH)
                                                } else {
                                                  if (fS instanceof ac) {
                                                    var fN = new aj();
                                                    return fN.processToLatex(fS, fH)
                                                  } else {
                                                    if (fS instanceof eY) {
                                                      var fM = new cU();
                                                      return fM.processToLatex(fS, fH)
                                                    } else {
                                                      if (fS instanceof cO) {
                                                        var fL = new ep();
                                                        return fL.processToLatex(fS, fH)
                                                      } else {
                                                        if (fS instanceof c2) {
                                                          var fK = new I();
                                                          return fK.processToLatex(fS, fH)
                                                        } else {
                                                          if (fS instanceof ay) {
                                                            var fJ = new dR();
                                                            return fJ.processToLatex(fS, fH)
                                                          } else {
                                                            if (fS instanceof j) {
                                                              var fI = new fp();
                                                              return fI.processToLatex(fS, fH)
                                                            } else {
                                                              if (fS instanceof ct) {
                                                                var fG = new aW();
                                                                return fG.processToLatex(fS, fH)
                                                              } else {
                                                                if (fS instanceof ea) {
                                                                  var fF = new aO();
                                                                  return fF.processToLatex(fS, fH)
                                                                } else {
                                                                  if (fS instanceof au) {
                                                                    var fE = new d8();
                                                                    return fE.processToLatex(fS, fH)
                                                                  } else {
                                                                    if (fS instanceof ce) {
                                                                      var fC = new eL();
                                                                      return fC.processToLatex(fS, fH)
                                                                    } else {
                                                                      if (fS instanceof bF) {
                                                                        var fB = new aV();
                                                                        return fB.processToLatex(fS, fH)
                                                                      } else {
                                                                        if (fS instanceof bH) {
                                                                          var fA = new cq();
                                                                          return fA.processToLatex(fS, fH)
                                                                        } else {
                                                                          if (fS instanceof bR) {
                                                                            var fz = new a4();
                                                                            return fz.processToLatex(fS, fH)
                                                                          } else {
                                                                            if (fS instanceof bL) {
                                                                              var fy = new eL();
                                                                              return fy.processToLatex(fS, fH)
                                                                            } else {
                                                                              if (fS instanceof b1) {
                                                                                var fx = new eL();
                                                                                return fx.processToLatex(fS, fH)
                                                                              } else {
                                                                                if (fS instanceof av) {
                                                                                  var fw = new eL();
                                                                                  return fw.processToLatex(fS, fH)
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return ""
  };
  eS.processChildren = function (fw, fz) {
    var fD = new cE("");
    var fy = fw.getChildren();
    if (fy != null) {
      for (var fx = 0; fx < fy.size(); fx++) {
        var fC = fy.get(fx);
        var fA = eS.process(fC, fz);
        if (fD.toString().length > 0) {
          var fB = fD.toString();
          if (fB.lastIndexOf(" ") == (fB.length - 1)) {
            fA = fu.trimLeft(fA)
          }
        }
        fD.append(fA)
      }
    }
    return fD.toString()
  };
  eS.addParanthesisExceptOne = function (fw) {
    if (fw == null) {
      return "{}"
    }
    if (fw.length == 1) {
      return fw
    }
    if (fw.indexOf("\\") == 0) {
      return fw
    }
    return "{" + fw + "}"
  };
  eS.addParanthesifNone = function (fw) {
    if (fw == null) {
      return "{}"
    }
    if (fw.indexOf("{") == 0 && fw.lastIndexOf("}") == (fw.length - 1)) {
      return fw
    }
    return "{" + fw + "}"
  };
  function cd() {
  }
  
  cd.processPanels = function (fx) {
    cd.buildBackgroundShapes(fx);
    var fz = fx.getBgShapeList();
    if (fx instanceof dp) {
      var fy = fx.getBean();
      if (fy.getStyle().isDrawMaxwidthline()) {
        var fA = cT.getLength(fy.getMaxwidth(), fx.getBean().getStyle().getMathsize());
        var fw = new cJ();
        fw.setAntialias(false);
        fw.setLinethickness(1);
        fw.setBorderColor(new N("FF0000", "red"));
        fw.setX(fA);
        fw.setY(0);
        fw.setEndX(fA);
        fw.setEndY(fx.getHeight() - 1);
        fz.addTo(0, fw)
      }
    }
  };
  cd.buildBackgroundShapes = function (fx) {
    var fD = true;
    if (fx instanceof bh) {
      fD = false
    }
    if (fD) {
      var fK = fx.getBean();
      var fy = fK.getCssstyle();
      fx.getBgShapeList().clear();
      var fG = fx.getBgShapeList();
      if (fK.getStyle().isDrawBaseline() && fx.getBaseline() > F) {
        var fz = new cJ();
        fz.setAntialias(false);
        fz.setLinethickness(1);
        fz.setBorderColor(new N("FF0000", "red"));
        fz.setX(0);
        fz.setY(fx.getBaseline());
        fz.setEndX(fx.getWidth() - 1);
        fz.setEndY(fx.getBaseline());
        fG.addTo(0, fz)
      }
      if (fK.getStyle().isDrawSuperscriptline() && fx.getSuperscriptline() > F) {
        var fA = new cJ();
        fA.setAntialias(false);
        fA.setLinethickness(1);
        fA.setBorderColor(new N("0000FF", "blue"));
        fA.setX(0);
        fA.setY(fx.getSuperscriptline());
        fA.setEndX(fx.getWidth() - 1);
        fA.setEndY(fx.getSuperscriptline());
        fG.addTo(0, fA)
      }
      if (fK.getStyle().isDrawAxisline() && fx.getAxis() > F) {
        var fz = new cJ();
        fz.setAntialias(false);
        fz.setLinethickness(1);
        fz.setBorderColor(new N("00FF00", "green"));
        fz.setX(0);
        fz.setY(fx.getAxis());
        fz.setEndX(fx.getWidth() - 1);
        fz.setEndY(fx.getAxis());
        fG.addTo(0, fz)
      }
      if (fx.getBorder_width_top() > 0) {
        var fz = new cJ();
        var fC = fx.getBorder_width_top();
        var fH = fC / 2;
        var fM = 0;
        if (fC > ej.getMinLimitLine()) {
          fM = 1
        }
        fz.setAntialias(false);
        fz.setLinethickness(fC);
        fz.setBorderColor(fy.getBorder_color_top());
        fz.setType(fy.getBorder_style_top());
        fz.setX(fx.getMargin_left());
        fz.setY(fx.getMargin_top() + fH);
        fz.setEndX(fx.getWidth() - 1 - fx.getMargin_right() + fM);
        fz.setEndY(fx.getMargin_top() + fH);
        fG.addTo(0, fz)
      }
      if (fx.getBorder_width_left() > 0) {
        var fz = new cJ();
        var fC = fx.getBorder_width_left();
        var fI = fC / 2;
        var fL = 0;
        if (fC > ej.getMinLimitLine()) {
          fL = 1
        }
        fz.setAntialias(false);
        fz.setLinethickness(fC);
        fz.setBorderColor(fy.getBorder_color_left());
        fz.setType(fy.getBorder_style_left());
        fz.setX(fx.getMargin_left() + fI);
        fz.setY(fx.getMargin_top());
        fz.setEndX(fx.getMargin_left() + fI);
        fz.setEndY(fx.getHeight() - 1 - fx.getMargin_bottom() + fL);
        fG.addTo(0, fz)
      }
      if (fx.getBorder_width_bottom() > 0) {
        var fz = new cJ();
        var fC = fx.getBorder_width_bottom();
        var fH = fC / 2;
        fH = fH - ej.addPixel(fC);
        var fM = 0;
        if (fC > ej.getMinLimitLine()) {
          fM = 1
        }
        fz.setAntialias(false);
        fz.setLinethickness(fC);
        fz.setBorderColor(fy.getBorder_color_bottom());
        fz.setType(fy.getBorder_style_bottom());
        fz.setX(fx.getMargin_left());
        fz.setY(fx.getHeight() - 1 - fx.getMargin_bottom() - fH);
        fz.setEndX(fx.getWidth() - 1 - fx.getMargin_right() + fM);
        fz.setEndY(fx.getHeight() - 1 - fx.getMargin_bottom() - fH);
        fG.addTo(0, fz)
      }
      if (fx.getBorder_width_right() > 0) {
        var fz = new cJ();
        var fC = fx.getBorder_width_right();
        var fI = fC / 2;
        fI = fI - ej.addPixel(fC);
        var fL = 0;
        if (fC > ej.getMinLimitLine()) {
          fL = 1
        }
        fz.setAntialias(false);
        fz.setLinethickness(fC);
        fz.setBorderColor(fy.getBorder_color_right());
        fz.setType(fy.getBorder_style_right());
        fz.setX(fx.getWidth() - 1 - fx.getMargin_right() - fI);
        fz.setY(fx.getMargin_top());
        fz.setEndX(fx.getWidth() - 1 - fx.getMargin_right() - fI);
        fz.setEndY(fx.getHeight() - 1 - fx.getMargin_bottom() + fL);
        fG.addTo(0, fz)
      }
      if (fK.getStyle().getBgcolor() != null) {
        var fB = aw.getColor(fK.getStyle().getBgcolor(), 16777215);
        var fw = new ec();
        fw.setLinethickness(0);
        fw.setFill(true);
        fw.setFillColor(fB);
        fw.setX(fx.getMargin_left());
        fw.setY(fx.getMargin_top());
        fw.setWidth(fx.getWidth() - fx.getMargin_right() - fx.getMargin_left());
        fw.setHeight(fx.getHeight() - fx.getMargin_bottom() - fx.getMargin_top());
        fG.addTo(0, fw)
      }
    }
    var fF = fx.getContenu();
    for (var fE = 0; fE < fF.getPanelChildren().size(); fE++) {
      var fJ = fF.getPanelChildren().get(fE);
      cd.buildBackgroundShapes(fJ)
    }
  };
  function bD() {
  }
  
  bD.processForm = function (fw) {
    var fA = fw.getContenu();
    var fE = bD.countPanelsNoSpaces(fw);
    if (fE == 0) {
      return
    }
    if (fE == 1) {
      var fx = fA.getPanelChildren().get(0);
      if (fx instanceof eF || fx instanceof eB || fx instanceof eN || fx instanceof dZ || fx instanceof d9 || fx instanceof e5) {
        bD.setPostfix(fx)
      } else {
        bD.setInfix(fx)
      }
    } else {
      if (fE > 1) {
        var fz = null;
        for (var fy = 0; fy < fA.getPanelChildren().size(); fy++) {
          var fx = fA.getPanelChildren().get(fy);
          if (!bD.isSpaceLikePanel(fx)) {
            bD.setPrefix(fx);
            fz = fx;
            break
          }
        }
        var fD = null;
        for (var fy = fA.getPanelChildren().size(); fy > 0; fy--) {
          var fx = fA.getPanelChildren().get(fA.getPanelChildren().size() - 1);
          if (!bD.isSpaceLikePanel(fx)) {
            bD.setPostfix(fx);
            fD = fx;
            break
          }
        }
        for (var fy = 0; fy < fA.getPanelChildren().size(); fy++) {
          var fx = fA.getPanelChildren().get(fy);
          if (fx == fz || fx == fD) {
            continue
          }
          if (!bD.isSpaceLikePanel(fx)) {
            bD.setInfix(fx)
          }
        }
      }
    }
    if (fw instanceof bz) {
      var fB = fA.getPanelChildren().get(0);
      for (var fy = 1; fy < fA.getPanelChildren().size(); fy++) {
        var fC = fA.getPanelChildren().get(fy);
        bD.makeSameSpaceForOperator(fC, fB);
        fB = fC
      }
    }
  };
  bD.makeSameSpaceForOperator = function (fF, fE) {
    var fx = fF.getContenu().getPanelChildren();
    var fD = fE.getContenu().getPanelChildren();
    var fy = fx.get(0);
    if (fy instanceof e9) {
      var fC = fy;
      var fz = fF.getBean();
      var fA = null;
      if ("id" == fz.getIndentalign()) {
        fA = fF.getRootPanel().getPanelWithId(fz.getIndenttarget())
      } else {
        if (fD.size() > 0) {
          var fw = fD.get(0);
          if (fw instanceof e9) {
            fA = fw
          }
        }
      }
      if (fA instanceof e9) {
        var fB = fA;
        fC.setLspace(fB.getLspace());
        fC.setRspace(fB.getRspace())
      } else {
        if ("rtl" == fF.getDir()) {
          fC.setRspace(0)
        } else {
          fC.setLspace(0)
        }
      }
    }
  };
  bD.countPanelsNoSpaces = function (fw) {
    var fz = fw.getContenu();
    var fy = 0;
    for (var fx = 0; fx < fz.getPanelChildren().size(); fx++) {
      var fA = fz.getPanelChildren().get(fx);
      if (bD.isSpaceLikePanel(fA)) {
        continue
      }
      fy++
    }
    return fy
  };
  bD.isSpaceLikePanel = function (fw) {
    if (fw instanceof k) {
      return true
    }
    if (fw instanceof bz || fw instanceof ae) {
      return bD.countPanelsNoSpaces(fw) == 0
    }
    return false
  };
  bD.setInfix = function (fw) {
    bD.setForm(fw, "infix")
  };
  bD.setPostfix = function (fw) {
    bD.setForm(fw, "postfix")
  };
  bD.setPrefix = function (fw) {
    bD.setForm(fw, "prefix")
  };
  bD.setForm = function (fw, fB) {
    var fA = fw.getContenu();
    if (fw instanceof e9) {
      var fx = fw;
      var fC = fx.getBean();
      if (fC.getForm() != null) {
        fB = fC.getForm()
      }
      fC.getOperatorStyle().setForm(fB)
    } else {
      if (fw instanceof O) {
        return
      }
    }
    var fz = bD.countPanelsNoSpaces(fw);
    if (fz == 1) {
      for (var fy = 0; fy < fA.getPanelChildren().size(); fy++) {
        var fD = fA.getPanelChildren().get(fy);
        if (!bD.isSpaceLikePanel(fD)) {
          bD.setForm(fD, fB);
          break
        }
      }
    } else {
      bD.processForm(fw)
    }
  };
  function eG() {
  }
  
  eG.getFontInfoForChar = function (fx, fz, fB) {
    var fA = "";
    var fy = eG.getFamily(fx);
    if (fy == null) {
      throw new RuntimeException("No configuration for family:" + fx)
    }
    var fw = eG.getMathMLFontForFamily(fy, fz, fB);
    if (fw != null) {
      return fw
    }
    fA = "," + fy.getFamilyName() + ",";
    if (!(fx == d)) {
      fy = eG.getFamily(d);
      fw = eG.getMathMLFontForFamily(fy, fz, fB);
      if (fw != null) {
        return fw
      }
      fA = fA + fy.getFamilyName() + ","
    }
    if (dA) {
      fy = eG.getNextFamily(fA);
      while (fy != null) {
        fA = fA + fy.getFamilyName() + ",";
        fw = eG.getMathMLFontForFamily(fy, fz, fB);
        if (fw != null) {
          return fw
        }
        fy = eG.getNextFamily(fA)
      }
    }
    return null
  };
  eG.getNextFamily = function (fy) {
    var fx = fs.split(",");
    for (var fw = 0; fw < fx.length; fw++) {
      if (fy.indexOf("," + fx[fw] + ",") == -1) {
        return eG.getFamily(fx[fw])
      }
    }
    return null
  };
  eG.getMathMLFontForFamily = function (fy, fx, fz) {
    var fw = fy.getMathMLFont(fx, fz);
    if (fw != null) {
      return fw
    }
    while (!("normal" == fx)) {
      fx = du.getDefault(fx);
      fw = fy.getMathMLFont(fx, fz);
      if (fw != null) {
        return fw
      }
    }
    return null
  };
  eG.getFamilyName = function (fx) {
    for (var fw = 0; fw < eG.getFamilies().size(); fw++) {
      var fy = eG.getFamilies().get(fw);
      if (fy.hasFontForMathvariant(fx)) {
        return fy.getFamilyName()
      }
    }
    return d
  };
  eG.getFamily = function (fx) {
    if (fx == null || fx.length == 0) {
      fx = d
    }
    for (var fw = 0; fw < eG.getFamilies().size(); fw++) {
      var fy = eG.getFamilies().get(fw);
      if (fy.getFamilyName() == fx) {
        return fy
      }
    }
    return null
  };
  eG.getFamilies = function () {
    if (cn == null) {
      cn = new aT()
    }
    return cn
  };
  eG.addFamilyInfo = function (fw) {
    eG.getFamilies().add(fw)
  };
  eG.getDefaultFont = function () {
    var fw = eG.getFamily(d);
    return fw.getMathMLFont("normal", "X")
  };
  eG.getAvailableFontFamilies = function () {
    return fs
  };
  eG.setAvailableFontFamilies = function (fw) {
    fs = fw
  };
  eG.getDefaultFontFamily = function () {
    return d
  };
  eG.setDefaultFontFamily = function (fw) {
    d = fw
  };
  eG.isSearchSymbolInAllFonts = function () {
    return dA
  };
  eG.setSearchSymbolInAllFonts = function (fw) {
    dA = fw
  };
  function a7() {
    this.familyName;
    this.folderOrUrl;
    this.useClientFont = false;
    this.preload = false;
    this.loadedDescription = false;
    this.fonts
  }
  
  a7.prototype.getFamilyName = function () {
    return this.familyName
  };
  a7.prototype.setFamilyName = function (fw) {
    this.familyName = fw
  };
  a7.prototype.getFolderOrUrl = function () {
    return this.folderOrUrl
  };
  a7.prototype.setFolderOrUrl = function (fw) {
    this.folderOrUrl = fw
  };
  a7.prototype.isUseClientFont = function () {
    return this.useClientFont
  };
  a7.prototype.setUseClientFont = function (fw) {
    this.useClientFont = fw
  };
  a7.prototype.isPreload = function () {
    return this.preload
  };
  a7.prototype.setPreload = function (fw) {
    this.preload = fw
  };
  a7.prototype.isLoadedDescription = function () {
    return this.loadedDescription
  };
  a7.prototype.setLoadedDescription = function (fw) {
    this.loadedDescription = fw
  };
  a7.prototype.setFonts = function (fw) {
    this.fonts = fw
  };
  a7.prototype.hasFontForMathvariant = function (fy) {
    for (var fx = 0; fx < this.fonts.size(); fx++) {
      var fw = this.fonts.get(fx);
      if (fw.getMathvariant() == fy) {
        return true
      }
    }
    return false
  };
  a7.prototype.getMathMLFont = function (fy, fz) {
    for (var fx = 0; fx < this.fonts.size(); fx++) {
      var fw = this.fonts.get(fx);
      if (fw.getMathvariant() == fy) {
        if (a7.existCharInList(fw.getUnicode(), fz)) {
          return fw
        }
      }
    }
    return null
  };
  a7.existCharInList = function (fz, fD) {
    if (fz == null) {
      return false
    }
    var fI = ds.getHexCodeFromChar(fD);
    var fA = "";
    var fG = "";
    if (fI.length <= 2) {
      fA = ";0:";
      fG = fI
    } else {
      fA = ";" + fI.substring(0, fI.length - 2) + ":";
      fG = fI.substring(fI.length - 2, fI.length)
    }
    if (fz.indexOf(fA) == -1) {
      return false
    }
    var fx = ds.getIntFromHexCode(fG);
    var fC = fz.indexOf(fA);
    fC = fC + fA.length;
    var fw = fz.substring(fC, fz.indexOf(";", fC));
    var fH = fw.split(",");
    for (var fB = 0; fB < fH.length; fB++) {
      var fy = fH[fB];
      if (fy == fG) {
        return true
      }
      if (fy.indexOf("-") > -1) {
        var fF = ds.getIntFromHexCode(fy.substring(0, fy.indexOf("-")));
        var fE = ds.getIntFromHexCode(fy.substring(fy.indexOf("-") + 1, fy.length));
        if (fx >= fF && fx <= fE) {
          return true
        }
      }
    }
    return false
  };
  a7.prototype.getFonts = function () {
    return this.fonts
  };
  function d3() {
    this.fontFile;
    this.family;
    this.mathvariant;
    this.fontName;
    this.unicode;
    this.superscriptChar;
    this.embeded = false
  }
  
  d3.prototype.getFamily = function () {
    return this.family
  };
  d3.prototype.setFamily = function (fw) {
    this.family = fw
  };
  d3.prototype.getMathvariant = function () {
    return this.mathvariant
  };
  d3.prototype.setMathvariant = function (fw) {
    this.mathvariant = fw
  };
  d3.prototype.getFontName = function () {
    return this.fontName
  };
  d3.prototype.setFontName = function (fw) {
    this.fontName = fw
  };
  d3.prototype.getFontFile = function () {
    return this.fontFile
  };
  d3.prototype.setFontFile = function (fw) {
    this.fontFile = fw
  };
  d3.prototype.getUnicode = function () {
    return this.unicode
  };
  d3.prototype.setUnicode = function (fw) {
    this.unicode = fw
  };
  d3.prototype.isEmbeded = function () {
    return this.embeded
  };
  d3.prototype.setEmbeded = function (fw) {
    this.embeded = fw
  };
  d3.prototype.getSuperscriptChar = function () {
    return this.superscriptChar
  };
  d3.prototype.setSuperscriptChar = function (fw) {
    this.superscriptChar = fw
  };
  d3.prototype.equals = function (fx) {
    if (fx instanceof d3) {
      var fw = fx;
      if (this.fontFile == fw.getFontFile()) {
        return true
      }
    }
    return false
  };
  function eC(fx, fw) {
    this.changedDimension = true;
    this.panelX = 0;
    this.panelY = 0;
    this.insideMarginLeft = 0;
    this.insideMarginRight = 0;
    this.insideMarginTop = 0;
    this.insideMarginBottom = 0;
    this.parent = null;
    this.mathMLBean = null;
    this.contenu = null;
    this.bgShapeList = new aT();
    this.multiline = false;
    this.mathMLBean = fx;
    this.parent = fw;
    this.contenu = new cQ(fx)
  }
  
  eC.prototype.isChangedDimension = function () {
    return this.changedDimension
  };
  eC.prototype.setChangedDimension = function (fw) {
    if (fw && this.parent != null) {
      this.parent.setChangedDimension(true)
    }
    this.changedDimension = fw
  };
  eC.prototype.addChildrenToPanel = function () {
    this.contenu.addChildrenToPanel(this)
  };
  eC.prototype.calculateDimension = function () {
    do {
      this.calculateChildrenDimension();
      this.setChangedDimension(false);
      this.positionChildren();
      this.calculateWidth();
      this.calculateHeight();
      this.calculateAxisLine();
      this.calculateBaseline();
      this.calculateSuperscriptLine();
      this.saveOneTimeBeforeStretch();
      this.stretchChildrenVertical();
      if (this.isChangedDimension()) {
        continue
      }
      this.stretchChildrenHorizontal();
      if (this.isChangedDimension()) {
        continue
      }
      this.maxWidthLineBreaking();
      if (this.isChangedDimension()) {
        continue
      }
      this.endCalculateDimension()
    } while (this.isChangedDimension())
  };
  eC.prototype.calculateChildrenDimension = function () {
    for (var fw = 0; fw < this.contenu.getPanelChildren().size(); fw++) {
      var fx = this.contenu.getPanelChildren().get(fw);
      if (fx.isChangedDimension()) {
        fx.calculateDimension()
      }
    }
  };
  eC.prototype.positionChildren = function () {
    if ("rtl" == this.getDir()) {
      this.contenu.putChildrenOneAfterOneRTL()
    } else {
      this.contenu.putChildrenOneAfterOneLTR()
    }
  };
  eC.prototype.calculateWidth = function () {
    var fy = 0;
    for (var fx = 0; fx < this.contenu.getPanelChildren().size(); fx++) {
      var fz = this.contenu.getPanelChildren().get(fx);
      if ((fz.getX() + fz.getWidth()) > fy) {
        fy = fz.getX() + fz.getWidth()
      }
    }
    for (var fx = 0; fx < this.contenu.getShapeList().size(); fx++) {
      var fw = this.contenu.getShapeList().get(fx);
      if ((fw.getX() + fw.getWidth()) > fy) {
        fy = fw.getX() + fw.getWidth()
      }
    }
    fy = fy + this.insideMarginRight;
    this.contenu.setContenuWidth(fy)
  };
  eC.prototype.calculateHeight = function () {
    var fy = 0;
    for (var fx = 0; fx < this.contenu.getPanelChildren().size(); fx++) {
      var fz = this.contenu.getPanelChildren().get(fx);
      if ((fz.getY() + fz.getHeight()) > fy) {
        fy = fz.getY() + fz.getHeight()
      }
    }
    for (var fx = 0; fx < this.contenu.getShapeList().size(); fx++) {
      var fw = this.contenu.getShapeList().get(fx);
      if ((fw.getY() + fw.getHeight()) > fy) {
        fy = fw.getY() + fw.getHeight()
      }
    }
    fy = fy + this.insideMarginBottom;
    this.contenu.setContenuHeight(fy)
  };
  eC.prototype.calculateAxisLine = function () {
    this.contenu.setAxis(this.contenu.getContenuHeight() / 2)
  };
  eC.prototype.calculateBaseline = function () {
  };
  eC.prototype.calculateSuperscriptLine = function () {
    this.contenu.setSuperscriptline(this.contenu.getBaseline())
  };
  eC.prototype.saveOneTimeBeforeStretch = function () {
  };
  eC.prototype.stretchChildrenVertical = function () {
  };
  eC.prototype.stretchChildrenHorizontal = function () {
  };
  eC.prototype.maxWidthLineBreaking = function () {
  };
  eC.prototype.endCalculateDimension = function () {
  };
  eC.prototype.cleanupStretchy = function () {
    for (var fw = 0; fw < this.contenu.getPanelChildren().size(); fw++) {
      var fx = this.contenu.getPanelChildren().get(fw);
      fx.cleanupStretchy()
    }
  };
  eC.prototype.getAxis = function () {
    return this.contenu.getAxis() + this.getHeightTop()
  };
  eC.prototype.getBaseline = function () {
    if (this.contenu.getBaseline() != F) {
      return this.getHeightTop() + this.contenu.getBaseline()
    }
    return F
  };
  eC.prototype.getSuperscriptline = function () {
    if (this.contenu.getBaseline() != F && this.contenu.getSuperscriptline() != F) {
      return this.getHeightTop() + this.contenu.getBaseline() - this.contenu.getSuperscriptline()
    }
    return this.getHeightTop()
  };
  eC.prototype.getWidth = function () {
    return this.contenu.getContenuWidth() + this.addAllWidth()
  };
  eC.prototype.getHeight = function () {
    return this.contenu.getContenuHeight() + this.addAllHeight()
  };
  eC.prototype.addAllHeight = function () {
    return this.getHeightTop() + this.getHeightBottom()
  };
  eC.prototype.addAllWidth = function () {
    return this.getWidthLeft() + this.getWidthRight()
  };
  eC.prototype.getHeightTop = function () {
    return this.getMargin_top() + this.getBorder_width_top() + this.getPadding_top()
  };
  eC.prototype.getHeightBottom = function () {
    return this.getMargin_bottom() + this.getBorder_width_bottom() + this.getPadding_bottom()
  };
  eC.prototype.getWidthLeft = function () {
    return this.getMargin_left() + this.getBorder_width_left() + this.getPadding_left()
  };
  eC.prototype.getWidthRight = function () {
    return this.getMargin_right() + this.getBorder_width_right() + this.getPadding_right()
  };
  eC.prototype.getMargin_top = function () {
    var fw = this.mathMLBean.getCssstyle();
    var fx = this.mathMLBean.getStyle();
    return fw.getMargin_top(fx.getMathsize())
  };
  eC.prototype.getMargin_bottom = function () {
    var fw = this.mathMLBean.getCssstyle();
    var fx = this.mathMLBean.getStyle();
    return fw.getMargin_bottom(fx.getMathsize())
  };
  eC.prototype.getMargin_left = function () {
    var fw = this.mathMLBean.getCssstyle();
    var fx = this.mathMLBean.getStyle();
    return fw.getMargin_left(fx.getMathsize())
  };
  eC.prototype.getMargin_right = function () {
    var fw = this.mathMLBean.getCssstyle();
    var fx = this.mathMLBean.getStyle();
    return fw.getMargin_right(fx.getMathsize())
  };
  eC.prototype.getBorder_width_top = function () {
    var fw = this.mathMLBean.getCssstyle();
    var fx = this.mathMLBean.getStyle();
    return fw.getBorder_width_top(fx.getMathsize())
  };
  eC.prototype.getBorder_width_bottom = function () {
    var fw = this.mathMLBean.getCssstyle();
    var fx = this.mathMLBean.getStyle();
    return fw.getBorder_width_bottom(fx.getMathsize())
  };
  eC.prototype.getBorder_width_left = function () {
    var fw = this.mathMLBean.getCssstyle();
    var fx = this.mathMLBean.getStyle();
    return fw.getBorder_width_left(fx.getMathsize())
  };
  eC.prototype.getBorder_width_right = function () {
    var fw = this.mathMLBean.getCssstyle();
    var fx = this.mathMLBean.getStyle();
    return fw.getBorder_width_right(fx.getMathsize())
  };
  eC.prototype.getPadding_top = function () {
    var fw = this.mathMLBean.getCssstyle();
    var fx = this.mathMLBean.getStyle();
    return fw.getPadding_top(fx.getMathsize())
  };
  eC.prototype.getPadding_bottom = function () {
    var fw = this.mathMLBean.getCssstyle();
    var fx = this.mathMLBean.getStyle();
    return fw.getPadding_bottom(fx.getMathsize())
  };
  eC.prototype.getPadding_left = function () {
    var fw = this.mathMLBean.getCssstyle();
    var fx = this.mathMLBean.getStyle();
    return fw.getPadding_left(fx.getMathsize())
  };
  eC.prototype.getPadding_right = function () {
    var fw = this.mathMLBean.getCssstyle();
    var fx = this.mathMLBean.getStyle();
    return fw.getPadding_right(fx.getMathsize())
  };
  eC.prototype.findIsItalic = function (fz) {
    if (fz instanceof aN) {
      var fx = fz;
      var fw = fx.getChildren();
      if (fw != null && fw.size() == 1) {
        var fy = fw.get(0);
        return this.findIsItalic(fy)
      }
    }
    return fz.getStyle().isItalic()
  };
  eC.prototype.isVerticalStretchy = function () {
    return false
  };
  eC.prototype.isHorizontalStretchy = function () {
    return false
  };
  eC.prototype.hasIsOnlyText = function () {
    return false
  };
  eC.prototype.getMaxMathsize = function () {
    return 0
  };
  eC.prototype.stretchContentVertical = function (fw) {
  };
  eC.prototype.stretchContentHorizontal = function (fw) {
  };
  eC.prototype.getId = function () {
    return this.mathMLBean.getId()
  };
  eC.prototype.getPanelWithId = function (fy) {
    if (fy == null) {
      return null
    }
    if (fy == this.getId()) {
      return this
    }
    for (var fx = 0; fx < this.contenu.getPanelChildren().size(); fx++) {
      var fz = this.contenu.getPanelChildren().get(fx);
      var fw = fz.getPanelWithId(fy);
      if (fw != null) {
        return fw
      }
    }
    return null
  };
  eC.prototype.getParent = function () {
    return this.parent
  };
  eC.prototype.setParent = function (fw) {
    this.parent = fw
  };
  eC.prototype.getRootPanel = function () {
    var fw = this.getParent();
    while (fw != null) {
      if (fw.getParent() == null) {
        return fw
      }
      fw = fw.getParent()
    }
    return this
  };
  eC.prototype.isBreakablePanelBefore = function (fw, fx) {
    return false
  };
  eC.prototype.getX = function () {
    return this.panelX
  };
  eC.prototype.setX = function (fw) {
    this.panelX = fw
  };
  eC.prototype.getY = function () {
    return this.panelY
  };
  eC.prototype.setY = function (fw) {
    this.panelY = fw
  };
  eC.prototype.getContenu = function () {
    return this.contenu
  };
  eC.prototype.setContenu = function (fw) {
    this.contenu = fw
  };
  eC.prototype.getBgShapeList = function () {
    return this.bgShapeList
  };
  eC.prototype.getBean = function () {
    return this.mathMLBean
  };
  eC.prototype.getDir = function () {
    return this.mathMLBean.getStyle().getDir()
  };
  eC.prototype.getInsideMarginLeft = function () {
    return this.insideMarginLeft
  };
  eC.prototype.setInsideMarginLeft = function (fw) {
    this.insideMarginLeft = fw
  };
  eC.prototype.getInsideMarginRight = function () {
    return this.insideMarginRight
  };
  eC.prototype.setInsideMarginRight = function (fw) {
    this.insideMarginRight = fw
  };
  eC.prototype.getInsideMarginTop = function () {
    return this.insideMarginTop
  };
  eC.prototype.setInsideMarginTop = function (fw) {
    this.insideMarginTop = fw
  };
  eC.prototype.getInsideMarginBottom = function () {
    return this.insideMarginBottom
  };
  eC.prototype.setInsideMarginBottom = function (fw) {
    this.insideMarginBottom = fw
  };
  eC.prototype.toString = function () {
    var fx = "";
    for (var fw = 0; fw < this.contenu.getPanelChildren().size(); fw++) {
      var fy = this.contenu.getPanelChildren().get(fw);
      fx = fx + fy.toString()
    }
    return fx
  };
  eC.prototype.isMultiline = function () {
    return this.multiline
  };
  eC.prototype.setMultiline = function (fw) {
    this.multiline = fw
  };
  eC.prototype.getMultipleLengthValues = function (fx, fB, fy) {
    var fw = new Array(fB);
    if (fx == null || fx.length == 0) {
      return fw
    }
    fx = fu.replace(fx, "  ", " ");
    var fA = fx.split(" ");
    for (var fz = 0; fz < fw.length; fz++) {
      if (fz < fA.length) {
        fw[fz] = cT.getLength(fA[fz], fy)
      } else {
        fw[fz] = fw[fz - 1]
      }
    }
    return fw
  };
  eC.prototype.getMultipleStringValues = function (fx, fA) {
    var fw = new Array(fA);
    if (fx == null || fx.length == 0) {
      return fw
    }
    fx = fu.replace(fx, "  ", " ");
    var fz = fx.split(" ");
    for (var fy = 0; fy < fA; fy++) {
      if (fy < fz.length) {
        fw[fy] = fz[fy]
      } else {
        fw[fy] = fw[fy - 1]
      }
    }
    return fw
  };
  eC.prototype.isAxisOperator = function () {
    if (this.mathMLBean instanceof cf) {
      var fw = this.mathMLBean;
      return fw.getOperatorStyle().getIsAxisOperator()
    }
    return false
  };
  eC.prototype.isStretchedVertical = function () {
    return false
  };
  eC.prototype.updateSubSupZeroBase = function (fw) {
    if (fw.getWidth() == 0 && fw.getHeight() == 0) {
      var fA = this.getBean().getStyle().getMathvariant();
      var fy = eG.getFamilyName(fA);
      var fx = eG.getFontInfoForChar(fy, fA, "X");
      var fz = aD.getTextShape(fx.getSuperscriptChar(), fx, this.getBean().getStyle());
      by.calculateDimensionForText(fz);
      fw.getContenu().setContenuHeight(fz.getHeight());
      fw.getContenu().setAxis(fz.getHeight() / 2);
      fw.getContenu().setSuperscriptline(fz.getSuperscriptline())
    }
  };
  function bj(fx, fw) {
    this.v = eC;
    this.v(fx, fw)
  }
  
  FMath_extend(bj, eC);
  bj.prototype.addChildrenToPanel = function () {
    var fw = this.getBean();
    var fz = this.getContenu();
    var fA = fw.getActiontype();
    if (fA != null) {
      if ("toggle" == fA) {
        var fy = ej.getIntegerValue(fw.getSelection(), 0);
        var fx = fw.getChildren();
        if (fx != null && fx.size() > 0) {
          if (fy > (fx.size() - 1)) {
            fy = fx.size() - 1
          }
          if (fy < 0) {
            fy = 0
          }
          var fC = fx.get(fy);
          var fB = di.generatePanelStructure(fC, this);
          fz.getPanelChildren().add(fB)
        }
      } else {
        var fx = fw.getChildren();
        if (fx != null && fx.size() > 0) {
          var fC = fx.get(0);
          var fB = di.generatePanelStructure(fC, this);
          fz.getPanelChildren().add(fB)
        }
      }
    }
  };
  bj.prototype.isVerticalStretchy = function () {
    var fw = this.getContenu();
    var fx = fw.getPanelChildren().get(0);
    return fx.isVerticalStretchy()
  };
  bj.prototype.stretchContentVertical = function (fx) {
    var fw = this.getContenu();
    var fy = fw.getPanelChildren().get(0);
    fy.stretchContentVertical(fx)
  };
  bj.prototype.isBreakablePanelBefore = function (fw, fx) {
    return false
  };
  function cQ(fw) {
    this.width = 0;
    this.height = 0;
    this.bean = null;
    this.panelChildren = new aT();
    this.shapeList = new aT();
    this.baseline = F;
    this.axis = F;
    this.superscriptline = F;
    this.bean = fw
  }
  
  cQ.prototype.addChildrenToPanel = function (fw) {
    var fy = this.bean.getChildren();
    if (fy != null) {
      for (var fx = 0; fx < fy.size(); fx++) {
        var fA = fy.get(fx);
        var fz = di.generatePanelStructure(fA, fw);
        this.panelChildren.add(fz)
      }
    }
  };
  cQ.prototype.putChildrenOneAfterOneLTR = function () {
    var fy = 0;
    for (var fw = 0; fw < this.getPanelChildren().size(); fw++) {
      var fx = this.getPanelChildren().get(fw);
      fx.setX(fy);
      fy = fy + fx.getWidth();
      fx.setY(0)
    }
  };
  cQ.prototype.putChildrenOneAfterOneRTL = function () {
    var fy = 0;
    for (var fw = (this.getPanelChildren().size() - 1); fw > -1; fw--) {
      var fx = this.getPanelChildren().get(fw);
      fx.setX(fy);
      fy = fy + fx.getWidth();
      fx.setY(0)
    }
  };
  cQ.prototype.moveChildrenOnAxis = function () {
    var fw = this.getAxisForBaselineChildren();
    for (var fx = 0; fx < this.getPanelChildren().size(); fx++) {
      var fy = this.getPanelChildren().get(fx);
      if (fy.getBaseline() == F) {
        fy.setY(fw - fy.getY() - fy.getAxis())
      }
    }
  };
  cQ.prototype.centerStretchedOperators = function () {
    var fy = -F;
    for (var fw = 0; fw < this.getPanelChildren().size(); fw++) {
      var fx = this.getPanelChildren().get(fw);
      if (fx.isStretchedVertical()) {
        continue
      }
      if (fx.getY() < fy) {
        fy = fx.getY()
      }
    }
    if (fy == -F) {
      return
    }
    for (var fw = 0; fw < this.getPanelChildren().size(); fw++) {
      var fx = this.getPanelChildren().get(fw);
      if (fx.isStretchedVertical()) {
        fx.setY(fy)
      }
    }
  };
  cQ.prototype.getAxisForBaselineChildren = function () {
    var fy = F;
    var fw = 0;
    for (var fx = 0; fx < this.getPanelChildren().size(); fx++) {
      var fz = this.getPanelChildren().get(fx);
      if (fz.isAxisOperator()) {
        return fz.getY() + fz.getAxis()
      }
      if (fz.getBaseline() != F) {
        if ((fz.getBaseline()) > fy) {
          fy = fz.getBaseline();
          fw = fz.getY() + fz.getAxis()
        }
      }
    }
    return fw
  };
  cQ.prototype.putChildrenOnY = function (fy) {
    for (var fw = 0; fw < this.getPanelChildren().size(); fw++) {
      var fx = this.getPanelChildren().get(fw);
      fx.setY(fy)
    }
  };
  cQ.prototype.putChildrenOnX = function (fy) {
    for (var fw = 0; fw < this.getPanelChildren().size(); fw++) {
      var fx = this.getPanelChildren().get(fw);
      fx.setX(fy)
    }
  };
  cQ.prototype.putChildOnY = function (fx, fw) {
    fx.setY(fw)
  };
  cQ.prototype.moveChildrenOnX = function (fy) {
    for (var fw = 0; fw < this.getPanelChildren().size(); fw++) {
      var fx = this.getPanelChildren().get(fw);
      fx.setX(fx.getX() + fy)
    }
  };
  cQ.prototype.moveChildrenOnY = function (fy) {
    for (var fw = 0; fw < this.getPanelChildren().size(); fw++) {
      var fx = this.getPanelChildren().get(fw);
      fx.setY(fx.getY() + fy)
    }
  };
  cQ.prototype.moveShapeOnX = function (fy) {
    for (var fx = 0; fx < this.getShapeList().size(); fx++) {
      var fw = this.getShapeList().get(fx);
      fw.moveAllOnX(fy)
    }
  };
  cQ.prototype.moveShapeOnY = function (fy) {
    for (var fx = 0; fx < this.getShapeList().size(); fx++) {
      var fw = this.getShapeList().get(fx);
      fw.moveAllOnY(fy)
    }
  };
  cQ.prototype.centerAllChildrenOnY = function () {
    for (var fw = 0; fw < this.getPanelChildren().size(); fw++) {
      var fx = this.getPanelChildren().get(fw);
      fx.setY((this.getContenuHeight() - fx.getHeight()) / 2)
    }
  };
  cQ.prototype.moveChildrenOnBaseline = function (fy) {
    for (var fw = 0; fw < this.getPanelChildren().size(); fw++) {
      var fx = this.getPanelChildren().get(fw);
      if (fx.getBaseline() != F) {
        fx.setY(fy - fx.getBaseline())
      }
    }
  };
  cQ.prototype.setBaselineFromFirstChild = function () {
    for (var fw = 0; fw < this.getPanelChildren().size(); fw++) {
      var fx = this.getPanelChildren().get(fw);
      if (fx.getBaseline() != F) {
        this.setBaseline(fx.getY() + fx.getBaseline());
        break
      }
    }
  };
  cQ.prototype.returnYToZero = function () {
    var fz = -F;
    for (var fx = 0; fx < this.getPanelChildren().size(); fx++) {
      var fy = this.getPanelChildren().get(fx);
      if (fy.getY() < fz) {
        fz = fy.getY()
      }
    }
    for (var fx = 0; fx < this.getShapeList().size(); fx++) {
      var fw = this.getShapeList().get(fx);
      if (fw.getY() < fz) {
        fz = fw.getY()
      }
    }
    if (fz != 0) {
      for (var fx = 0; fx < this.getPanelChildren().size(); fx++) {
        var fy = this.getPanelChildren().get(fx);
        fy.setY(fy.getY() - fz)
      }
      for (var fx = 0; fx < this.getShapeList().size(); fx++) {
        var fw = this.getShapeList().get(fx);
        fw.moveAllOnY(-fz)
      }
    }
    return fz
  };
  cQ.prototype.returnXToZero = function () {
    var fw = -F;
    for (var fy = 0; fy < this.getPanelChildren().size(); fy++) {
      var fz = this.getPanelChildren().get(fy);
      if (fw > fz.getX()) {
        fw = fz.getX()
      }
    }
    for (var fy = 0; fy < this.getShapeList().size(); fy++) {
      var fx = this.getShapeList().get(fy);
      if (fx.getX() < fw) {
        fw = fx.getX()
      }
    }
    if (fw != 0) {
      for (var fy = 0; fy < this.getPanelChildren().size(); fy++) {
        var fz = this.getPanelChildren().get(fy);
        fz.setX(fz.getX() - fw)
      }
      for (var fy = 0; fy < this.getShapeList().size(); fy++) {
        var fx = this.getShapeList().get(fy);
        fx.moveAllOnX(-fw)
      }
    }
    return fw
  };
  cQ.prototype.getBean = function () {
    return this.bean
  };
  cQ.prototype.setBean = function (fw) {
    this.bean = fw
  };
  cQ.prototype.getPanelChildren = function () {
    return this.panelChildren
  };
  cQ.prototype.setPanelChildren = function (fw) {
    this.panelChildren = fw
  };
  cQ.prototype.getShapeList = function () {
    return this.shapeList
  };
  cQ.prototype.setShapeList = function (fw) {
    this.shapeList = fw
  };
  cQ.prototype.getContenuWidth = function () {
    return this.width
  };
  cQ.prototype.setContenuWidth = function (fw) {
    this.width = fw
  };
  cQ.prototype.getContenuHeight = function () {
    return this.height
  };
  cQ.prototype.setContenuHeight = function (fw) {
    this.height = fw
  };
  cQ.prototype.getAxis = function () {
    return this.axis
  };
  cQ.prototype.setAxis = function (fw) {
    this.axis = fw
  };
  cQ.prototype.getBaseline = function () {
    return this.baseline
  };
  cQ.prototype.setBaseline = function (fw) {
    this.baseline = fw
  };
  cQ.prototype.getSuperscriptline = function () {
    return this.superscriptline
  };
  cQ.prototype.setSuperscriptline = function (fw) {
    this.superscriptline = fw
  };
  cQ.prototype.getMinYNoStretchy = function () {
    var fy = -F;
    for (var fw = 0; fw < this.getPanelChildren().size(); fw++) {
      var fx = this.getPanelChildren().get(fw);
      if (fx.isVerticalStretchy()) {
        continue
      }
      if (fy > fx.getY()) {
        fy = fx.getY()
      }
    }
    return fy
  };
  cQ.prototype.getMaxYNoStretchy = function () {
    var fx = 0;
    for (var fw = 0; fw < this.getPanelChildren().size(); fw++) {
      var fy = this.getPanelChildren().get(fw);
      if (fy.isVerticalStretchy()) {
        continue
      }
      if (fx < fy.getY() + fy.getHeight()) {
        fx = fy.getY() + fy.getHeight()
      }
    }
    return fx
  };
  function bz(fx, fw) {
    this.v = eC;
    this.v(fx, fw)
  }
  
  FMath_extend(bz, eC);
  bz.prototype.positionChildren = function () {
    var fE = this.getBean();
    var fA = this.getContenu();
    for (var fz = 0; fz < fA.getPanelChildren().size(); fz++) {
      var fG = fA.getPanelChildren().get(fz);
      fG.setY(0);
      fG.setX(0);
      var fD = fG.getBean();
      var fB = fD.getIndentalign();
      if ("id" == fB) {
        var fx = cT.getLength(fD.getIndentshift(), fD.getStyle().getMathsize());
        var fH = fD.getIndenttarget();
        if (fH == null) {
          continue
        }
        var fC = this.getPanelWithId(fH);
        if (fC == null) {
          continue
        }
        if ("rtl" == fG.getDir()) {
          fG.setX(this.getPositionX(fC) + fC.getWidth() - fG.getWidth() - fx)
        } else {
          fG.setX(this.getPositionX(fC) + fx)
        }
      }
    }
    fA.returnXToZero();
    for (var fz = 1; fz < fA.getPanelChildren().size(); fz++) {
      var fG = fA.getPanelChildren().get(fz);
      var fD = fG.getBean();
      var fB = fD.getIndentalign();
      if (!("id" == fB)) {
        fG.setX(0)
      }
    }
    var fF = 0;
    for (var fz = 0; fz < fA.getPanelChildren().size(); fz++) {
      var fG = fA.getPanelChildren().get(fz);
      if (fG.getX() + fG.getWidth() > fF) {
        fF = fG.getX() + fG.getWidth()
      }
    }
    var fw = 0;
    for (var fz = 0; fz < fA.getPanelChildren().size(); fz++) {
      var fG = fA.getPanelChildren().get(fz);
      var fD = fG.getBean();
      var fB = fD.getIndentalign();
      var fx = cT.getLength(fD.getIndentshift(), fD.getStyle().getMathsize());
      var fy = cT.getLength(fE.getLineleading(), fD.getStyle().getMathsize());
      fw = fw + fy;
      fG.setY(fw);
      if ("rtl" == fG.getDir()) {
        if (fB == null || "left" == fB || "auto" == fB) {
          fG.setX(fF - fG.getWidth() - fx)
        } else {
          if ("right" == fB) {
            fG.setX(-fx)
          } else {
            if ("center" == fB) {
              fG.setX((fF - fG.getWidth()) / 2 - fx)
            } else {
              if ("newlinezero" == fB) {
                fG.setX(fF - fG.getWidth() - fx)
              } else {
                if ("id" == fB) {
                } else {
                  fG.setX(fF - fG.getWidth() - fx)
                }
              }
            }
          }
        }
      } else {
        if (fB == null || "left" == fB || "auto" == fB) {
          fG.setX(fx)
        } else {
          if ("right" == fB) {
            fG.setX(fF - fG.getWidth() + fx)
          } else {
            if ("center" == fB) {
              fG.setX((fF - fG.getWidth()) / 2 + fx)
            } else {
              if ("newlinezero" == fB) {
                fG.setX(0)
              } else {
                if ("id" == fB) {
                } else {
                  fG.setX(fx)
                }
              }
            }
          }
        }
      }
      fw = fw + fG.getHeight()
    }
    fA.returnYToZero();
    fA.returnXToZero()
  };
  bz.prototype.getPositionX = function (fw) {
    var fy = fw.getX();
    var fx = fw.getParent();
    while (fx != null) {
      if (fx.getId() == this.getId()) {
        break
      }
      fy = fy + fx.getWidthLeft();
      fy = fy + fx.getX();
      fx = fx.getParent()
    }
    return fy
  };
  bz.prototype.calculateAxisLine = function () {
    var fw = this.getContenu();
    if (fw.getPanelChildren().size() != 1) {
      fw.setAxis(fw.getContenuHeight() / 2)
    } else {
      if (fw.getPanelChildren().size() == 1) {
        var fx = fw.getPanelChildren().get(0);
        fw.setAxis(fx.getY() + fx.getAxis())
      }
    }
  };
  bz.prototype.calculateBaseline = function () {
    var fw = this.getContenu();
    if (fw.getPanelChildren().size() != 1) {
      fw.setBaseline(F)
    } else {
      if (fw.getPanelChildren().size() == 1) {
        var fx = fw.getPanelChildren().get(0);
        if (fx.getBaseline() != F) {
          fw.setBaseline(fx.getY() + fx.getBaseline())
        }
      }
    }
  };
  bz.prototype.calculateSuperscriptLine = function () {
    var fw = this.getContenu();
    if (fw.getPanelChildren().size() == 1) {
      var fx = fw.getPanelChildren().get(0);
      if (fx.getContenu().getSuperscriptline() != F) {
        fw.setSuperscriptline(fx.getY() + fx.getContenu().getSuperscriptline())
      }
    } else {
      fw.setSuperscriptline(fw.getContenuHeight())
    }
  };
  bz.prototype.saveOneTimeBeforeStretch = function () {
  };
  bz.prototype.stretchChildrenVertical = function () {
  };
  bz.prototype.stretchChildrenHorizontal = function () {
  };
  bz.prototype.maxWidthLineBreaking = function () {
  };
  bz.prototype.endCalculateDimension = function () {
  };
  bz.prototype.hasIsOnlyText = function () {
    var fw = this.getContenu();
    if (fw.getPanelChildren().size() == 1) {
      var fx = fw.getPanelChildren().get(0);
      return fx.hasIsOnlyText()
    }
    return false
  };
  bz.prototype.getMaxMathsize = function () {
    var fw = this.getBean().getStyle().getMathsize();
    var fy = this.getContenu();
    for (var fx = 0; fx < fy.getPanelChildren().size(); fx++) {
      var fz = fy.getPanelChildren().get(fx);
      if (fz.getMaxMathsize() > fw) {
        fw = fz.getMaxMathsize()
      }
    }
    return fw
  };
  bz.prototype.isBreakablePanelBefore = function (fz, fA) {
    if (fz < 0) {
      return false
    }
    var fy = this.getContenu();
    for (var fx = 0; fx < fy.getPanelChildren().size(); fx++) {
      var fw = fy.getPanelChildren().get(fx);
      if ((fw.getX() + fw.getWidth()) < fz) {
        continue
      }
      if (!fw.isBreakablePanelBefore(fz - fw.getX(), fA)) {
        return false
      }
    }
    return true
  };
  bz.prototype.shrinkPanelBefore = function (fG, fz) {
    if (this.getWidth() <= fG) {
      return
    }
    var fF = this.getBean();
    if (fG < 0) {
      return
    }
    var fA = false;
    var fD = this.getContenu();
    var fy = fD.getPanelChildren();
    for (var fC = 0; fC < fy.size(); fC++) {
      var fH = fy.get(fC);
      if ((fH.getX() + fH.getWidth()) < fG) {
        continue
      }
      var fx = fG - fH.getX();
      if (fA) {
        fx = fz
      }
      var fB = fH.getPanelsToMoveOnNextLine(fx, fz);
      if (fB.size() == 0) {
        continue
      }
      var fE = fF.createAddLine(null);
      fE.setParentBean(fF);
      fE.setIndentalign("newlinezero");
      fA = true;
      var fw = di.generatePanelStructure(fE, this);
      fw.setX(0);
      fw.addPanelsToLine(fB);
      fw.moveToZeroX();
      fw.getContenu().setContenuHeight(fH.getContenu().getContenuHeight());
      fw.getContenu().setBaseline(fH.getContenu().getBaseline());
      fw.getContenu().setAxis(fH.getContenu().getAxis());
      fw.getContenu().setSuperscriptline(fH.getContenu().getSuperscriptline());
      fy.addTo(fC + 1, fw);
      fw.calculateWidth();
      this.setChangedDimension(true)
    }
  };
  bz.prototype.isHorizontalStretchy = function () {
    var fy = this.getContenu();
    for (var fx = 0; fx < fy.getPanelChildren().size(); fx++) {
      var fw = fy.getPanelChildren().get(fx);
      if (fw.isHorizontalStretchy()) {
        return true
      }
    }
    return false
  };
  bz.prototype.stretchContentHorizontal = function (fA) {
    var fz = this.getContenu();
    var fy = fz.getPanelChildren();
    for (var fx = 0; fx < fy.size(); fx++) {
      var fw = fy.get(fx);
      if (fw.isHorizontalStretchy()) {
        fw.stretchContentHorizontal(fA)
      }
    }
  };
  function cv(fy, fx) {
    this.rowspan = 1;
    this.colspan = 1;
    this.rowline = 0;
    this.colline = 0;
    this.w = bz;
    this.w(fy, fx);
    var fw = this.getBean();
    if (fw.getRowspan() != null) {
      this.rowspan = cT.getLength(fw.getRowspan(), 1)
    }
    if (fw.getColumnspan() != null) {
      this.colspan = cT.getLength(fw.getColumnspan(), 1)
    }
  }
  
  FMath_extend(cv, bz);
  cv.prototype.getRowspan = function () {
    return this.rowspan
  };
  cv.prototype.getColspan = function () {
    return this.colspan
  };
  cv.prototype.getRowline = function () {
    return this.rowline
  };
  cv.prototype.setRowline = function (fw) {
    this.rowline = fw
  };
  cv.prototype.getColline = function () {
    return this.colline
  };
  cv.prototype.setColline = function (fw) {
    this.colline = fw
  };
  cv.prototype.getRowSpanHeight = function (fy) {
    if (this.rowspan < 2) {
      return this.getHeight()
    }
    var fw = 0;
    for (var fx = 0; fx < (this.rowspan - 1); fx++) {
      fw = fw + fy[this.rowline + fx]
    }
    return (this.getHeight() - fw) / this.rowspan
  };
  function cj(fx) {
    this.x = cv;
    this.x(new bF(fx.getBean()), fx);
    var fw = this.getContenu();
    fw.setContenuWidth(0);
    fw.setContenuHeight(0);
    fw.setAxis(0);
    fw.setSuperscriptline(0)
  }
  
  FMath_extend(cj, cv);
  cj.prototype.calculateWidth = function () {
    var fw = this.getContenu();
    fw.setContenuWidth(0)
  };
  cj.prototype.calculateHeight = function () {
    var fw = this.getContenu();
    fw.setContenuHeight(0)
  };
  cj.prototype.calculateAxisLine = function () {
    var fw = this.getContenu();
    fw.setAxis(F)
  };
  cj.prototype.calculateBaseline = function () {
  };
  cj.prototype.calculateSuperscriptLine = function () {
    var fw = this.getContenu();
    fw.setSuperscriptline(F)
  };
  function bi(fx, fw) {
    this.w = bz;
    this.w(fx, fw)
  }
  
  FMath_extend(bi, bz);
  function dJ(fx, fw) {
    this.w = bz;
    this.w(fx, fw)
  }
  
  FMath_extend(dJ, bz);
  dJ.prototype.isBreakablePanelBefore = function (fw, fx) {
    return false
  };
  function dm(fx, fw) {
    this.v = eC;
    this.v(fx, fw)
  }
  
  FMath_extend(dm, eC);
  dm.prototype.positionChildren = function () {
    var fF = this.getContenu();
    fF.getShapeList().clear();
    var fM = this.getBean();
    var fI = fM.getLinethickness();
    var fz = cT.getLineThickness(fI, fM.getStyle().getMathsize());
    if (fI != null && "0" == fI) {
      fz = 0
    }
    var fy = cT.getLength(fM.getLineCapMargin(), fM.getStyle().getMathsize());
    var fx = cT.getLength(fM.getSpace(), fM.getStyle().getMathsize());
    fy = 1;
    fx = 1;
    var fK = fM.getNumalign();
    var fD = fM.getDenomalign();
    var fE = fF.getPanelChildren().get(0);
    var fC = fF.getPanelChildren().get(1);
    if (!fM.isBevelled()) {
      this.setInsideMarginRight(2);
      fF.putChildOnY(fE, 0);
      fC.setY(fE.getY() + fE.getHeight() + 2 * fx + fz);
      var fJ = fE.getWidth();
      if (fC.getWidth() > fJ) {
        fJ = fC.getWidth()
      }
      if (fK == null || fK.length == 0) {
        fK = "center"
      }
      fK = fK.toLowerCase();
      if (fD == null || fD.length == 0) {
        fD = "center"
      }
      fD = fD.toLowerCase();
      if ("left" == fK) {
        fE.setX(0)
      } else {
        if ("right" == fK) {
          fE.setX(fJ - fE.getWidth())
        } else {
          fE.setX((fJ - fE.getWidth()) / 2)
        }
      }
      if ("left" == fD) {
        fC.setX(0)
      } else {
        if ("right" == fD) {
          fC.setX(fJ - fC.getWidth())
        } else {
          fC.setX((fJ - fC.getWidth()) / 2)
        }
      }
      fE.setX(fE.getX() + fy + 1);
      fC.setX(fC.getX() + fy + 1);
      fF.setContenuWidth(fJ + 2 * (fy + 1));
      fF.setContenuHeight(fC.getY() + fC.getHeight());
      fF.setAxis(fE.getY() + fE.getHeight() + fx + fz / 2);
      fF.setBaseline(F);
      if (fz > 0) {
        var fB = new cJ();
        fB.setLinethickness(fz);
        var fG = fz / 2;
        var fL = 0;
        if (fz == 1) {
          fL = 1
        }
        fB.setBorderColor(aw.getColor(fM.getStyle().getColor(), 0));
        fB.setX(1);
        fB.setY(fE.getY() + fE.getHeight() + fx + fG);
        fB.setEndX(fF.getContenuWidth() - 1 - fL);
        fB.setEndY(fE.getY() + fE.getHeight() + fx + fG);
        fB.setAntialias(false);
        fF.getShapeList().add(fB)
      }
    } else {
      fz = (fz * 1.15);
      eC.prototype.positionChildren.call(this);
      this.calculateHeight();
      fF.centerAllChildrenOnY();
      this.calculateHeight();
      fF.moveChildrenOnBaseline(fF.getContenuHeight() / 2);
      var fG = (fF.getContenuHeight() * 0.25);
      var fH = (fG * 0.5);
      fE.setY(fE.getY() - fG);
      fC.setY(fC.getY() + fG);
      fF.returnYToZero();
      if ("rtl" == this.getDir()) {
        fE.setX((fC.getX() + fC.getWidth() + fH + 2 * fx + fz))
      } else {
        fC.setX((fE.getX() + fE.getWidth() + fH + 2 * fx + fz))
      }
      var fA = fE.getY();
      if (fC.getY() < fA) {
        fA = fC.getY()
      }
      var fw = fC.getY() + fC.getHeight();
      if ((fE.getY() + fE.getHeight()) > fw) {
        fw = fE.getY() + fE.getHeight()
      }
      if (fz > 0) {
        var fB = new cJ();
        fB.setLinethickness(fz);
        fB.setBorderColor(aw.getColor(fM.getStyle().getColor(), 0));
        if ("rtl" == this.getDir()) {
          fB.setX(fC.getX() + fC.getWidth() + fx - fH / 2);
          fB.setY(fA + fz / 2);
          fB.setEndX(fC.getX() + fC.getWidth() + fx + fz + 3 * fH / 2);
          fB.setEndY(fw - fz / 2)
        } else {
          fB.setX(fE.getX() + fE.getWidth() + fx - fH / 2);
          fB.setY(fw - fz / 2);
          fB.setEndX(fE.getX() + fE.getWidth() + fx + fz + 3 * fH / 2);
          fB.setEndY(fA + fz / 2)
        }
        fF.getShapeList().add(fB)
      }
      this.calculateWidth();
      this.calculateHeight();
      fF.setAxis(fF.getContenuHeight() / 2);
      fF.setBaseline(F)
    }
  };
  dm.prototype.calculateAxisLine = function () {
  };
  dm.prototype.calculateBaseline = function () {
  };
  dm.prototype.calculateSuperscriptLine = function () {
    var fw = this.getContenu();
    fw.setSuperscriptline(F)
  };
  function eA(fx, fw) {
    this.img = new ez();
    this.v = eC;
    this.v(fx, fw)
  }
  
  FMath_extend(eA, eC);
  eA.prototype.addChildrenToPanel = function () {
    var fx = (this.getBean());
    var fw = this.getContenu();
    this.img.setSrc(fx.getSrc());
    if (fx.getValign() != null) {
      this.img.setValign(cT.getLength(fx.getValign(), fx.getStyle().getMathsize()))
    }
    if (fx.getHeight() != null) {
      this.img.setHeight(cT.getLength(fx.getHeight(), fx.getStyle().getMathsize()))
    }
    if (fx.getWidth() != null) {
      this.img.setWidth(cT.getLength(fx.getWidth(), fx.getStyle().getMathsize()))
    }
    if (fx.getHeight() == null || fx.getWidth() == null) {
      by.calculateDimensionForImage(this.img)
    }
    if (this.img.getWidth() > 0 && this.img.getHeight() > 0) {
      fw.getShapeList().add(this.img)
    }
  };
  eA.prototype.calculateChildrenDimension = function () {
  };
  eA.prototype.positionChildren = function () {
  };
  eA.prototype.calculateWidth = function () {
    var fw = this.getContenu();
    fw.setContenuWidth(this.img.getWidth())
  };
  eA.prototype.calculateHeight = function () {
    var fw = this.getContenu();
    fw.setContenuHeight(this.img.getHeight())
  };
  eA.prototype.calculateBaseline = function () {
    var fy = (this.getBean());
    var fw = this.getContenu();
    var fx = this.img.getHeight() + cT.getLength(fy.getValign(), this.img.getHeight());
    fw.setBaseline(fx)
  };
  eA.prototype.toString = function () {
    return ""
  };
  function O(fx, fw) {
    this.v = eC;
    this.v(fx, fw)
  }
  
  FMath_extend(O, eC);
  O.prototype.positionChildren = function () {
    var fw = this.getContenu();
    if ("rtl" == this.getDir()) {
      fw.putChildrenOneAfterOneRTL()
    } else {
      fw.putChildrenOneAfterOneLTR()
    }
    fw.moveChildrenOnBaseline(0);
    fw.returnYToZero()
  };
  O.prototype.calculateBaseline = function () {
    var fx = this.getContenu();
    for (var fw = 0; fw < fx.getPanelChildren().size(); fw++) {
      var fy = fx.getPanelChildren().get(fw);
      if (fy.getBaseline() == F) {
        continue
      }
      fx.setBaseline(fy.getY() + fy.getBaseline())
    }
  };
  O.prototype.calculateSuperscriptLine = function () {
    var fx = this.getContenu();
    var fy = F;
    for (var fw = 0; fw < fx.getPanelChildren().size(); fw++) {
      var fz = fx.getPanelChildren().get(fw);
      if (fz.getSuperscriptline() == F) {
        continue
      }
      if (fz.getContenu().getSuperscriptline() > fy) {
        fy = fz.getContenu().getSuperscriptline()
      }
    }
    fx.setSuperscriptline(fy)
  };
  O.prototype.hasIsOnlyText = function () {
    var fx = this.getContenu();
    for (var fw = 0; fw < fx.getPanelChildren().size(); fw++) {
      var fy = fx.getPanelChildren().get(fw);
      if (!(fy instanceof bo)) {
        return false
      }
    }
    return true
  };
  O.prototype.getMaxMathsize = function () {
    return this.getBean().getStyle().getMathsize()
  };
  O.prototype.isBreakableTokenPanelBefore = function (fy, fA) {
    var fx = this.getContenu();
    if (fx.getPanelChildren().size() == 1) {
      var fz = fx.getPanelChildren().get(0);
      if (!this.isBreakableTokenChildBefore(fz, fy)) {
        return false
      }
    }
    for (var fw = 0; fw < fx.getPanelChildren().size(); fw++) {
      var fz = fx.getPanelChildren().get(fw);
      if (fz.getX() + fz.getWidth() > fy && fw == 0) {
        if (!this.isBreakableTokenChildBefore(fz, fy - fz.getX())) {
          return false
        }
      }
    }
    return true
  };
  O.prototype.isBreakableTokenChildBefore = function (fy, fx) {
    if (fy instanceof eA) {
      return false
    }
    if (fy instanceof bo) {
      var fw = fy;
      return fw.isBreakableTextBefore(fx)
    }
    return true
  };
  O.prototype.breakToken = function (fJ, fy) {
    var fE = this.getContenu();
    var fA = new aT();
    var fH = false;
    var fG = 0;
    for (var fB = 0; fB < fE.getPanelChildren().size(); fB++) {
      var fI = fE.getPanelChildren().get(fB);
      if (fH) {
        fA.add(fI)
      } else {
        if (fI.getX() + fI.getWidth() > fJ) {
          var fz = this.isBreakableTokenChildBefore(fI, fJ - fI.getX());
          if (!fz) {
            fA.add(fI);
            fG = fB
          } else {
            if (fI instanceof bo) {
              var fD = fI;
              var fC = fD.breakText(fJ - fI.getX());
              if (fC != null) {
                fA.add(fC);
                fG = fB + 1
              }
            }
          }
          fH = true
        }
      }
    }
    if (fA.size() == 0) {
      return null
    }
    var fx = this.getBean();
    var fL = fx.getChildren().size();
    for (var fB = 0; fB < fL; fB++) {
      if (fB >= fG) {
        fx.getChildren().remove(fG);
        fE.getPanelChildren().remove(fG)
      }
    }
    this.calculateWidth();
    var fK = this.getNewBean(this.getBean());
    fK.setStyle(this.getBean().getStyle().getCopy());
    fK.setCssstyle(this.getBean().getCssstyle());
    fK.setCurrentDefStyle(this.getBean().getCurrentDefStyle());
    var fF = this.getNewPanel(fK, this.getParent());
    for (var fB = 0; fB < fA.size(); fB++) {
      var fw = fA.get(fB);
      fF.getContenu().getPanelChildren().add(fw);
      fK.addChild(fw.getBean())
    }
    fF.calculateWidth();
    fF.getContenu().setContenuHeight(fE.getContenuHeight());
    return fF
  };
  O.prototype.getNewPanel = function (fx, fw) {
    if (fx instanceof ac) {
      return new bM(fx, this.getParent())
    }
    if (fx instanceof A) {
      return new aJ(fx, this.getParent())
    }
    return null
  };
  O.prototype.getNewBean = function (fw) {
    if (fw instanceof ac) {
      return new ac(this.getBean().getParentBean())
    }
    if (fw instanceof A) {
      return new A(this.getBean().getParentBean())
    }
    return null
  };
  function ed(fx, fw) {
    this.y = O;
    this.y(fx, fw)
  }
  
  FMath_extend(ed, O);
  function dp(fx, fw) {
    this.scaleMathML = 1;
    this.scaleView = 1;
    this.breaking = false;
    this.w = bz;
    this.w(fx, fw)
  }
  
  FMath_extend(dp, bz);
  dp.prototype.addChildrenToPanel = function () {
    eC.prototype.addChildrenToPanel.call(this);
    bD.processForm(this)
  };
  dp.prototype.maxWidthLineBreaking = function () {
    var fw = this.getBean();
    var fx = fw.getMaxwidth();
    var fA = fw.getOverflow();
    if (fx != null) {
      var fy = cT.getLength(fx, fw.getStyle().getMathsize());
      if ("truncate" == fA) {
        this.getContenu().setContenuWidth(fy)
      } else {
        if ("scale" == fA) {
          if (this.getWidth() > fy) {
            var fz = ((fy * 1) - this.getWidthLeft() - this.getWidthRight()) / this.getWidth();
            this.setScale(fz)
          }
        } else {
          if (!this.breaking) {
            this.shrinkPanelBefore(fy, fy);
            this.breaking = true
          }
        }
      }
    }
  };
  dp.prototype.endCalculateDimension = function () {
    bz.prototype.endCalculateDimension.call(this);
    this.cleanupStretchy();
    cd.processPanels(this)
  };
  dp.prototype.getScale = function () {
    return this.scaleMathML * this.scaleView
  };
  dp.prototype.setScale = function (fw) {
    this.scaleMathML = fw
  };
  dp.prototype.setScaleView = function (fw) {
    this.scaleView = fw
  };
  function db(fx, fw) {
    this.mencloseBean = null;
    this.contenu = null;
    this.w = bz;
    this.w(fx, fw);
    this.mencloseBean = this.getBean();
    this.contenu = this.getContenu()
  }
  
  FMath_extend(db, bz);
  db.prototype.positionChildren = function () {
    bz.prototype.positionChildren.call(this);
    this.calculateWidth();
    this.calculateHeight();
    var fN = this.mencloseBean.getNotation();
    if (fN == null) {
      fN = "longdiv"
    }
    fN = fu.replace(fN, "roundedbox", "roundedbx");
    var f5 = cT.getLineThickness(this.mencloseBean.getSpace(), this.mencloseBean.getStyle().getMathsize());
    var fV = cT.getLineThickness(this.mencloseBean.getLinethickness(), this.mencloseBean.getStyle().getMathsize());
    var fy = cT.getLineThickness(this.mencloseBean.getRounded(), this.mencloseBean.getStyle().getMathsize());
    var f1 = cT.getLineThickness("medium", this.mencloseBean.getStyle().getMathsize());
    var fS = ")";
    var fM = e8.getWidth(fS, this.contenu.getContenuHeight() + f1 + f5);
    var fQ = ad.getSqrtWidth(this.contenu.getContenuHeight() + f5);
    var f0 = ad.getSqrtHeight(this.contenu.getContenuHeight() + f5);
    var fL = ad.getSqrtTick(this.contenu.getContenuHeight() + f5);
    var f3 = (this.contenu.getContenuWidth() * 0.1);
    var fA = (this.contenu.getContenuHeight() * 0.2);
    var fP = 0;
    var fz = 0;
    var fT = 0;
    var fO = 0;
    if (fN.indexOf("madruwb") > -1) {
      if (fP < (f3 + f5)) {
        fP = f3 + f5
      }
    }
    if (fN.indexOf("longdiv") > -1) {
      if (fT < (f1 + f5)) {
        fT = f1 + f5
      }
      if (fP < (fM + f5)) {
        fP = fM + f5
      }
    }
    if (fN.indexOf("actuarial") > -1) {
      if (fT < (fV + f5)) {
        fT = fV + f5
      }
      if (fz < f5) {
        fz = f5
      }
    }
    if (fN.indexOf("left") > -1) {
      if (fP < (fV + f5)) {
        fP = fV + f5
      }
    }
    if (fN.indexOf("right") > -1) {
      if (fz < f5) {
        fz = f5
      }
    }
    if (fN.indexOf("top") > -1) {
      if (fT < (fV + f5)) {
        fT = fV + f5
      }
    }
    if (fN.indexOf("bottom") > -1) {
      if (fO < f5) {
        fO = f5
      }
    }
    if (fN.indexOf("box") > -1 || fN.indexOf("roundedbx") > -1 || fN.indexOf("circle") > -1 || fN.indexOf("updiagonalstrike") > -1 || fN.indexOf("downdiagonalstrike") > -1) {
      if (fT < (fV + f5)) {
        fT = fV + f5
      }
      if (fP < (fV + f5)) {
        fP = fV + f5
      }
      if (fO < f5) {
        fO = f5
      }
      if (fz < f5) {
        fz = f5
      }
    }
    if (fN.indexOf("radical") > -1) {
      if ("rtl" == this.getDir()) {
        if (fz < fQ) {
          fz = fQ
        }
      } else {
        if (fP < fQ) {
          fP = fQ
        }
      }
      if (fT < (fL + f5 + 1)) {
        fT = fL + f5 + 1
      }
    }
    this.contenu.moveChildrenOnY(fT);
    this.contenu.moveShapeOnY(fT);
    this.contenu.moveChildrenOnX(fP);
    this.contenu.moveShapeOnX(fP);
    var fZ = fP + this.contenu.getContenuWidth() + fz;
    var f6 = fT + this.contenu.getContenuHeight() + fO;
    if (fN.indexOf("radical") > -1) {
      if (f6 < f0) {
        f6 = f0
      }
    }
    if (fN.indexOf("longdiv") > -1) {
      var f2 = fZ;
      if (fz > 0) {
        f2 = f2 + fV / 2
      }
      var fR = f6;
      if (fO > 0) {
        fR = fR + fV
      }
      var fW = new a9(0, 0, f2 - fM + 1, fR);
      c7.drawLongDiv(this.contenu, fW, this.mencloseBean.getStyle(), f1, aw.getColor(this.mencloseBean.getStyle().getColor(), 0), fM)
    }
    if (fN.indexOf("actuarial") > -1) {
      var fK = f6;
      if (fO > 0) {
        fK = fK + fV
      }
      this.drawHorizontalLine(0, fV / 2, fZ + fV, fV);
      this.drawVerticalLine(fZ + fV / 2, 0, fK, fV)
    }
    if (fN.indexOf("madruwb") > -1) {
      var fU = fZ;
      if (fz > 0) {
        fU = fU + fV / 2
      }
      var fH = f6;
      if (fO > 0) {
        fH = fH + fV
      }
      var fW = new a9(0, 0, fU, fH + fA);
      c7.drawMadruwb(this.contenu, fW, this.mencloseBean.getStyle(), "ltr")
    }
    if (fN.indexOf("left") > -1) {
      var fx = f6;
      if (fO > 0) {
        fx = fx + fV
      }
      this.drawVerticalLine(fV / 2, 0, fx, fV)
    }
    if (fN.indexOf("right") > -1) {
      var f4 = f6;
      if (fO > 0) {
        f4 = f4 + fV
      }
      this.drawVerticalLine(fZ + fV / 2, 0, f4, fV)
    }
    if (fN.indexOf("verticalstrike") > -1) {
      var fD = f6;
      if (fO > 0) {
        fD = fD + fV
      }
      var fY = fZ;
      if (fz > 0) {
        fY = fY + fV
      }
      this.drawVerticalLine(fY / 2, 0, fD, fV)
    }
    if (fN.indexOf("horizontalstrike") > -1) {
      var fD = f6;
      if (fO > 0) {
        fD = fD + fV
      }
      var fY = fZ;
      if (fz > 0) {
        fY = fY + fV
      }
      this.drawHorizontalLine(0, fD / 2, fY, fV)
    }
    if (fN.indexOf("top") > -1) {
      var fw = fZ;
      if (fz > 0) {
        fw = fw + fV
      }
      this.drawHorizontalLine(0, fV / 2, fw, fV)
    }
    if (fN.indexOf("bottom") > -1) {
      var fF = fZ;
      if (fz > 0) {
        fF = fF + fV
      }
      this.drawHorizontalLine(0, f6 + fV / 2, fF, fV)
    }
    if (fN.indexOf("updiagonalstrike") > -1) {
      var fJ = new cJ();
      fJ.setLinethickness(fV);
      fJ.setBorderColor(aw.getColor(this.mencloseBean.getStyle().getColor(), 0));
      fJ.setX(fV / 2);
      fJ.setY(f6 + fV / 2);
      fJ.setEndX(fZ + fV / 2);
      fJ.setEndY(fV / 2);
      fJ.setWidth(fZ + fV / 2);
      fJ.setHeight(fV / 2);
      this.getContenu().getShapeList().add(fJ)
    }
    if (fN.indexOf("downdiagonalstrike") > -1) {
      var fI = new cJ();
      fI.setLinethickness(fV);
      fI.setBorderColor(aw.getColor(this.mencloseBean.getStyle().getColor(), 0));
      fI.setX(fV / 2);
      fI.setY(fV / 2);
      fI.setEndX(fZ + fV / 2);
      fI.setEndY(f6 + fV / 2);
      fI.setWidth(fZ + fV / 2);
      fI.setHeight(f6 + fV / 2);
      this.getContenu().getShapeList().add(fI)
    }
    if (fN.indexOf("box") > -1) {
      var fG = new ec();
      fG.setAntialias(false);
      fG.setLinethickness(fV);
      fG.setBorderColor(aw.getColor(this.mencloseBean.getStyle().getColor(), 0));
      fG.setX(0);
      fG.setY(0);
      fG.setWidth(fZ + fV);
      fG.setHeight(f6 + fV);
      this.getContenu().getShapeList().add(fG)
    }
    if (fN.indexOf("roundedbx") > -1) {
      var fE = new ec();
      fE.setLinethickness(fV);
      fE.setBorderColor(aw.getColor(this.mencloseBean.getStyle().getColor(), 0));
      fE.setX(0);
      fE.setY(0);
      fE.setWidth(fZ + fV);
      fE.setHeight(f6 + fV);
      fE.setRondedCorner(fy);
      this.getContenu().getShapeList().add(fE)
    }
    if (fN.indexOf("circle") > -1) {
      var fB = new fr();
      fB.setLinethickness(fV);
      fB.setBorderColor(aw.getColor(this.mencloseBean.getStyle().getColor(), 0));
      var fX = fZ;
      if (fz > 0) {
        fX = fX + fV
      }
      var fC = f6;
      if (fO > 0) {
        fC = fC + fV
      }
      fB.setX(fX / 2);
      fB.setY(fC / 2);
      fB.setRadiusX(fX / 2 - fV / 2);
      fB.setRadiusY(fC / 2 - fV / 2);
      fB.setWidth(fX / 2);
      fB.setHeight(fC / 2);
      this.getContenu().getShapeList().add(fB)
    }
    if (fN.indexOf("radical") > -1) {
      if ("rtl" == this.getDir()) {
        ad.drawSqrt(this.contenu, fZ - fQ, 0, fZ - fQ, this.contenu.getContenuHeight(), fQ, this.mencloseBean.getStyle(), false, "0", this.getDir())
      } else {
        ad.drawSqrt(this.contenu, 0, 0, fZ - fQ + f1 / 2, this.contenu.getContenuHeight(), fQ, this.mencloseBean.getStyle(), false, "0", this.getDir())
      }
    }
    this.calculateWidth();
    this.calculateHeight()
  };
  db.prototype.drawVerticalLine = function (fx, fB, fw, fz) {
    var fy = new cJ();
    fy.setAntialias(false);
    fy.setLinethickness(fz);
    fy.setBorderColor(aw.getColor(this.mencloseBean.getStyle().getColor(), 0));
    var fA = fz / 2;
    if (fz % 2 == 1) {
      fA = fA + 1
    }
    fy.setX(fx);
    fy.setY(fB);
    fy.setEndX(fx);
    fy.setEndY(fB + fw);
    fy.setWidth(fA);
    fy.setHeight(fw);
    this.getContenu().getShapeList().add(fy)
  };
  db.prototype.drawHorizontalLine = function (fw, fB, fz, fy) {
    var fx = new cJ();
    fx.setAntialias(false);
    fx.setLinethickness(fy);
    fx.setBorderColor(aw.getColor(this.mencloseBean.getStyle().getColor(), 0));
    var fA = fy / 2;
    if (fy % 2 == 1) {
      fA = fA + 1
    }
    fx.setX(fw);
    fx.setY(fB);
    fx.setEndX(fw + fz);
    fx.setEndY(fB);
    fx.setWidth(fz);
    fx.setHeight(fA);
    this.getContenu().getShapeList().add(fx)
  };
  function bA(fx, fw) {
    this.mLongdivBean = null;
    this.contenu = null;
    this.v = eC;
    this.v(fx, fw);
    this.mLongdivBean = this.getBean();
    this.contenu = this.getContenu()
  }
  
  FMath_extend(bA, eC);
  bA.prototype.positionChildren = function () {
    var fH = this.mLongdivBean.getLongdivstyle();
    var fz = this.contenu.getPanelChildren().get(0);
    var fI = this.contenu.getPanelChildren().get(1);
    var fN = null;
    var fE = null;
    var fB = null;
    if (this.contenu.getPanelChildren().size() > 2) {
      fN = this.contenu.getPanelChildren().get(2)
    }
    if (this.contenu.getPanelChildren().size() > 3) {
      fE = this.contenu.getPanelChildren().get(3)
    }
    if (this.contenu.getPanelChildren().size() > 4) {
      fB = this.contenu.getPanelChildren().get(4)
    }
    if ("righttop" == fH) {
      var fG = fz.getAllLines().get(0);
      var fy = fG.getHeight();
      var fM = fz.getWidth();
      fI.setY(fy + 3 * fz.getRowSpaces());
      fI.setX(fM + 3 * fz.getRowSpaces());
      var fx = cT.getLineThickness("medium", this.mLongdivBean.getStyle().getMathsize());
      this.drawHorizontalLine(0, (fy + 1.5 * fz.getRowSpaces()), fM + 4 * fz.getRowSpaces() + fI.getWidth(), fx);
      this.drawVerticalLine((fM + fz.getRowSpaces()), (fy + 1.5 * fz.getRowSpaces()), fI.getHeight() + 3 * fz.getRowSpaces(), fx);
      this.drawHorizontalLine((fM + fz.getRowSpaces() - fx / 2), (fy + 1.5 * fz.getRowSpaces()) + fI.getHeight() + 3 * fz.getRowSpaces(), (3 * fz.getRowSpaces() + fI.getWidth() + 0.5 * fx), fx)
    } else {
      if ("stackedrightright" == fH) {
        fI.setX(fz.getWidth() + 3 * fz.getRowSpaces());
        fN.setX(fz.getWidth() + 3 * fz.getRowSpaces());
        fN.setY(fI.getHeight() + 3 * fz.getRowSpaces());
        var fJ = fN.getWidth();
        if (fJ < fI.getWidth()) {
          fJ = fI.getWidth()
        }
        var fx = cT.getLineThickness("medium", this.mLongdivBean.getStyle().getMathsize());
        this.drawVerticalLine((fz.getWidth() + 1.5 * fz.getRowSpaces()), 0, fz.getHeight(), fx);
        this.drawHorizontalLine((fz.getWidth() + 1.5 * fz.getRowSpaces()), (fI.getHeight() + 1.5 * fz.getRowSpaces()), (fJ + 1.5 * fz.getRowSpaces()), fx)
      } else {
        if ("mediumstackedrightright" == fH) {
          var fw = fz.getAllLines();
          if (fw.size() > 1) {
            var fF = fw.get(0);
            var fC = fw.get(1);
            var fD = fF.getWidth();
            if (fC.getWidth() > fD) {
              fD = fC.getWidth()
            }
            fI.setX(fD + 3 * fz.getRowSpaces());
            fN.setX(fD + 3 * fz.getRowSpaces());
            fN.setY(fI.getHeight() + 3 * fz.getRowSpaces());
            var fJ = fN.getWidth();
            if (fJ < fI.getWidth()) {
              fJ = fI.getWidth()
            }
            fD = (fD + 1.5 * fz.getRowSpaces());
            var fx = cT.getLineThickness("medium", this.mLongdivBean.getStyle().getMathsize());
            this.drawVerticalLine(fD, 0, fI.getHeight() + 4 * fz.getRowSpaces() + fN.getHeight(), fx);
            this.drawHorizontalLine(fD, (fI.getHeight() + 1.5 * fz.getRowSpaces()), (fJ + 1.5 * fz.getRowSpaces()), fx)
          }
        } else {
          if ("shortstackedrightright" == fH) {
            var fw = fz.getAllLines();
            if (fw.size() > 1) {
              var fF = fw.get(0);
              var fC = fw.get(1);
              var fD = fF.getWidth();
              if (fC.getWidth() > fD) {
                fD = fC.getWidth()
              }
              fI.setX(fD + 3 * fz.getRowSpaces());
              fN.setX(fD + 3 * fz.getRowSpaces());
              fN.setY(fI.getHeight() + 3 * fz.getRowSpaces());
              var fJ = fN.getWidth();
              if (fJ < fI.getWidth()) {
                fJ = fI.getWidth()
              }
              fD = (fD + 1.5 * fz.getRowSpaces());
              var fx = cT.getLineThickness("medium", this.mLongdivBean.getStyle().getMathsize());
              this.drawVerticalLine(fD, 0, (fI.getHeight() + 1.5 * fz.getRowSpaces() + fx / 2), fx);
              this.drawHorizontalLine(fD, (fI.getHeight() + 1.5 * fz.getRowSpaces()), (fJ + 1.5 * fz.getRowSpaces()), fx)
            }
          } else {
            if ("left/\\right" == fH || "left)(right" == fH) {
              var fw = fz.getAllLines();
              if (fw.size() > 0) {
                var fF = fw.get(0);
                fE.setX(fI.getWidth() + 4 * fz.getRowSpaces());
                fz.setX(fE.getX() + fE.getWidth() + 4 * fz.getRowSpaces());
                fB.setX(fz.getX() + fF.getWidth() + 4 * fz.getRowSpaces());
                fN.setX(fB.getX() + fB.getWidth() + 4 * fz.getRowSpaces());
                fE.setY((fN.getHeight() - fE.getHeight()) / 2);
                fB.setY((fN.getHeight() - fB.getHeight()) / 2)
              }
            } else {
              if (":right=right" == fH) {
                var fw = fz.getAllLines();
                if (fw.size() > 0) {
                  var fF = fw.get(0);
                  fE.setX(fF.getWidth() + 4 * fz.getRowSpaces());
                  fI.setX(fE.getX() + fE.getWidth() + 4 * fz.getRowSpaces());
                  fB.setX(fI.getX() + fI.getWidth() + 4 * fz.getRowSpaces());
                  fN.setX(fB.getX() + fB.getWidth() + 4 * fz.getRowSpaces());
                  fE.setY((fN.getHeight() - fE.getHeight()) / 2);
                  fB.setY((fN.getHeight() - fB.getHeight()) / 2)
                }
              } else {
                if ("stackedleftleft" == fH) {
                  var fJ = fN.getWidth();
                  if (fJ < fI.getWidth()) {
                    fJ = fI.getWidth()
                  }
                  fI.setX(fJ - fI.getWidth());
                  fN.setX(fJ - fN.getWidth());
                  fz.setX(fJ + 3 * fz.getRowSpaces());
                  fN.setY(fI.getHeight() + 3 * fz.getRowSpaces());
                  var fx = cT.getLineThickness("medium", this.mLongdivBean.getStyle().getMathsize());
                  this.drawVerticalLine((fJ + 1.5 * fz.getRowSpaces()), 0, fz.getHeight(), fx);
                  this.drawHorizontalLine(0, (fI.getHeight() + 1.5 * fz.getRowSpaces()), (fJ + 1.5 * fz.getRowSpaces()), fx)
                } else {
                  if ("stackedleftlinetop" == fH) {
                    var fG = fz.getAllLines().get(0);
                    var fy = fG.getHeight();
                    var fx = cT.getLineThickness("medium", this.mLongdivBean.getStyle().getMathsize());
                    fN.setX(fI.getWidth() + 3 * fz.getRowSpaces());
                    fI.setY(fN.getHeight() + 3 * fz.getRowSpaces());
                    fz.setX(fI.getWidth() + 3 * fz.getRowSpaces());
                    fz.setY(fN.getHeight() + 3 * fz.getRowSpaces());
                    this.drawHorizontalLine(0, (fI.getY() + fI.getHeight() + 1.5 * fz.getRowSpaces()), (fI.getWidth() + 1.5 * fz.getRowSpaces()), fx);
                    this.drawHorizontalLine((fI.getWidth() + 1.5 * fz.getRowSpaces()), (fN.getHeight() + 1.5 * fz.getRowSpaces()), (fz.getWidth() + 1.5 * fz.getRowSpaces()), fx);
                    this.drawVerticalLine((fI.getWidth() + 1.5 * fz.getRowSpaces()), (fN.getHeight() + 1.5 * fz.getRowSpaces() - fx / 2), fI.getHeight() + 3 * fz.getRowSpaces() + fx, fx)
                  } else {
                    var fG = fz.getAllLines().get(0);
                    var fy = fG.getHeight();
                    var fA = new a9(fI.getWidth() + fz.getRowSpaces(), fy + fz.getRowSpaces() * 1.5, fz.getWidth() + fz.getRowSpaces(), fI.getHeight() + 3 * fz.getRowSpaces());
                    var fL = ")";
                    var fK = e8.getWidth(fL, fA.getHeight());
                    var fx = cT.getLineThickness("medium", this.mLongdivBean.getStyle().getMathsize());
                    c7.drawLongDiv(this.contenu, fA, this.mLongdivBean.getStyle(), fx, aw.getColor(this.mLongdivBean.getStyle().getColor(), 0), fK);
                    fI.setY(fy + 3 * fz.getRowSpaces());
                    fz.setX(fI.getWidth() + fK + 2 * fz.getRowSpaces())
                  }
                }
              }
            }
          }
        }
      }
    }
    this.contenu.returnYToZero()
  };
  bA.prototype.drawVerticalLine = function (fx, fA, fw, fz) {
    var fy = new cJ();
    fy.setAntialias(false);
    fy.setLinethickness(fz);
    fy.setBorderColor(aw.getColor(this.mLongdivBean.getStyle().getColor(), 0));
    fy.setX(fx);
    fy.setY(fA);
    fy.setEndX(fx);
    fy.setEndY(fA + fw);
    this.getContenu().getShapeList().add(fy)
  };
  bA.prototype.drawHorizontalLine = function (fw, fA, fz, fy) {
    var fx = new cJ();
    fx.setAntialias(false);
    fx.setLinethickness(fy);
    fx.setBorderColor(aw.getColor(this.mLongdivBean.getStyle().getColor(), 0));
    fx.setX(fw);
    fx.setY(fA);
    fx.setEndX(fw + fz);
    fx.setEndY(fA);
    fx.setWidth(fz);
    this.getContenu().getShapeList().add(fx)
  };
  function y(fx, fw) {
    this.multiBean = null;
    this.contenu = null;
    this.v = eC;
    this.v(fx, fw);
    this.multiBean = this.getBean();
    this.contenu = this.getContenu()
  }
  
  FMath_extend(y, eC);
  y.prototype.positionChildren = function () {
    var fK = new aT();
    var fM = new aT();
    var fJ = null;
    var fL = new aT();
    var fP = new aT();
    var fI = this.multiBean.getSupscriptshift();
    var fO = this.multiBean.getSubscriptshift();
    var fA = this.multiBean.getSupscriptPostion();
    var fE = this.multiBean.getSubscriptPostion();
    var fw = this.contenu.getPanelChildren();
    if (fw == null || fw.size() == 0) {
      return
    }
    fJ = fw.get(0);
    this.updateSubSupZeroBase(fJ);
    var fG = true;
    for (var fH = 1; fH < fw.size(); fH++) {
      var fx = fw.get(fH);
      if (fx instanceof aa) {
        fG = false;
        continue
      }
      var fD = fw.get(fH);
      fH++;
      var fC = fw.get(fH);
      if (fG) {
        if ("rtl" == this.getDir()) {
          fM.addTo(0, fD);
          fK.addTo(0, fC)
        } else {
          fP.add(fD);
          fL.add(fC)
        }
      } else {
        if ("rtl" == this.getDir()) {
          fP.addTo(0, fD);
          fL.addTo(0, fC)
        } else {
          fM.add(fD);
          fK.add(fC)
        }
      }
    }
    var fF = 0;
    for (var fH = 0; fH < fK.size(); fH++) {
      var fy = fK.get(fH);
      var fz = fM.get(fH);
      fy.setX(fF);
      fz.setX(fF);
      if (fy.getWidth() > fz.getWidth()) {
        fF = fF + fy.getWidth()
      } else {
        fF = fF + fz.getWidth()
      }
    }
    fJ.setX(fF);
    fF = fF + fJ.getWidth();
    for (var fH = 0; fH < fL.size(); fH++) {
      var fy = fL.get(fH);
      var fz = fP.get(fH);
      fy.setX(fF);
      fz.setX(fF);
      if (fy.getWidth() > fz.getWidth()) {
        fF = fF + fy.getWidth()
      } else {
        fF = fF + fz.getWidth()
      }
    }
    for (var fH = 0; fH < fK.size(); fH++) {
      var fy = fK.get(fH);
      var fB = (cT.getLength(fA, fy.getHeight()) * 0.25);
      var fN = cT.getLength(fI, fy.getBean().getStyle().getMathsize());
      fy.setY(fJ.getSuperscriptline() - fy.getAxis() - fN + fB)
    }
    for (var fH = 0; fH < fM.size(); fH++) {
      var fz = fM.get(fH);
      var fN = cT.getLength(fO, fz.getBean().getStyle().getMathsize());
      if (fJ.getBaseline() != F) {
        fz.setY(fJ.getY() + fJ.getBaseline() - fz.getAxis() + fN)
      } else {
        fz.setY(fJ.getY() + fJ.getHeight() - fz.getAxis() + fN)
      }
    }
    for (var fH = 0; fH < fL.size(); fH++) {
      var fy = fL.get(fH);
      var fB = (cT.getLength(fA, fy.getHeight()) * 0.25);
      var fN = cT.getLength(fI, fy.getBean().getStyle().getMathsize());
      fy.setY(fJ.getSuperscriptline() - fy.getAxis() - fN + fB)
    }
    for (var fH = 0; fH < fP.size(); fH++) {
      var fz = fP.get(fH);
      var fN = cT.getLength(fO, fz.getBean().getStyle().getMathsize());
      if (fJ.getBaseline() != F) {
        fz.setY(fJ.getY() + fJ.getBaseline() - fz.getAxis() + fN)
      } else {
        fz.setY(fJ.getY() + fJ.getHeight() - fz.getAxis() + fN)
      }
    }
    this.contenu.returnYToZero()
  };
  y.prototype.calculateBaseline = function () {
    var fw = this.contenu.getPanelChildren().get(0);
    if (fw.getBaseline() != F) {
      this.contenu.setBaseline(fw.getY() + fw.getBaseline());
      this.contenu.setSuperscriptline(this.contenu.getBaseline())
    } else {
      this.contenu.setSuperscriptline(this.contenu.getContenuHeight())
    }
  };
  y.prototype.calculateAxisLine = function () {
    eC.prototype.calculateAxisLine.call(this);
    var fw = this.contenu.getPanelChildren().get(0);
    if (fw.getAxis() != F) {
      this.contenu.setAxis(fw.getY() + fw.getAxis())
    }
  };
  y.prototype.calculateSuperscriptLine = function () {
    if (this.contenu.getBaseline() != F) {
      this.contenu.setSuperscriptline(this.contenu.getBaseline())
    } else {
      this.contenu.setSuperscriptline(this.contenu.getContenuHeight())
    }
  };
  y.prototype.isVerticalStretchy = function () {
    var fw = this.contenu.getPanelChildren().get(0);
    return fw.isVerticalStretchy()
  };
  function Y(fx, fw) {
    this.v = eC;
    this.v(fx, fw)
  }
  
  FMath_extend(Y, eC);
  function cu(fx, fw) {
    this.v = eC;
    this.v(fx, fw)
  }
  
  FMath_extend(cu, eC);
  function s(fx, fw) {
    this.y = O;
    this.y(fx, fw)
  }
  
  FMath_extend(s, O);
  function e9(fy, fx) {
    this.largeOperator = false;
    this.lspace = 0;
    this.rspace = 0;
    this.stretchyVertical = false;
    this.stretchyHorizontal = false;
    this.CONST_STRETCH_V = 0.3;
    this.CONST_STRETCH_H = 0;
    this.realHeight = 0;
    this.realWidth = 0;
    this.saveOneTime = false;
    this.y = O;
    this.y(fy, fx);
    var fw = this.getBean();
    this.largeOperator = fw.getLargeop()
  }
  
  FMath_extend(e9, O);
  e9.prototype.addChildrenToPanel = function () {
    eC.prototype.addChildrenToPanel.call(this);
    var fw = this.getBean();
    if ("rtl" == this.getDir()) {
      this.rspace = fw.getLspace();
      this.lspace = fw.getRspace()
    } else {
      this.lspace = fw.getLspace();
      this.rspace = fw.getRspace()
    }
  };
  e9.prototype.calculateChildrenDimension = function () {
    var fx = this.getContenu();
    for (var fw = 0; fw < fx.getPanelChildren().size(); fw++) {
      var fy = fx.getPanelChildren().get(fw);
      if (fy.isChangedDimension()) {
        fy.calculateDimension()
      }
    }
  };
  e9.prototype.positionChildren = function () {
    O.prototype.positionChildren.call(this);
    var fw = this.getContenu();
    if (this.lspace > 0) {
      fw.moveChildrenOnX(this.lspace);
      fw.moveShapeOnX(this.lspace)
    }
  };
  e9.prototype.calculateWidth = function () {
    eC.prototype.calculateWidth.call(this);
    var fw = this.getContenu();
    fw.setContenuWidth(fw.getContenuWidth() + this.rspace)
  };
  e9.prototype.calculateBaseline = function () {
    var fx = this.getBean();
    var fw = this.getContenu();
    if (!e8.displayLikeText(this.getText()) || fx.getLargeop()) {
      fw.setBaseline(F);
      fw.setSuperscriptline(F)
    } else {
      fw.setBaselineFromFirstChild()
    }
  };
  e9.prototype.saveOneTimeBeforeStretch = function () {
    if (this.saveOneTime) {
      return
    }
    var fw = this.getContenu();
    this.realHeight = fw.getContenuHeight();
    this.realWidth = fw.getContenuWidth();
    this.saveOneTime = true
  };
  e9.prototype.stretchChildrenVertical = function () {
    var fy = this.getBean();
    if (fy.isVerticalStretchy()) {
      var fw = fy.getMinsize();
      var fB = fy.getMaxsize();
      if (fw != null) {
        var fA = cT.hasUnits(fw);
        var fx = cT.getLength(fw, 1);
        if (fx > 1) {
          this.calculateNewHeight(fx, fA)
        }
      }
      if (!(fB == null || "infinity" == fB)) {
        var fA = cT.hasUnits(fB);
        var fz = cT.getLength(fB, 1);
        if (fz < 1) {
          this.calculateNewHeight(fz, fA)
        }
      }
    }
  };
  e9.prototype.stretchChildrenHorizontal = function () {
    var fz = this.getBean();
    if (fz.isHorizontalStretchy()) {
      var fw = fz.getMinsize();
      var fC = fz.getMaxsize();
      if (fw != null) {
        var fB = cT.hasUnits(fw);
        var fy = cT.getLength(fw, 1);
        if (fy > 1) {
          if (fB) {
            this.stretchContentHorizontal(fy)
          } else {
            var fx = (this.realWidth * fy);
            this.stretchContentHorizontal(fx)
          }
        }
      }
      if (!(fC == null || "infinity" == fC)) {
        var fB = cT.hasUnits(fC);
        var fA = cT.getLength(fC, 1);
        if (fA < 1) {
          if (fB) {
            this.stretchContentHorizontal(fA)
          } else {
            var fx = (this.realWidth * fA);
            this.stretchContentHorizontal(fx)
          }
        }
      }
    }
  };
  e9.prototype.endCalculateDimension = function () {
    if ("rtl" == this.getDir()) {
      this.drawSymetricVertical()
    }
  };
  e9.prototype.calculateNewHeight = function (fx, fy) {
    var fw = (this.realHeight * fx);
    if (fy) {
      this.stretchContentVertical(fx)
    } else {
      this.stretchContentVertical(fw)
    }
  };
  e9.prototype.cleanupStretchy = function () {
    if (this.stretchyHorizontal || this.stretchyVertical) {
      var fw = this.getContenu();
      fw.getPanelChildren().clear()
    }
  };
  e9.prototype.getText = function () {
    var fy = this.getBean();
    var fx = this.getBean().getChildren();
    if (fx != null && fx.size() > 0) {
      var fw = fx.get(0);
      var fz = fw.getText();
      return fz
    }
    return ""
  };
  e9.prototype.drawSymetricVertical = function () {
    var fy = this.getContenu();
    if (fy.getPanelChildren().size() == 1) {
      var fx = fy.getPanelChildren().get(0);
      var fA = fx.getContenu().getShapeList();
      if (fA.size() == 1) {
        var fw = fA.get(0);
        if (fw instanceof q) {
          var fz = fw;
          fz.setFlipVertical(true)
        }
      }
    }
  };
  e9.prototype.stretchContentHorizontal = function (fA) {
    var fy = this.getBean();
    var fC = this.getContenu();
    var fx = this.getBean().getChildren();
    if (fx != null && fx.size() > 0) {
      var fI = fx.get(0);
      var fH = fI.getText();
      if (fH == "|||") {
        fH = bB.convertToChars("&#x2980;")
      } else {
        if (fH == "||") {
          fH = bB.convertToChars("&#x2016;")
        }
      }
      if (!e8.isHStretchy(fH)) {
        return
      }
      var fF = fy.getMaxsize();
      if (!(fF == null || "infinity" == fF)) {
        var fB = cT.hasUnits(fF);
        var fw = cT.getLength(fF, 1);
        if (fB) {
          if (fA > fw) {
            fA = (fw)
          }
        } else {
          if (fA > (this.realWidth * fw)) {
            fA = (this.realWidth * fw)
          }
        }
      }
      var fG = fy.getMinsize();
      if (fG != null) {
        var fB = cT.hasUnits(fG);
        var fz = cT.getLength(fG, 1);
        if (fB) {
          if (fA < fz) {
            fA = (fz)
          }
        } else {
          if (fA < (this.realWidth * fz)) {
            fA = (this.realWidth * fz)
          }
        }
      }
      if (fA == this.realWidth) {
        return
      }
      fA = fA - 2;
      fC.getShapeList().clear();
      var fJ = 0;
      if (this.stretchyVertical) {
        fJ = fC.getContenuHeight()
      } else {
        var fE = this.realWidth + (fA - this.realWidth) * this.CONST_STRETCH_H;
        if (this.realWidth > fA) {
          fE = fA
        }
        fJ = e8.getHeight(fH, fE)
      }
      var fD = new a9(1, 1, fA, fJ);
      c7.draw(fC, fH, fD, this.getBean().getStyle(), this.getDir());
      fC.setContenuHeight(fJ + 2);
      fC.setContenuWidth(fA + 2);
      fC.setBaseline(F);
      fC.setSuperscriptline(F);
      fC.setAxis((fJ + 2) / 2);
      this.stretchyVertical = true
    }
  };
  e9.prototype.stretchContentVertical = function (fx) {
    var fz = this.getBean();
    var fE = this.getContenu();
    var fy = this.getBean().getChildren();
    if (fy != null && fy.size() > 0) {
      var fJ = fy.get(0);
      var fI = fJ.getText();
      if (fI == "|||") {
        fI = bB.convertToChars("&#x2980;")
      } else {
        if (fI == "||") {
          fI = bB.convertToChars("&#x2016;")
        }
      }
      if (!e8.isVStretchy(fI)) {
        return
      }
      var fG = fz.getMaxsize();
      if (!(fG == null || "infinity" == fG)) {
        var fD = cT.hasUnits(fG);
        var fw = cT.getLength(fG, 1);
        if (fD) {
          if (fx > fw) {
            fx = (fw)
          }
        } else {
          if (fw == 1) {
            return
          }
          if (fx > (this.realHeight * fw)) {
            fx = (this.realHeight * fw)
          }
        }
      }
      var fH = fz.getMinsize();
      if (fH != null) {
        var fD = cT.hasUnits(fH);
        var fA = cT.getLength(fH, 1);
        if (fD) {
          if (fx < fA) {
            fx = (fA)
          }
        } else {
          if (fx < (this.realHeight * fA)) {
            fx = (this.realHeight * fA)
          }
        }
      }
      if (fx == this.realHeight) {
        return
      }
      fx = fx - 2;
      fE.getShapeList().clear();
      var fB = this.realHeight + (fx - this.realHeight) * this.CONST_STRETCH_V;
      if (this.realHeight > fx) {
        fB = fx
      }
      var fC = e8.getWidth(fI, fB);
      var fF = new a9(1, 1, fC, fx);
      c7.draw(fE, fI, fF, this.getBean().getStyle(), this.getDir());
      fE.setContenuHeight(fx + 2);
      fE.setContenuWidth(fC + 2);
      fE.setBaseline(F);
      fE.setSuperscriptline(F);
      fE.setAxis((fx + 2) / 2);
      this.stretchyVertical = true
    }
  };
  e9.prototype.isVerticalStretchy = function () {
    var fw = this.getBean();
    return fw.isVerticalStretchy()
  };
  e9.prototype.isHorizontalStretchy = function () {
    var fw = this.getBean();
    return fw.isHorizontalStretchy()
  };
  e9.prototype.getLspace = function () {
    return this.lspace
  };
  e9.prototype.setLspace = function (fw) {
    this.lspace = fw
  };
  e9.prototype.getRspace = function () {
    return this.rspace
  };
  e9.prototype.setRspace = function (fw) {
    this.rspace = fw
  };
  e9.prototype.isStretchedVertical = function () {
    return this.stretchyVertical
  };
  function dZ(fx, fw) {
    this.stretched = false;
    this.v = eC;
    this.v(fx, fw)
  }
  
  FMath_extend(dZ, eC);
  dZ.prototype.positionChildren = function () {
    var fC = this.getBean();
    var fA = this.getContenu();
    var fx = fC.isAccent();
    var fD = fC.getAlign();
    var fw = fC.getOverSpace();
    var fz = fA.getPanelChildren().get(0);
    var fy = fA.getPanelChildren().get(1);
    this.updateSubSupZeroBase(fz);
    var fB = fy.getWidth();
    if (fz.getWidth() > fB) {
      fB = fz.getWidth()
    }
    if (!(fC.getStyle().isDisplaystyle()) && fC.getMovablelimits()) {
      eF.postionPanels(fz, fy, "0", "0")
    } else {
      dZ.postionPanels(fz, fy, fx, fD, fw, fB, this.getDir(), this.stretched);
      if (!this.stretched) {
        this.setChangedDimension(true)
      }
      this.stretched = true
    }
  };
  dZ.prototype.calculateBaseline = function () {
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    if (fw.getBaseline() != F) {
      fx.setBaseline(fw.getY() + fw.getBaseline())
    }
  };
  dZ.prototype.calculateAxisLine = function () {
    eC.prototype.calculateAxisLine.call(this);
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    if (fw.getAxis() != F) {
      fx.setAxis(fw.getY() + fw.getAxis())
    }
  };
  dZ.prototype.calculateSuperscriptLine = function () {
    var fw = this.getContenu();
    if (fw.getBaseline() != F) {
      fw.setSuperscriptline(fw.getBaseline())
    } else {
      fw.setSuperscriptline(fw.getContenuHeight())
    }
  };
  dZ.postionPanels = function (fD, fy, fE, fz, fx, fC, fw, fB) {
    if (!this.stretched) {
      fD.stretchContentHorizontal(fC - fD.getWidthLeft() - fD.getWidthRight());
      fy.stretchContentHorizontal(fC - fy.getWidthLeft() - fy.getWidthRight())
    }
    var fA = 0;
    if (!fE) {
      fA = cT.getLength(fx, fD.getHeight())
    }
    if ("rtl" == fw) {
      if (fz == null || "center" == fz) {
        fy.setX((fC - fy.getWidth()) / 2);
        fD.setX((fC - fD.getWidth()) / 2)
      } else {
        if ("left" == fz || fz == null) {
          fy.setX(fC - fy.getWidth());
          fD.setX(fC - fD.getWidth())
        }
      }
    } else {
      if (fz == null || "center" == fz) {
        fy.setX((fC - fy.getWidth()) / 2);
        fD.setX((fC - fD.getWidth()) / 2)
      } else {
        if ("right" == fz) {
          fy.setX(fC - fy.getWidth());
          fD.setX(fC - fD.getWidth())
        }
      }
    }
    fD.setY(fy.getY() + fy.getHeight() + fA)
  };
  dZ.prototype.isVerticalStretchy = function () {
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    return fw.isVerticalStretchy()
  };
  dZ.prototype.stretchContentVertical = function (fy) {
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    var fz = fx.getContenuHeight() - fw.getHeight();
    fw.stretchContentVertical(fy - fz);
    this.setChangedDimension(true)
  };
  function bg(fx, fw) {
    this.paddedBean;
    this.w = bz;
    this.w(fx, fw);
    this.paddedBean = this.getBean()
  }
  
  FMath_extend(bg, bz);
  bg.prototype.endCalculateDimension = function () {
    var fB = this.getContenu();
    var fx = fB.getContenuWidth();
    var fA = fB.getBaseline();
    var fy = fB.getContenuHeight() - fB.getBaseline();
    var fz = fx;
    var fw = fA;
    var fC = fy;
    var fD = 0;
    var fE = 0;
    if (this.paddedBean.getWidth() != null) {
      fz = this.calculateValue(this.paddedBean.getWidth(), fA, fx, fy, fx, false);
      fB.setContenuWidth(fz)
    }
    if (this.paddedBean.getHeight() != null) {
      fw = this.calculateValue(this.paddedBean.getHeight(), fA, fx, fy, fA, false)
    }
    if (this.paddedBean.getDepth() != null) {
      fC = this.calculateValue(this.paddedBean.getDepth(), fA, fx, fy, fy, false)
    }
    if (this.paddedBean.getLspace() != null) {
      fD = this.calculateValue(this.paddedBean.getLspace(), fA, fx, fy, 0, true)
    }
    if (this.paddedBean.getVoffset() != null) {
      fE = this.calculateValue(this.paddedBean.getVoffset(), fA, fx, fy, 0, true)
    }
    fB.setContenuHeight(fw + fC);
    fB.moveChildrenOnY(fw - fB.getBaseline() - fE);
    fB.setBaseline(fw);
    fB.moveChildrenOnX(fD)
  };
  bg.prototype.calculateValue = function (fB, fz, fw, fC, fA, fy) {
    if (fB.length == 0) {
      return fA
    }
    if (fB.charAt(0) == "+") {
      return fA + this.getValue(fB.substring(1, fB.length), fz, fw, fC, fA)
    } else {
      if (fB.charAt(0) == "-") {
        var fx = fA - this.getValue(fB.substring(1, fB.length), fz, fw, fC, fA);
        if (fy) {
          return fx
        }
        if (fx < 0) {
          return 0
        }
        return fx
      }
    }
    var fD = this.getValue(fB, fz, fw, fC, fA);
    if (fy) {
      return fD
    }
    if (fD < 0) {
      return 0
    }
    return fD
  };
  bg.prototype.getValue = function (fz, fx, fw, fA, fy) {
    if (fz.indexOf("width") > 0) {
      fy = fw;
      fz = fz.substring(0, fz.indexOf("width"))
    } else {
      if (fz.indexOf("height") > 0) {
        fy = fx;
        fz = fz.substring(0, fz.indexOf("height"))
      } else {
        if (fz.indexOf("depth") > 0) {
          fy = fA;
          fz = fz.substring(0, fz.indexOf("depth"))
        } else {
          if (fz.indexOf("em") > 0) {
            fy = this.paddedBean.getStyle().getMathsize()
          } else {
            if (fz.indexOf("ex") > 0) {
              fy = this.paddedBean.getStyle().getMathsize()
            }
          }
        }
      }
    }
    fz = fu.trim(fz);
    if (fz.length == 0) {
      fz = "100%"
    }
    return cT.getLength(fz, fy)
  };
  function Q(fx, fw) {
    this.w = bz;
    this.w(fx, fw)
  }
  
  FMath_extend(Q, bz);
  function aa(fx, fw) {
    this.v = eC;
    this.v(fx, fw)
  }
  
  FMath_extend(aa, eC);
  function e4(fx, fw) {
    this.v = eC;
    this.v(fx, fw)
  }
  
  FMath_extend(e4, eC);
  e4.prototype.positionChildren = function () {
    var fy = this.getBean();
    var fz = this.getContenu();
    fz.getShapeList().clear();
    var fF = fz.getPanelChildren().get(0);
    var fA = fz.getPanelChildren().get(1);
    var fx = fF.getHeight();
    var fE = fF.getWidth();
    var fw = fz.getBean().getStyle();
    var fD = ad.getSqrtWidth(fx);
    var fC = (fD * 0.7);
    var fB = ((fx + fx * ad.getUnderline()) * 0.35);
    var fG = null;
    if ("rtl" == this.getDir()) {
      fG = ad.drawSqrt(fz, fE + 2, 0, fE, fx, fD, fw, fy.isClosed(), fy.getClosedLength(), this.getDir());
      if (fy.isClosed()) {
        fF.setX(fG.getY() + 1)
      } else {
        fF.setX(1)
      }
    } else {
      fG = ad.drawSqrt(fz, 0, 0, fE, fx, fD, fw, fy.isClosed(), fy.getClosedLength(), this.getDir());
      fF.setX(fG.getX());
      if (fy.isClosed()) {
        this.setInsideMarginRight(1 + fG.getY())
      } else {
        this.setInsideMarginRight(1)
      }
    }
    fF.setY(fG.getY() + 1);
    if ("rtl" == this.getDir()) {
      fA.setX(fz.getContenuWidth() - fC)
    } else {
      fA.setX(fC - fA.getWidth())
    }
    fA.setY(fB - fA.getHeight());
    fz.returnXToZero();
    fz.returnYToZero();
    if (fF.getBaseline() != F) {
      fz.setBaseline(fF.getY() + fF.getBaseline())
    }
    fz.setAxis(fF.getY() + fF.getAxis())
  };
  e4.prototype.isVerticalStretchy = function () {
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    return fw.isVerticalStretchy()
  };
  e4.prototype.stretchContentVertical = function (fy) {
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    fw.stretchContentVertical(fy)
  };
  function ae(fx, fw) {
    this.stretched = false;
    this.v = eC;
    this.v(fx, fw)
  }
  
  FMath_extend(ae, eC);
  ae.prototype.positionChildren = function () {
    var fw = this.getBean();
    ae.positionChildrenRowStyle(this, fw.getRowBean().getRowalign())
  };
  ae.positionChildrenRowStyle = function (fx, fw) {
    var fz = fx.getContenu();
    if (fz.getPanelChildren().size() == 0) {
      return
    }
    if ("rtl" == fx.getDir()) {
      fz.putChildrenOneAfterOneRTL()
    } else {
      fz.putChildrenOneAfterOneLTR()
    }
    if (fw == null || fw == "baseline") {
      fz.moveChildrenOnBaseline(0);
      fz.moveChildrenOnAxis()
    } else {
      if (fw == "top") {
        fz.putChildrenOnY(0)
      } else {
        if (fw == "bottom") {
          for (var fy = 0; fy < fz.getPanelChildren().size(); fy++) {
            var fA = fz.getPanelChildren().get(fy);
            fA.setY(fz.getContenuHeight() - fA.getHeight())
          }
        } else {
          fz.centerAllChildrenOnY()
        }
      }
    }
    fz.returnYToZero()
  };
  ae.prototype.calculateAxisLine = function () {
    var fx = this.getContenu();
    for (var fw = 0; fw < fx.getPanelChildren().size(); fw++) {
      var fy = fx.getPanelChildren().get(fw);
      if (fy.getAxis() != F) {
        fx.setAxis(fy.getY() + fy.getAxis());
        break
      }
    }
  };
  ae.prototype.calculateBaseline = function () {
    var fz = this.getContenu();
    fz.setBaseline(F);
    var fx = this.getBean();
    var fw = fx.getRowBean().getRowalign();
    if ("top" == fw || "center" == fw || "axis" == fw || "bottom" == fw) {
      return
    }
    for (var fy = 0; fy < fz.getPanelChildren().size(); fy++) {
      var fA = fz.getPanelChildren().get(fy);
      if (fA.getBaseline() != F) {
        fz.setBaseline(fA.getY() + fA.getBaseline());
        break
      }
    }
  };
  ae.prototype.calculateSuperscriptLine = function () {
    var fx = this.getContenu();
    fx.setSuperscriptline(F);
    if (fx.getBaseline() == F) {
      return
    }
    for (var fw = 0; fw < fx.getPanelChildren().size(); fw++) {
      var fz = fx.getPanelChildren().get(fw);
      if (fz.getContenu().getSuperscriptline() == F) {
        return
      }
    }
    var fy = -F;
    for (var fw = 0; fw < fx.getPanelChildren().size(); fw++) {
      var fz = fx.getPanelChildren().get(fw);
      if (fy > (fz.getY() + fz.getSuperscriptline())) {
        fy = fz.getY() + fz.getSuperscriptline()
      }
    }
    if (fy != -F) {
      fx.setSuperscriptline(fx.getBaseline() - fy)
    }
  };
  ae.prototype.stretchChildrenVertical = function () {
    if (this.stretched) {
      return
    }
    this.stretched = true;
    this.setChangedDimension(true);
    var fB = this.getContenu();
    if (fB.getPanelChildren().size() < 2) {
      return
    }
    var fH = false;
    for (var fA = 0; fA < fB.getPanelChildren().size(); fA++) {
      var fG = fB.getPanelChildren().get(fA);
      if (fG.isVerticalStretchy()) {
        fH = true;
        break
      }
    }
    if (!fH) {
      return
    }
    var fC = true;
    for (var fA = 0; fA < fB.getPanelChildren().size(); fA++) {
      var fG = fB.getPanelChildren().get(fA);
      if (!fG.hasIsOnlyText()) {
        fC = false;
        break
      }
    }
    if (fC) {
      var fE = 0;
      for (var fA = 0; fA < fB.getPanelChildren().size(); fA++) {
        var fG = fB.getPanelChildren().get(fA);
        if (fG.getMaxMathsize() > fE) {
          fE = fG.getMaxMathsize()
        }
      }
      fH = false;
      for (var fA = 0; fA < fB.getPanelChildren().size(); fA++) {
        var fG = fB.getPanelChildren().get(fA);
        if (fG.isVerticalStretchy()) {
          if (fG.getBean().getStyle().getMathsize() < fE) {
            fH = true;
            break
          }
        }
      }
      if (!fH) {
        return
      }
    }
    var fz = fB.getMinYNoStretchy();
    var fx = fB.getMaxYNoStretchy();
    for (var fA = 0; fA < fB.getPanelChildren().size(); fA++) {
      var fG = fB.getPanelChildren().get(fA);
      if (fG.isVerticalStretchy()) {
        var fy = fG.getY() + fG.getAxis();
        var fD = fx - fy;
        if (fD < 0) {
          fD = 0
        }
        if ((fy - fz) > fD) {
          fD = (fy - fz)
        }
        var fF = 2 * fD;
        if (fG.getHeight() < fF) {
          var fw = fF - fG.getHeightBottom() - fG.getHeightTop();
          fG.stretchContentVertical(fw)
        }
      }
    }
  };
  ae.prototype.isVerticalStretchy = function () {
    return false
  };
  ae.prototype.isHorizontalStretchy = function () {
    var fx = this.getContenu();
    for (var fw = 0; fw < fx.getPanelChildren().size(); fw++) {
      var fy = fx.getPanelChildren().get(fw);
      if (fy.isHorizontalStretchy()) {
        return true
      }
    }
    return false
  };
  ae.prototype.hasIsOnlyText = function () {
    var fy = this.getContenu();
    for (var fx = 0; fx < fy.getPanelChildren().size(); fx++) {
      var fz = fy.getPanelChildren().get(fx);
      var fw = fz.hasIsOnlyText();
      if (!fw) {
        return false
      }
    }
    return true
  };
  ae.prototype.stretchContentVertical = function (fz) {
    var fy = this.getContenu();
    var fw = false;
    for (var fx = 0; fx < fy.getPanelChildren().size(); fx++) {
      var fB = fy.getPanelChildren().get(fx);
      var fA = fB.isVerticalStretchy();
      if (fA) {
        fB.stretchContentVertical(fz);
        fw = true
      }
    }
    if (fw) {
      this.positionChildren()
    }
  };
  ae.prototype.getMaxMathsize = function () {
    var fw = this.getBean().getStyle().getMathsize();
    var fy = this.getContenu();
    for (var fx = 0; fx < fy.getPanelChildren().size(); fx++) {
      var fz = fy.getPanelChildren().get(fx);
      if (fz.getMaxMathsize() > fw) {
        fw = fz.getMaxMathsize()
      }
    }
    return fw
  };
  ae.prototype.stretchContentHorizontal = function (fA) {
    var fy = this.getContenu();
    var fx = fy.getContenuWidth();
    if (fA < fx) {
      return
    }
    var fC = fA - fx;
    var fz = 0;
    for (var fw = 0; fw < fy.getPanelChildren().size(); fw++) {
      var fB = fy.getPanelChildren().get(fw);
      if (fB.isHorizontalStretchy()) {
        fz++
      }
    }
    if (fz == 0) {
      return
    }
    for (var fw = 0; fw < fy.getPanelChildren().size(); fw++) {
      var fB = fy.getPanelChildren().get(fw);
      if (fB.isHorizontalStretchy()) {
        fB.stretchContentHorizontal(fB.getContenu().getContenuWidth() + (fC / fz))
      }
    }
    this.positionChildren();
    this.setChangedDimension(true)
  };
  ae.prototype.isBreakablePanelBefore = function (fx, fz) {
    var fw = this.getContenu();
    if (fw.getPanelChildren().size() == 1) {
      var fy = fw.getPanelChildren().get(0);
      if (!fy.isBreakablePanelBefore(fx, fz)) {
        return false
      }
    }
    return true
  };
  ae.prototype.getPanelsToMoveOnNextLine = function (fG, fx) {
    var fz = new aT();
    if (fG < 0) {
      return fz
    }
    var fB = this.getContenu();
    var fE = false;
    var fC = -1;
    for (var fA = 0; fA < fB.getPanelChildren().size(); fA++) {
      var fF = fB.getPanelChildren().get(fA);
      if (fE) {
        fz.add(fF)
      } else {
        if (fF.getX() + fF.getWidth() > fG) {
          var fy = fF.isBreakablePanelBefore(fG - fF.getX(), fx);
          if (!fy) {
            if (fA == 0) {
              fE = true;
              fC = fA + 1;
              continue
            }
            fz.add(fF);
            fC = fA
          } else {
            if (fF.getX() > (fG * 0.5)) {
              if (fA == 0) {
                continue
              }
              fz.add(fF);
              fC = fA
            } else {
              if (fF instanceof O) {
                var fH = fF;
                var fD = fH.breakToken(fG - fF.getX(), fx);
                if (fD != null) {
                  fD.setParent(fH.getParent());
                  fz.add(fD);
                  fC = fA + 1
                }
              } else {
                if (fF instanceof bz) {
                  var fw = fF;
                  fw.shrinkPanelBefore(fG - fF.getX(), fx);
                  fC = fA + 1
                }
              }
            }
          }
          fE = true
        }
      }
    }
    if (fz.size() == 0) {
      return fz
    }
    if (fC > -1) {
      var fI = fB.getPanelChildren().size();
      for (var fA = fC; fA < fI; fA++) {
        fB.getPanelChildren().remove(fC)
      }
    }
    this.verifyDuplicatesBreakOperators(fz);
    this.calculateWidth();
    return fz
  };
  ae.prototype.verifyDuplicatesBreakOperators = function (fw) {
    if (fw.size() == 1) {
      var fy = fw.get(0);
      if (fy.getBean() instanceof ex) {
        var fx = fy.getBean();
        if ("duplicate" == fx.getLinebreakstyle()) {
          fw.clear()
        }
      }
    }
  };
  ae.prototype.addPanelsToLine = function (fx) {
    var fA = this.getContenu();
    var fz = fA.getPanelChildren();
    for (var fy = 0; fy < fx.size(); fy++) {
      var fw = fx.get(fy);
      fw.setParent(this);
      fw.getBean().setParentBean(this.getBean());
      fz.addTo(fy, fw)
    }
    this.calculateWidth()
  };
  ae.prototype.moveToZeroX = function () {
    var fA = this.getContenu();
    var fy = 0;
    var fx = 0;
    if (fA.getPanelChildren().size() > 0) {
      if ("rtl" == this.getDir()) {
        fx = fA.getPanelChildren().size() - 1
      } else {
        fx = 0
      }
      var fw = fA.getPanelChildren().get(fx);
      fy = fw.getX()
    }
    if (fy != 0) {
      for (var fz = 0; fz < fA.getPanelChildren().size(); fz++) {
        var fw = fA.getPanelChildren().get(fz);
        fw.setX(fw.getX() - fy)
      }
    }
    this.calculateHeight();
    this.calculateWidth()
  };
  function aK(fx, fw) {
    this.sRowBean = null;
    this.contenu = null;
    this.position = 0;
    this.v = eC;
    this.v(fx, fw);
    this.sRowBean = this.getBean();
    this.contenu = this.getContenu();
    this.position = -this.sRowBean.getPosition()
  }
  
  FMath_extend(aK, eC);
  aK.prototype.positionChildren = function () {
    ae.positionChildrenRowStyle(this, "baseline")
  };
  aK.prototype.calculateBaseline = function () {
    for (var fw = 0; fw < this.contenu.getPanelChildren().size(); fw++) {
      var fx = this.contenu.getPanelChildren().get(fw);
      if (fx.getBaseline() != F) {
        this.contenu.setBaseline(fx.getY() + fx.getBaseline());
        break
      }
    }
  };
  aK.prototype.calculateSuperscriptLine = function () {
    if (this.contenu.getBaseline() != F) {
      this.contenu.setSuperscriptline(this.contenu.getBaseline())
    } else {
      this.contenu.setSuperscriptline(this.contenu.getContenuHeight())
    }
  };
  aK.prototype.positionOnX = function (fE, fx, fz, fC, fB) {
    var fy = 0;
    for (var fA = 0; fA < this.position; fA++) {
      fy = fy + fx + fz
    }
    for (var fA = 0; fA < this.contenu.getPanelChildren().size(); fA++) {
      var fw = this.contenu.getPanelChildren().get(fA);
      var fD = (fx - fw.getWidth()) / 2;
      if ("right" == fB || fB == null) {
        fD = fx - fw.getWidth()
      } else {
        if ("left" == fB) {
          fD = 0
        }
      }
      fw.setX(fy);
      if (fD > 0) {
        fw.getContenu().moveChildrenOnX(fD);
        fw.setInsideMarginRight(fx - fw.getWidth() - fD);
        fw.calculateWidth()
      }
      fy = fy + fx + fz
    }
    this.calculateWidth();
    return fE + this.getHeight() + fC
  };
  aK.prototype.calculateMaxDigitWidth = function () {
    var fz = 0;
    for (var fy = 0; fy < this.contenu.getPanelChildren().size(); fy++) {
      var fx = this.contenu.getPanelChildren().get(fy);
      var fw = fx.getWidth();
      if (fw > fz) {
        fz = fw
      }
    }
    return fz
  };
  aK.prototype.getDecimapPosition = function () {
    return this.sRowBean.getDecimalPosition()
  };
  aK.prototype.getPosition = function () {
    return this.position
  };
  aK.prototype.setPosition = function (fw) {
    this.position = fw
  };
  aK.prototype.getPanelForCrossout = function (fx) {
    if (fx < this.getPosition()) {
      return null
    }
    fx = fx - this.getPosition();
    if (fx > (this.contenu.getPanelChildren().size() - 1)) {
      return null
    }
    var fw = this.contenu.getPanelChildren().get(fx);
    if (fw instanceof cu) {
      return null
    }
    return fw
  };
  function c(fx, fw) {
    this.sCarriesBean = null;
    this.contenu = null;
    this.location = null;
    this.crossout = null;
    this.carrythickness = null;
    this.z = aK;
    this.z(fx, fw);
    this.sCarriesBean = this.getBean();
    this.contenu = this.getContenu();
    this.location = this.sCarriesBean.getLocation();
    this.crossout = this.sCarriesBean.getCrossout();
    this.carrythickness = this.sCarriesBean.getCarrythickness()
  }
  
  FMath_extend(c, aK);
  c.prototype.positionOnX = function (fx, fz, fA, fy, fB) {
    var fw = aK.prototype.positionOnX.call(this, fx, fz, fA, fy, fB);
    fw = fw - fy / 2;
    return fw
  };
  c.prototype.processCarries = function (fB, fx) {
    for (var fz = 0; fz < this.contenu.getPanelChildren().size(); fz++) {
      var fw = this.contenu.getPanelChildren().get(fz);
      var fy = this.location;
      var fC = this.crossout;
      var fE = this.carrythickness;
      if (fw instanceof dM) {
        var fD = fw;
        if (fD.getLocation() != null) {
          fy = fD.getLocation()
        }
        if (fD.getCrossout() != null) {
          fC = fD.getCrossout()
        }
        if (fD.getCarrythickness() != null) {
          fE = fD.getCarrythickness()
        }
      }
      var fA = fB.getPanelForCrossout(this.getPosition() + fz);
      if (fA != null) {
        this.drawLine(fA, fC, fE, fx)
      }
    }
  };
  c.prototype.drawLine = function (fw, fC, fz, fB) {
    if (fC == null || "none" == fC) {
      return
    }
    var fA = cT.getLineThickness(fz, fw.getBean().getStyle().getMathsize());
    var fy = aw.getColor(fw.getBean().getStyle().getColor(), 0);
    if (fC.indexOf("updiagonalstrike") > -1) {
      var fx = new cJ();
      fx.setAntialias(true);
      fx.setLinethickness(fA);
      fx.setBorderColor(fy);
      fx.setX(fA / 2);
      fx.setY(fw.getHeight() - 1);
      fx.setEndX(fB - 1 - fA / 2);
      fx.setEndY(1);
      fw.getContenu().getShapeList().add(fx)
    }
    if (fC.indexOf("downdiagonalstrike") > -1) {
      var fx = new cJ();
      fx.setAntialias(true);
      fx.setLinethickness(fA);
      fx.setBorderColor(fy);
      fx.setX(fA / 2);
      fx.setY(1);
      fx.setEndX(fB - 1 - fA / 2);
      fx.setEndY(fw.getHeight() - 1);
      fw.getContenu().getShapeList().add(fx)
    }
    if (fC.indexOf("verticalstrike") > -1) {
      var fx = new cJ();
      fx.setAntialias(true);
      fx.setLinethickness(fA);
      fx.setBorderColor(fy);
      fx.setX(fB / 2);
      fx.setY(1);
      fx.setEndX(fB / 2);
      fx.setEndY(fw.getHeight() - 1);
      fw.getContenu().getShapeList().add(fx)
    }
    if (fC.indexOf("horizontalstrike") > -1) {
      var fx = new cJ();
      fx.setAntialias(true);
      fx.setLinethickness(fA);
      fx.setBorderColor(fy);
      fx.setX(fA / 2);
      fx.setY((fw.getHeight() - 1) / 2);
      fx.setEndX(fB - 1 - fA / 2);
      fx.setEndY((fw.getHeight() - 1) / 2);
      fw.getContenu().getShapeList().add(fx)
    }
  };
  function dM(fx, fw) {
    this.sCarryBean = null;
    this.location = null;
    this.crossout = null;
    this.carrythickness = null;
    this.v = eC;
    this.v(fx, fw);
    this.sCarryBean = this.getBean();
    this.location = this.sCarryBean.getLocation();
    this.crossout = this.sCarryBean.getCrossout();
    this.carrythickness = this.sCarryBean.getCarrythickness()
  }
  
  FMath_extend(dM, eC);
  dM.prototype.getLocation = function () {
    return this.location
  };
  dM.prototype.getCrossout = function () {
    return this.crossout
  };
  dM.prototype.getCarrythickness = function () {
    return this.carrythickness
  };
  function ba(fx, fw) {
    this.sGroupBean = null;
    this.contenu = null;
    this.v = eC;
    this.v(fx, fw);
    this.contenu = this.getContenu();
    this.sGroupBean = this.getBean()
  }
  
  FMath_extend(ba, eC);
  ba.prototype.positionChildren = function () {
  };
  ba.prototype.positionGroup = function (fF, fE, fx, fz, fC, fB) {
    var fy = 0;
    for (var fA = 0; fA < this.contenu.getPanelChildren().size(); fA++) {
      var fw = this.contenu.getPanelChildren().get(fA);
      fw.setY(fy);
      if (fw instanceof ba) {
        var fD = fw;
        fy = fD.positionGroup(fy, fE, fx, fz, fC, fB)
      } else {
        if (fw instanceof aK) {
          var fH = fw;
          fy = fH.positionOnX(fy, fx, fz, fC, fB)
        } else {
          if (fw instanceof cc) {
            var fG = fw;
            fy = fG.drawLine(fy, fE, fx, fz, fC)
          }
        }
      }
      if (fA == 0 && this.sGroupBean.isFirstLineLongDiv()) {
        fy = fy + 2 * fC
      }
    }
    this.calculateWidth();
    this.calculateHeight();
    return fF + this.getHeight() + fC
  };
  ba.prototype.getLines = function (fx) {
    var fz = this.contenu.getPanelChildren();
    for (var fy = 0; fy < fz.size(); fy++) {
      var fw = this.contenu.getPanelChildren().get(0);
      if (fw instanceof ba) {
        var fA = fw;
        fA.getLines(fx)
      } else {
        if (fw instanceof aK) {
          fx.add(fw)
        }
      }
    }
  };
  ba.prototype.getRowLine = function (fy) {
    var fA = this.contenu.getPanelChildren();
    for (var fz = 0; fz < fA.size(); fz++) {
      var fw = this.contenu.getPanelChildren().get(fz);
      if (fw instanceof ba) {
        var fB = fw;
        var fx = fB.getRowLine(fy);
        if (fx != null) {
          return fx
        }
        fy = fy - fB.getNbOfRowLines()
      } else {
        if (fw instanceof c) {
        } else {
          if (fw instanceof aK) {
            if (fy == 0) {
              return fw
            }
            fy = fy - 1
          }
        }
      }
    }
    return null
  };
  ba.prototype.getNbOfRowLines = function () {
    var fA = 0;
    var fy = this.contenu.getPanelChildren();
    for (var fx = 0; fx < fy.size(); fx++) {
      var fw = this.contenu.getPanelChildren().get(fx);
      if (fw instanceof ba) {
        var fz = fw;
        fA = fA + fz.getNbOfRowLines()
      } else {
        if (fw instanceof c) {
        } else {
          if (fw instanceof aK) {
            fA = fA + 1
          }
        }
      }
    }
    return fA
  };
  ba.prototype.postionCarriesAndLines = function (fy) {
    var fB = this.contenu.getPanelChildren();
    for (var fC = 0; fC < fB.size(); fC++) {
      var fw = this.contenu.getPanelChildren().get(fC);
      if (fw instanceof ba) {
        var fA = fw;
        fA.postionCarriesAndLines(fy)
      } else {
        if (fw instanceof c) {
          var fx = fw;
          if (fC < (fB.size() - 1)) {
            var fz = this.contenu.getPanelChildren().get(fC + 1);
            if (fz instanceof ba) {
              var fD = fz;
              fz = fD.getFirstRowLine();
              if (fz == null) {
                continue
              }
            }
            if (fz instanceof aK) {
              var fE = fz;
              fx.processCarries(fE, fy)
            }
          }
        }
      }
    }
  };
  ba.prototype.getFirstRowLine = function () {
    var fy = this.contenu.getPanelChildren();
    for (var fx = 0; fx < fy.size(); fx++) {
      var fw = this.contenu.getPanelChildren().get(fx);
      if (fw instanceof ba) {
        var fz = fw;
        return fz.getFirstRowLine()
      } else {
        if (fw instanceof aK) {
          return fw
        }
      }
    }
    return null
  };
  ba.prototype.calculateMaxDigitWidth = function () {
    var fy = 0;
    for (var fx = 0; fx < this.contenu.getPanelChildren().size(); fx++) {
      var fw = this.contenu.getPanelChildren().get(fx);
      var fz = 0;
      if (fw instanceof ba) {
        var fB = fw;
        fz = fB.calculateMaxDigitWidth()
      } else {
        if (fw instanceof c) {
        } else {
          if (fw instanceof aK) {
            var fA = fw;
            fz = fA.calculateMaxDigitWidth()
          }
        }
      }
      if (fz > fy) {
        fy = fz
      }
    }
    return fy
  };
  ba.prototype.calculateMaxColumns = function () {
    var fx = 0;
    for (var fy = 0; fy < this.contenu.getPanelChildren().size(); fy++) {
      var fw = this.contenu.getPanelChildren().get(fy);
      var fz = 0;
      if (fw instanceof ba) {
        var fB = fw;
        fz = fB.calculateMaxColumns()
      } else {
        if (fw instanceof aK) {
          var fA = fw;
          fz = fA.getPosition() + fA.getContenu().getPanelChildren().size()
        }
      }
      if (fz > fx) {
        fx = fz
      }
    }
    return fx
  };
  ba.prototype.returnToZeroPosition = function () {
    var fw = this.getMinPosition();
    this.moveAllRowsWith(-fw)
  };
  ba.prototype.moveAllRowsWith = function (fz) {
    for (var fy = 0; fy < this.contenu.getPanelChildren().size(); fy++) {
      var fx = this.contenu.getPanelChildren().get(fy);
      if (fx instanceof ba) {
        var fB = fx;
        fB.moveAllRowsWith(fz)
      } else {
        if (fx instanceof aK) {
          var fA = fx;
          fA.setPosition(fA.getPosition() + fz)
        } else {
          if (fx instanceof cc) {
            var fw = fx;
            fw.setPosition(fw.getPosition() + fz)
          }
        }
      }
    }
  };
  ba.prototype.getMinPosition = function () {
    var fC = -F;
    for (var fy = 0; fy < this.contenu.getPanelChildren().size(); fy++) {
      var fx = this.contenu.getPanelChildren().get(fy);
      var fz = -F;
      if (fx instanceof ba) {
        var fB = fx;
        fz = fB.getMinPosition()
      } else {
        if (fx instanceof aK) {
          var fA = fx;
          fz = fA.getPosition()
        } else {
          if (fx instanceof cc) {
            var fw = fx;
            fz = fw.getPosition()
          }
        }
      }
      if (fz != -F) {
        if (fz < fC) {
          fC = fz
        }
      }
    }
    if (fC == -F) {
      return 0
    }
    return fC
  };
  ba.prototype.setPositionAndShift = function (fz) {
    fz = fz + this.sGroupBean.getPosition();
    for (var fy = 0; fy < this.contenu.getPanelChildren().size(); fy++) {
      var fx = this.contenu.getPanelChildren().get(fy);
      if (fx instanceof ba) {
        var fB = fx;
        fB.setPositionAndShift(fz)
      } else {
        if (fx instanceof aK) {
          var fA = fx;
          fA.setPosition(fA.getPosition() - fz)
        } else {
          if (fx instanceof cc) {
            var fw = fx;
            fw.setPosition(fw.getPosition() - fz)
          }
        }
      }
      fz = fz + this.sGroupBean.getShift()
    }
  };
  ba.prototype.setMaxDecimalPosition = function (fz) {
    for (var fy = 0; fy < this.contenu.getPanelChildren().size(); fy++) {
      var fx = this.contenu.getPanelChildren().get(fy);
      if (fx instanceof ba) {
        var fC = fx;
        fC.setMaxDecimalPosition(fz)
      } else {
        if (fx instanceof aK) {
          var fB = fx;
          var fA = fz - fB.getDecimapPosition();
          fB.setPosition(fB.getPosition() + fA)
        } else {
          if (fx instanceof cc) {
            var fw = fx;
            fw.setPosition(fz)
          }
        }
      }
    }
  };
  ba.prototype.getMaxDecimalPosition = function () {
    var fx = 0;
    for (var fy = 0; fy < this.contenu.getPanelChildren().size(); fy++) {
      var fw = this.contenu.getPanelChildren().get(fy);
      var fB = 0;
      if (fw instanceof ba) {
        var fA = fw;
        fB = fA.getMaxDecimalPosition()
      } else {
        if (fw instanceof aK) {
          var fz = fw;
          fB = fz.getDecimapPosition()
        }
      }
      if (fB > fx) {
        fx = fB
      }
    }
    return fx
  };
  ba.prototype.setCenterPosition = function (fB) {
    for (var fy = 0; fy < this.contenu.getPanelChildren().size(); fy++) {
      var fx = this.contenu.getPanelChildren().get(fy);
      if (fx instanceof ba) {
        var fC = fx;
        fC.setCenterPosition(fB)
      } else {
        if (fx instanceof aK) {
          var fA = fx;
          var fz = (fB - fA.getContenu().getPanelChildren().size()) / 2;
          fA.setPosition(fA.getPosition() + fz)
        } else {
          if (fx instanceof cc) {
            var fw = fx;
            fw.setPosition(fB)
          }
        }
      }
    }
  };
  ba.prototype.setMaxPosition = function (fB) {
    for (var fy = 0; fy < this.contenu.getPanelChildren().size(); fy++) {
      var fx = this.contenu.getPanelChildren().get(fy);
      if (fx instanceof ba) {
        var fC = fx;
        fC.setMaxPosition(fB)
      } else {
        if (fx instanceof aK) {
          var fA = fx;
          var fz = fB - fA.getContenu().getPanelChildren().size();
          fA.setPosition(fA.getPosition() + fz)
        } else {
          if (fx instanceof cc) {
            var fw = fx;
            fw.setPosition(fB)
          }
        }
      }
    }
  };
  ba.prototype.getMaxPosition = function () {
    var fx = 0;
    for (var fy = 0; fy < this.contenu.getPanelChildren().size(); fy++) {
      var fw = this.contenu.getPanelChildren().get(fy);
      var fB = 0;
      if (fw instanceof ba) {
        var fA = fw;
        fB = fA.getMaxPosition()
      } else {
        if (fw instanceof aK) {
          var fz = fw;
          fB = fz.getContenu().getPanelChildren().size()
        }
      }
      if (fB > fx) {
        fx = fB
      }
    }
    return fx
  };
  function cc(fx, fw) {
    this.sLineBean = null;
    this.position;
    this.newPosition = 0;
    this.v = eC;
    this.v(fx, fw);
    this.sLineBean = this.getBean();
    this.position = this.sLineBean.getPosition()
  }
  
  FMath_extend(cc, eC);
  cc.prototype.getPosition = function () {
    if (this.position != null) {
      return cT.getLength(this.position, 0)
    }
    return this.newPosition
  };
  cc.prototype.setPosition = function (fw) {
    this.newPosition = fw
  };
  cc.prototype.drawLine = function (fI, fH, fw, fA, fG) {
    if (this.position != null) {
      this.newPosition = cT.getLength(this.position, 0)
    } else {
      this.newPosition = fH - this.newPosition
    }
    var fz = this.sLineBean.getLength();
    var fB = fz;
    if (fz == 0) {
      fB = fH
    }
    var fF = 0;
    for (var fD = 0; fD < (fH - fB - this.newPosition); fD++) {
      if (fD > 0) {
        fF = fF + fA
      }
      fF = fF + fw
    }
    var fx = 0;
    for (var fD = 0; fD < fB; fD++) {
      if (fD > 0) {
        fx = fx + fA
      }
      fx = fx + fw
    }
    var fy = cT.getLineThickness(this.sLineBean.getMslinethickness(), this.sLineBean.getStyle().getMathsize());
    if (fy < 1) {
      fy = 1
    }
    var fC = new cJ();
    fC.setAntialias(false);
    fC.setLinethickness(fy);
    fC.setBorderColor(aw.getColor(this.sLineBean.getStyle().getColor(), 0));
    fC.setX(fF);
    fC.setY(fy / 2);
    fC.setEndX(fF + fx);
    fC.setEndY(fy / 2);
    fC.setWidth(fx);
    var fE = fy / 2;
    if (fE < 1) {
      fE = 1
    }
    fC.setHeight(fy);
    this.getContenu().getShapeList().add(fC);
    this.setInsideMarginBottom(fy / 2);
    this.calculateHeight();
    this.calculateWidth();
    return fI + this.getHeight() + fG
  };
  function k(fx, fw) {
    this.v = eC;
    this.v(fx, fw)
  }
  
  FMath_extend(k, eC);
  k.prototype.calculateWidth = function () {
    var fw = this.getBean();
    var fy = this.getContenu();
    var fx = "0";
    if (fw.getWidth() != null) {
      fx = fw.getWidth()
    }
    fy.setContenuWidth(cT.getLength(fx, fw.getStyle().getMathsize()))
  };
  k.prototype.calculateHeight = function () {
    var fx = this.getBean();
    var fz = this.getContenu();
    var fw = "0";
    if (fx.getHeight() != null) {
      fw = fx.getHeight()
    }
    var fB = cT.getLength(fw, fx.getStyle().getMathsize());
    var fA = "0";
    if (fx.getDepth() != null) {
      fA = fx.getDepth()
    }
    var fy = cT.getLength(fA, fx.getStyle().getMathsize());
    fz.setContenuHeight(fB + fy)
  };
  k.prototype.calculateBaseline = function () {
    var fx = this.getBean();
    var fy = this.getContenu();
    var fw = "0";
    if (fx.getHeight() != null) {
      fw = fx.getHeight()
    }
    var fz = cT.getLength(fw, fx.getStyle().getMathsize());
    fy.setBaseline(fz)
  };
  function bM(fx, fw) {
    this.y = O;
    this.y(fx, fw)
  }
  
  FMath_extend(bM, O);
  bM.prototype.isBreakablePanelBefore = function (fw, fx) {
    return this.isBreakableTokenPanelBefore(fw, fx)
  };
  function n(fz, fw, fy) {
    this.tdPanel;
    this.colspan;
    this.x = cv;
    this.x(new bF(fz.getBean()), fz);
    this.tdPanel = fw;
    this.colspan = fy;
    var fx = this.getContenu();
    fx.setContenuWidth(0);
    fx.setContenuHeight(0);
    fx.setAxis(0);
    fx.setSuperscriptline(0)
  }
  
  FMath_extend(n, cv);
  n.prototype.calculateWidth = function () {
    var fw = this.getContenu();
    fw.setContenuWidth(0)
  };
  n.prototype.calculateHeight = function () {
    var fw = this.getContenu();
    fw.setContenuHeight(0)
  };
  n.prototype.calculateAxisLine = function () {
    var fw = this.getContenu();
    fw.setAxis(F)
  };
  n.prototype.calculateBaseline = function () {
  };
  n.prototype.calculateSuperscriptLine = function () {
    var fw = this.getContenu();
    fw.setSuperscriptline(F)
  };
  n.prototype.getTdPanel = function () {
    return this.tdPanel
  };
  n.prototype.setInsideMarginLeft = function (fw) {
  };
  n.prototype.setInsideMarginRight = function (fw) {
  };
  n.prototype.setInsideMarginTop = function (fw) {
  };
  n.prototype.setInsideMarginBottom = function (fw) {
  };
  n.prototype.isColspan = function () {
    return this.colspan
  };
  function ad(fx, fw) {
    this.w = bz;
    this.w(fx, fw)
  }
  
  FMath_extend(ad, bz);
  ad.prototype.calculateDimension = function () {
    var fA = this.getContenu();
    fA.getShapeList().clear();
    eC.prototype.calculateDimension.call(this);
    var fx = this.getBean();
    var fz = fA.getContenuHeight();
    var fw = fA.getContenuWidth();
    var fy = fA.getBean().getStyle();
    var fD = ad.getSqrtWidth(fz);
    var fB = null;
    if ("rtl" == this.getDir()) {
      fB = ad.drawSqrt(fA, fw, 0, fw, fz, fD, fy, fx.isClosed(), fx.getClosedLength(), this.getDir());
      if (fx.isClosed()) {
        fA.moveChildrenOnX(fB.getY() + 1)
      }
    } else {
      fB = ad.drawSqrt(fA, 0, 0, fw, fz, fD, fy, fx.isClosed(), fx.getClosedLength(), this.getDir());
      fA.moveChildrenOnX(fB.getX());
      this.setInsideMarginRight(1)
    }
    fA.moveChildrenOnY(fB.getY() + 1);
    if (fA.getBaseline() != F) {
      var fC = fB.getY() + 1;
      fA.setBaseline(fA.getBaseline() + fC)
    }
    if (fA.getAxis() != F) {
      var fC = fB.getY() + 1;
      fA.setAxis(fA.getAxis() + fC)
    }
  };
  ad.prototype.calculateSuperscriptLine = function () {
    var fw = this.getContenu();
    fw.setSuperscriptline(F)
  };
  ad.getSqrtWidth = function (fx) {
    var fw = bB.convertToChars("&Sqrt;");
    var fy = (fx * at);
    return e8.getWidth(fw, (fx + fy))
  };
  ad.getSqrtHeight = function (fw) {
    var fx = (fw * at);
    return fw + fx
  };
  ad.getSqrtTick = function (fw) {
    var fx = fw * dU;
    if (fx < 1) {
      fx = 1
    }
    return fx
  };
  ad.drawSqrt = function (fJ, fz, fy, fA, fL, fD, fM, fE, fB, fF) {
    var fH = (fL * at);
    var fC = ad.getSqrtTick(fL);
    if ("rtl" == fF) {
      if (fE) {
        fz = fz + fC + 1
      }
    }
    var fN = new a9(fz, fy + 1, fD, fL + fH);
    var fw = bB.convertToChars("&Sqrt;");
    c7.draw(fJ, fw, fN, fM, fF);
    var fK = aw.getColor(fM.getColor(), 0);
    if ("rtl" == fF) {
      if (fE) {
        var fG = cT.getLength(fB, fL);
        var fx = new dy(fK);
        fx.moveTo(1, fy + 1);
        fx.lineTo(fA + 2 * fC + 2, fy + 1);
        fx.lineTo(fA + 2 * fC + 2, fy + fC + 1);
        fx.lineTo(1 + fC + 1, fy + fC + 1);
        fx.lineTo(1 + fC + 1, fy + fG);
        fx.lineTo(1, fy + fG);
        fx.lineTo(1, fy + fC + 1);
        fx.setWidth(fA + fC);
        fJ.getShapeList().add(fx);
        fJ.setContenuHeight(fy + fL + 3 + fH);
        fJ.setContenuWidth(fz + fD)
      } else {
        var fx = new dy(fK);
        fx.moveTo(1, fy + 1);
        fx.lineTo(fA + 1.5 * fC, fy + 1);
        fx.lineTo(fA + 1.5 * fC, fy + fC + 1);
        fx.lineTo(1, fy + fC + 1);
        fx.setWidth(fA + fC);
        fJ.getShapeList().add(fx);
        fJ.setContenuHeight(fy + fL + 3 + fH);
        fJ.setContenuWidth(fz + fD)
      }
    } else {
      if (fE) {
        var fG = cT.getLength(fB, fL);
        var fx = new dy(fK);
        fx.moveTo(fz + (fD - fC), fy + 1);
        fx.lineTo(fz + fD + fA + fC, fy + 1);
        fx.lineTo(fz + fD + fA + fC, fy + fG);
        fx.lineTo(fz + fD + fA, fy + fG);
        fx.lineTo(fz + fD + fA, fy + fC + 1);
        fx.lineTo(fz + (fD - fC), fy + fC + 1);
        fx.setWidth(fA + fC - 1);
        fJ.getShapeList().add(fx);
        fJ.setContenuHeight(fy + fL + 3 + fH);
        fJ.setContenuWidth(fz + fD + fA + fC + 2)
      } else {
        var fx = new dy(fK);
        fx.moveTo(fz + (fD - fC), fy + 1);
        fx.lineTo(fz + fD + fA - 1, fy + 1);
        fx.lineTo(fz + fD + fA - 1, fy + fC + 1);
        fx.lineTo(fz + (fD - fC), fy + fC + 1);
        fx.setWidth(fA + fC - 1);
        fJ.getShapeList().add(fx);
        fJ.setContenuHeight(fy + fL + 3 + fH);
        fJ.setContenuWidth(fz + fD + fA)
      }
    }
    var fI = new bx(fz + fD - 1, fy + fC + 2);
    return fI
  };
  ad.getUnderline = function () {
    return at
  };
  function eI(fx, fw) {
    this.stackBean = null;
    this.contenu = null;
    this.maxNumberOfColumns = 0;
    this.actualWidth = 0;
    this.colSpaces = 0;
    this.rowSpaces = 0;
    this.align = null;
    this.rowNumberAlign = 0;
    this.A = ba;
    this.A(fx, fw);
    this.stackBean = this.getBean();
    this.contenu = this.getContenu();
    this.setAlign()
  }
  
  FMath_extend(eI, ba);
  eI.prototype.setAlign = function () {
    if (this.stackBean.getAlign() != null) {
      var fx = this.stackBean.getAlign();
      fx = fu.replace(fx, " ", "");
      if (fx.indexOf(",") == -1) {
        this.align = fx
      } else {
        this.align = fx.substring(0, fx.indexOf(","));
        var fw = fx.substring(fx.indexOf(",") + 1, fx.length);
        this.rowNumberAlign = ej.getIntegerValue(fw, 0)
      }
    }
  };
  eI.prototype.addChildrenToPanel = function () {
    eC.prototype.addChildrenToPanel.call(this);
    var fw = 0;
    if (this.stackBean.getStackalign() == null || "decimalpoint" == this.stackBean.getStackalign()) {
      fw = this.getMaxDecimalPosition();
      this.setMaxDecimalPosition(fw)
    } else {
      if ("left" == this.stackBean.getStackalign()) {
        fw = 0
      } else {
        if ("right" == this.stackBean.getStackalign()) {
          fw = this.getMaxPosition();
          this.setMaxPosition(fw)
        } else {
          if ("center" == this.stackBean.getStackalign()) {
            fw = this.getMaxPosition();
            this.setCenterPosition(fw)
          }
        }
      }
    }
    this.setPositionAndShift(0);
    this.returnToZeroPosition();
    this.maxNumberOfColumns = this.calculateMaxColumns();
    this.colSpaces = cT.getLength(this.stackBean.getCharspacing(), this.stackBean.getStyle().getMathsize());
    this.rowSpaces = cT.getLength(this.stackBean.getRowspacing(), this.stackBean.getStyle().getMathsize())
  };
  eI.prototype.positionChildren = function () {
    this.actualWidth = this.calculateMaxDigitWidth();
    this.postionCarriesAndLines(this.actualWidth);
    this.positionGroup(this.getInsideMarginTop(), this.maxNumberOfColumns, this.actualWidth, this.colSpaces, this.rowSpaces, this.stackBean.getCharalign())
  };
  eI.prototype.calculateAxisLine = function () {
    var fx = this.getNbOfRowLines();
    if ("axis" == this.align || "center" == this.align) {
      if (this.rowNumberAlign > 0 && this.rowNumberAlign <= fx) {
        var fw = this.getRowLine(this.rowNumberAlign - 1);
        this.contenu.setAxis(fw.getY() + fw.getAxis());
        return
      }
      if (this.rowNumberAlign < 0 && (fx + this.rowNumberAlign) > 0) {
        var fw = this.getRowLine(fx + this.rowNumberAlign);
        this.contenu.setAxis(fw.getY() + fw.getAxis());
        return
      }
    }
    this.contenu.setAxis(this.contenu.getContenuHeight() / 2)
  };
  eI.prototype.calculateBaseline = function () {
    var fx = this.getNbOfRowLines();
    if ("baseline" == this.align) {
      if (this.rowNumberAlign > 0 && this.rowNumberAlign <= fx) {
        var fw = this.getRowLine(this.rowNumberAlign - 1);
        if (fw.getBaseline() != F) {
          this.contenu.setBaseline(fw.getY() + fw.getBaseline())
        }
        return
      }
      if (this.rowNumberAlign < 0 && (fx + this.rowNumberAlign) > 0) {
        var fw = this.getRowLine(fx + this.rowNumberAlign);
        if (fw.getBaseline() != F) {
          this.contenu.setBaseline(fw.getY() + fw.getBaseline())
        }
        return
      }
    }
    if ("top" == this.align) {
      if (this.rowNumberAlign > 0 && this.rowNumberAlign <= fx) {
        var fw = this.getRowLine(this.rowNumberAlign - 1);
        if (fw.getBaseline() != F) {
          this.contenu.setBaseline(fw.getY())
        }
        return
      }
      if (this.rowNumberAlign < 0 && (fx + this.rowNumberAlign) > 0) {
        var fw = this.getRowLine(fx + this.rowNumberAlign);
        if (fw.getBaseline() != F) {
          this.contenu.setBaseline(fw.getY())
        }
        return
      }
      this.contenu.setBaseline(0);
      return
    }
    if ("bottom" == this.align) {
      if (this.rowNumberAlign > 0 && this.rowNumberAlign <= fx) {
        var fw = this.getRowLine(this.rowNumberAlign - 1);
        if (fw.getBaseline() != F) {
          this.contenu.setBaseline(fw.getY() + fw.getHeight())
        }
        return
      }
      if (this.rowNumberAlign < 0 && (fx + this.rowNumberAlign) > 0) {
        var fw = this.getRowLine(fx + this.rowNumberAlign);
        if (fw.getBaseline() != F) {
          this.contenu.setBaseline(fw.getY() + fw.getHeight())
        }
        return
      }
      this.contenu.setBaseline(this.contenu.getContenuHeight());
      return
    }
    this.contenu.setBaseline(F)
  };
  eI.prototype.calculateSuperscriptLine = function () {
    this.contenu.setSuperscriptline(this.contenu.getContenuHeight())
  };
  eI.prototype.getRowSpaces = function () {
    return this.rowSpaces
  };
  eI.prototype.getAllLines = function () {
    var fw = new aT();
    this.getLines(fw);
    return fw
  };
  function cs(fx, fw) {
    this.w = bz;
    this.w(fx, fw)
  }
  
  FMath_extend(cs, bz);
  function eB(fx, fw) {
    this.v = eC;
    this.v(fx, fw)
  }
  
  FMath_extend(eB, eC);
  eB.prototype.positionChildren = function () {
    var fy = this.getBean();
    var fz = this.getContenu();
    var fx = fy.getSubscriptPostion();
    var fE = fy.getSubscriptshift();
    var fD = fz.getPanelChildren().get(0);
    var fw = fz.getPanelChildren().get(1);
    this.updateSubSupZeroBase(fD);
    fD.setY(0);
    fw.setY(0);
    var fA = af.findIsIntegrale(fD.getBean());
    if ("rtl" == this.getDir()) {
      var fC = 0;
      if (fA) {
        fC = (fD.getHeight() * 0.25)
      }
      if ((fw.getWidth() - fC) > 0) {
        fw.setX(0);
        fD.setX(fw.getWidth() - fC)
      } else {
        fD.setX(0);
        fw.setX(fC - fw.getWidth())
      }
    } else {
      fD.setX(0);
      fw.setX(fD.getWidth());
      if (fA) {
        fw.setX(fw.getX() - (fD.getHeight() * 0.25))
      }
    }
    var fB = this.findIsItalic(fD.getBean());
    if (fB) {
      if ("ltr" == this.getDir()) {
        fw.setX(fw.getX() - (fD.getHeight() * 0.2))
      }
    }
    eB.postionPanels(fD, fw, fE, fx)
  };
  eB.prototype.calculateBaseline = function () {
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    if (fw.getBaseline() != F) {
      fx.setBaseline(fw.getY() + fw.getBaseline());
      fx.setSuperscriptline(fx.getBaseline())
    } else {
      fx.setSuperscriptline(fx.getContenuHeight())
    }
  };
  eB.prototype.calculateAxisLine = function () {
    eC.prototype.calculateAxisLine.call(this);
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    if (fw.getAxis() != F) {
      fx.setAxis(fw.getY() + fw.getAxis())
    }
  };
  eB.prototype.calculateSuperscriptLine = function () {
    var fw = this.getContenu();
    if (fw.getBaseline() != F) {
      fw.setSuperscriptline(fw.getBaseline())
    } else {
      fw.setSuperscriptline(fw.getContenuHeight())
    }
  };
  eB.postionPanels = function (fz, fy, fx, fB) {
    var fw = af.findIsIntegrale(fz.getBean());
    var fA = 0;
    if (!fw) {
      fA = (cT.getLength(fB, fy.getHeight()) * 0.25)
    }
    var fC = 0;
    if (fx != null) {
      fC = cT.getLength(fx, fy.getBean().getStyle().getMathsize())
    }
    if (fz.getBaseline() != F) {
      fy.setY(fz.getY() + fz.getBaseline() - fy.getAxis() + fC)
    } else {
      fy.setY(fz.getY() + fz.getHeight() - fy.getAxis() + fC)
    }
    if (!fw) {
      fy.setY(fy.getY() - fA)
    }
  };
  eB.prototype.isVerticalStretchy = function () {
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    return fw.isVerticalStretchy()
  };
  eB.prototype.stretchContentVertical = function (fy) {
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    fw.stretchContentVertical(fy)
  };
  function eN(fx, fw) {
    this.v = eC;
    this.v(fx, fw)
  }
  
  FMath_extend(eN, eC);
  eN.prototype.positionChildren = function () {
    var fC = this.getBean();
    var fA = this.getContenu();
    var fx = fC.getSuperscriptPostion();
    var fD = fC.getSuperscriptshift();
    var fz = fC.getSubscriptPostion();
    var fI = fC.getSubscriptshift();
    var fH = fA.getPanelChildren().get(0);
    var fw = fA.getPanelChildren().get(1);
    var fy = fA.getPanelChildren().get(2);
    this.updateSubSupZeroBase(fH);
    var fB = af.findIsIntegrale(fH.getBean());
    fH.setY(0);
    fy.setY(0);
    fw.setY(0);
    if ("rtl" == this.getDir()) {
      var fF = 0;
      if (fB) {
        fF = (fH.getHeight() * 0.25)
      }
      var fG = fw.getWidth() - fF;
      if (fy.getWidth() > fG) {
        fG = fy.getWidth()
      }
      fw.setX(fG - fw.getWidth() + fF);
      fy.setX(fG - fy.getWidth());
      fH.setX(fG)
    } else {
      fH.setX(0);
      fw.setX(fH.getWidth());
      fy.setX(fH.getWidth());
      if (fB) {
        fw.setX(fw.getX() - (fH.getHeight() * 0.25))
      }
    }
    var fE = this.findIsItalic(fH.getBean());
    if (fE) {
      if ("rtl" == this.getDir()) {
        fy.setX(fy.getX() + (fH.getHeight() * 0.15))
      } else {
        fw.setX(fw.getX() - (fH.getHeight() * 0.2))
      }
    }
    eF.postionPanels(fH, fy, fD, fx);
    eB.postionPanels(fH, fw, fI, fz);
    if ((fy.getY() + fy.getHeight()) > fw.getY()) {
      var fF = fy.getY() + fy.getHeight() - fw.getY();
      fy.setY(fy.getY() - fF / 2);
      fw.setY(fw.getY() + fF / 2);
      fA.returnYToZero()
    }
  };
  eN.prototype.calculateAxisLine = function () {
    eC.prototype.calculateAxisLine.call(this);
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    if (fw.getAxis() != F) {
      fx.setAxis(fw.getY() + fw.getAxis())
    }
  };
  eN.prototype.calculateBaseline = function () {
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    if (fw.getBaseline() != F) {
      fx.setBaseline(fw.getY() + fw.getBaseline());
      fx.setSuperscriptline(fx.getBaseline())
    } else {
      fx.setSuperscriptline(fx.getContenuHeight())
    }
  };
  eN.prototype.calculateSuperscriptLine = function () {
    var fw = this.getContenu();
    if (fw.getBaseline() != F) {
      fw.setSuperscriptline(fw.getBaseline())
    } else {
      fw.setSuperscriptline(fw.getContenuHeight())
    }
  };
  eN.prototype.isVerticalStretchy = function () {
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    return fw.isVerticalStretchy()
  };
  eN.prototype.stretchContentVertical = function (fy) {
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    fw.stretchContentVertical(fy)
  };
  function eF(fx, fw) {
    this.v = eC;
    this.v(fx, fw)
  }
  
  FMath_extend(eF, eC);
  eF.prototype.positionChildren = function () {
    var fA = this.getBean();
    var fC = this.getContenu();
    var fz = fA.getSuperscriptPostion();
    var fx = fA.getSuperscriptshift();
    var fB = fC.getPanelChildren().get(0);
    var fy = fC.getPanelChildren().get(1);
    this.updateSubSupZeroBase(fB);
    fB.setY(0);
    fy.setY(0);
    if ("rtl" == this.getDir()) {
      fy.setX(0);
      fB.setX(fy.getWidth())
    } else {
      fB.setX(0);
      fy.setX(fB.getWidth())
    }
    var fw = this.findIsItalic(fB.getBean());
    if (fw) {
      if ("rtl" == this.getDir()) {
        fB.setX(fB.getX() - (fB.getHeight() * 0.15))
      }
    }
    eF.postionPanels(fB, fy, fx, fz)
  };
  eF.prototype.calculateAxisLine = function () {
    eC.prototype.calculateAxisLine.call(this);
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    if (fw.getAxis() != F) {
      fx.setAxis(fw.getY() + fw.getAxis())
    }
  };
  eF.prototype.calculateBaseline = function () {
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    if (fw.getBaseline() != F) {
      fx.setBaseline(fw.getY() + fw.getBaseline())
    } else {
      fx.setBaseline(F)
    }
  };
  eF.prototype.calculateSuperscriptLine = function () {
    var fz = this.getContenu();
    if (fz.getBaseline() != F) {
      var fy = fz.getPanelChildren().get(0);
      var fx = fy.getContenu().getSuperscriptline();
      var fw = fz.getPanelChildren().get(1);
      if (fw.getBean().isAccent() && fx != F) {
        fz.setSuperscriptline(fx);
        return
      }
      fz.setSuperscriptline(fz.getContenuHeight())
    } else {
      fz.setSuperscriptline(F)
    }
  };
  eF.postionPanels = function (fA, fy, fw, fx) {
    var fz = af.findIsIntegrale(fA.getBean());
    var fB = 0;
    if (!fz) {
      fB = (cT.getLength(fx, fy.getHeight()) * 0.25)
    }
    var fC = 0;
    if (fw != null) {
      fC = cT.getLength(fw, fy.getBean().getStyle().getMathsize())
    }
    var fD = -fA.getSuperscriptline() + fy.getAxis() + fC - fB;
    fA.setY(fD)
  };
  eF.prototype.isVerticalStretchy = function () {
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    return fw.isVerticalStretchy()
  };
  eF.prototype.stretchContentVertical = function (fy) {
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    fw.stretchContentVertical(fy)
  };
  function bh(fx, fw) {
    this.tableBean = null;
    this.maxWidth = 0;
    this.v = eC;
    this.v(fx, fw);
    this.tableBean = this.getBean()
  }
  
  FMath_extend(bh, eC);
  bh.prototype.positionChildren = function () {
    var fA = this.getContenu();
    if (fA.getPanelChildren().size() > 1) {
      var fy = fA.getPanelChildren().get(0);
      var fE = cT.getLength(this.tableBean.getMinlabelspacing(), this.tableBean.getStyle().getMathsize());
      var fB = cT.getLength(this.tableBean.getLabelspacing(), this.tableBean.getStyle().getMathsize());
      var fH = fy.getContenu().getPanelChildren();
      var fw = 0;
      for (var fx = 0; fx < fH.size(); fx++) {
        var fI = fH.get(fx);
        if (fI instanceof B) {
          var fz = fI;
          var fC = fz.getLabelPanel();
          if (fC.getWidth() > fw) {
            fw = fC.getWidth()
          }
        }
      }
      if (this.maxWidth > 0 && this.maxWidth > (fy.getWidth() + fE + fw)) {
        fE = this.maxWidth - (fy.getWidth() + fw);
        fB = fE
      }
      if (this.isLeftSide()) {
        fy.setX(fw + fB)
      }
      for (var fx = 0; fx < fH.size(); fx++) {
        var fI = fH.get(fx);
        if (fI instanceof B) {
          var fz = fI;
          var fC = fz.getLabelPanel();
          if (!this.isLeftSide()) {
            fC.setX(fy.getWidth() + fB + (fw - fC.getWidth()))
          } else {
            fC.setX(0)
          }
          var fD = fI.getBean();
          var fG = fD.getRowalign();
          if (fG == null) {
            fG = this.tableBean.getRowalign()
          }
          if (fG == null || fG == "baseline") {
            var fF = fI.getY();
            if (fI.getBaseline() != F) {
              fF = fF + fI.getBaseline()
            }
            if (fC.getBaseline() != F) {
              fF = fF - fC.getBaseline()
            }
            fC.setY(fF)
          } else {
            if (fG == "top") {
              fC.setY(fI.getY())
            } else {
              if (fG == "bottom") {
                fC.setY(fI.getY() + fI.getHeight() - fC.getHeight())
              } else {
                fC.setY(fI.getY() + fI.getHeight() / 2 - fC.getHeight() / 2)
              }
            }
          }
        }
      }
    }
  };
  bh.prototype.isLeftSide = function () {
    if ("rtl" == this.getDir()) {
      if ("right" == this.tableBean.getSide() || "rightoverlap" == this.tableBean.getSide()) {
        return true
      }
    } else {
      if ("left" == this.tableBean.getSide() || "leftoverlap" == this.tableBean.getSide()) {
        return true
      }
    }
    return false
  };
  bh.prototype.addLabelChildren = function () {
    var fz = this.getContenu();
    if (fz.getPanelChildren().size() == 1) {
      var fB = fz.getPanelChildren().get(0);
      var fx = fB.getContenu().getPanelChildren();
      for (var fy = 0; fy < fx.size(); fy++) {
        var fw = fx.get(fy);
        if (fw instanceof B) {
          var fA = fw;
          fz.getPanelChildren().add(fA.getLabelPanel())
        }
      }
    }
  };
  bh.prototype.setMaxWidth = function (fw) {
    this.maxWidth = fw
  };
  function bp(fx, fw) {
    this.tableBean = null;
    this.contenu = null;
    this.maxNumberOfColumns = 0;
    this.columnsWidth = null;
    this.rowsHeight = null;
    this.colSpaces = null;
    this.rowSpaces = null;
    this.align = null;
    this.rowNumberAlign = 0;
    this.stretchedH = false;
    this.v = eC;
    this.v(fx, fw);
    this.tableBean = this.getBean();
    this.contenu = this.getContenu();
    this.setFrameSpaces();
    this.setAlign()
  }
  
  FMath_extend(bp, eC);
  bp.prototype.setAlign = function () {
    if (this.tableBean.getAlign() != null) {
      var fx = this.tableBean.getAlign();
      fx = fu.replace(fx, " ", "");
      if (fx.indexOf(",") == -1) {
        this.align = fx
      } else {
        this.align = fx.substring(0, fx.indexOf(","));
        var fw = fx.substring(fx.indexOf(",") + 1, fx.length);
        this.rowNumberAlign = ej.getIntegerValue(fw, 0)
      }
    }
  };
  bp.prototype.positionChildren = function () {
    this.maxNumberOfColumns = this.getNumberOfColumns();
    var fx = this.getMultipleStringValues(this.tableBean.getColumnwidth(), this.maxNumberOfColumns);
    this.colSpaces = this.getMultipleLengthValues(this.tableBean.getColumnspacing(), this.maxNumberOfColumns, this.tableBean.getStyle().getMathsize());
    this.rowSpaces = this.getMultipleLengthValues(this.tableBean.getRowspacing(), this.contenu.getPanelChildren().size(), this.tableBean.getStyle().getMathsize());
    for (var fz = 0; fz < this.contenu.getPanelChildren().size(); fz++) {
      var fF = this.contenu.getPanelChildren().get(fz);
      fF.setRowSpaces(this.rowSpaces);
      fF.setColumnSpaces(this.colSpaces);
      fF.setLineIndex(fz)
    }
    this.columnsWidth = this.getActualColumnsWidth(this.maxNumberOfColumns, this.colSpaces);
    if (!this.stretchedH) {
      for (var fz = 0; fz < this.contenu.getPanelChildren().size(); fz++) {
        var fF = this.contenu.getPanelChildren().get(fz);
        fF.stretchTdContent(this.columnsWidth)
      }
      this.stretchedH = true;
      if (this.isChangedDimension()) {
        return
      }
    }
    var fE = this.getMaxTableWidth(fx, this.columnsWidth, this.colSpaces);
    var fC = this.getMultipleStringValues(this.tableBean.getRowalign(), this.contenu.getPanelChildren().size());
    var fy = this.getMultipleStringValues(this.tableBean.getColumnalign(), this.maxNumberOfColumns);
    var fB = this.contenu.getPanelChildren().size();
    this.rowsHeight = new Array(fB);
    for (var fz = 0; fz < this.contenu.getPanelChildren().size(); fz++) {
      var fF = this.contenu.getPanelChildren().get(fz);
      fF.calculateHeight();
      this.rowsHeight[fz] = fF.getHeight()
    }
    var fA = false;
    if ("true" == this.tableBean.getEqualrows()) {
      fA = true
    }
    if (fA) {
      var fD = 0;
      for (var fz = 0; fz < this.rowsHeight.length; fz++) {
        if (this.rowsHeight[fz] > fD) {
          fD = this.rowsHeight[fz]
        }
      }
      for (var fz = 0; fz < this.rowsHeight.length; fz++) {
        this.rowsHeight[fz] = fD
      }
    }
    for (var fz = 0; fz < this.contenu.getPanelChildren().size(); fz++) {
      var fF = this.contenu.getPanelChildren().get(fz);
      this.rowsHeight = fF.adjustHeightRowspan(this.rowsHeight, fA)
    }
    var fw = this.getInsideMarginTop();
    for (var fz = 0; fz < this.contenu.getPanelChildren().size(); fz++) {
      var fF = this.contenu.getPanelChildren().get(fz);
      fF.positionCellsOnX(this.columnsWidth, this.colSpaces, fE, fy);
      fF.positionCellsOnY(fC[fz], this.tableBean.getEqualrows(), this.rowsHeight);
      fF.setY(fw);
      fF.setX(this.getInsideMarginLeft());
      fw = fw + this.rowsHeight[fz] + this.rowSpaces[fz]
    }
  };
  bp.prototype.calculateAxisLine = function () {
    var fx = this.contenu.getPanelChildren().size();
    if ("axis" == this.align || "center" == this.align) {
      if (this.rowNumberAlign > 0 && this.rowNumberAlign <= fx) {
        var fw = this.contenu.getPanelChildren().get(this.rowNumberAlign - 1);
        this.contenu.setAxis(fw.getY() + fw.getAxis());
        return
      }
      if (this.rowNumberAlign < 0 && (fx + this.rowNumberAlign) > 0) {
        var fw = this.contenu.getPanelChildren().get(fx + this.rowNumberAlign);
        this.contenu.setAxis(fw.getY() + fw.getAxis());
        return
      }
    }
    this.contenu.setAxis(this.contenu.getContenuHeight() / 2)
  };
  bp.prototype.calculateBaseline = function () {
    var fx = this.contenu.getPanelChildren().size();
    if ("baseline" == this.align) {
      if (this.rowNumberAlign > 0 && this.rowNumberAlign <= fx) {
        var fw = this.contenu.getPanelChildren().get(this.rowNumberAlign - 1);
        if (fw.getBaseline() != F) {
          this.contenu.setBaseline(fw.getY() + fw.getBaseline())
        }
        return
      }
      if (this.rowNumberAlign < 0 && (fx + this.rowNumberAlign) > 0) {
        var fw = this.contenu.getPanelChildren().get(fx + this.rowNumberAlign);
        if (fw.getBaseline() != F) {
          this.contenu.setBaseline(fw.getY() + fw.getBaseline())
        }
        return
      }
    }
    if ("top" == this.align) {
      if (this.rowNumberAlign > 0 && this.rowNumberAlign <= fx) {
        var fw = this.contenu.getPanelChildren().get(this.rowNumberAlign - 1);
        if (fw.getBaseline() != F) {
          this.contenu.setBaseline(fw.getY())
        }
        return
      }
      if (this.rowNumberAlign < 0 && (fx + this.rowNumberAlign) > 0) {
        var fw = this.contenu.getPanelChildren().get(fx + this.rowNumberAlign);
        if (fw.getBaseline() != F) {
          this.contenu.setBaseline(fw.getY())
        }
        return
      }
      this.contenu.setBaseline(0);
      return
    }
    if ("bottom" == this.align) {
      if (this.rowNumberAlign > 0 && this.rowNumberAlign <= fx) {
        var fw = this.contenu.getPanelChildren().get(this.rowNumberAlign - 1);
        if (fw.getBaseline() != F) {
          this.contenu.setBaseline(fw.getY() + fw.getHeight())
        }
        return
      }
      if (this.rowNumberAlign < 0 && (fx + this.rowNumberAlign) > 0) {
        var fw = this.contenu.getPanelChildren().get(fx + this.rowNumberAlign);
        if (fw.getBaseline() != F) {
          this.contenu.setBaseline(fw.getY() + fw.getHeight())
        }
        return
      }
      this.contenu.setBaseline(this.contenu.getContenuHeight());
      return
    }
    this.contenu.setBaseline(F)
  };
  bp.prototype.calculateSuperscriptLine = function () {
    this.contenu.setSuperscriptline(this.contenu.getContenuHeight())
  };
  bp.prototype.endCalculateDimension = function () {
    var fw = this.getMultipleStringValues(this.tableBean.getColumnlines(), this.maxNumberOfColumns);
    var fJ = this.getMultipleStringValues(this.tableBean.getColumnlinescolor(), this.maxNumberOfColumns);
    var fI = this.getMultipleLengthValues(this.tableBean.getColumnlinesthickness(), this.maxNumberOfColumns, this.tableBean.getStyle().getMathsize());
    var fB = this.contenu.getPanelChildren().size();
    var fC = this.getMultipleStringValues(this.tableBean.getRowlines(), fB);
    var fE = this.getMultipleStringValues(this.tableBean.getRowlinescolor(), fB);
    var fA = this.getMultipleLengthValues(this.tableBean.getRowlinesthickness(), fB, this.tableBean.getStyle().getMathsize());
    var fy = this.getInsideMarginTop();
    var fz = 0;
    for (var fD = 0; fD < fB; fD++) {
      var fK = this.contenu.getPanelChildren().get(fD);
      var fx = fK.drawVLineForCells(fw, fB, fz, fy, fI, fJ, this.columnsWidth, this.colSpaces, this.rowsHeight, this.getInsideMarginLeft(), this.getInsideMarginTop());
      for (var fH = 0; fH < fx.size(); fH++) {
        this.contenu.getShapeList().add(fx.get(fH))
      }
      fy = fy + this.rowsHeight[fD] + this.rowSpaces[fD] / 2;
      if (fD < (fB - 1)) {
        var fF = fC[fD];
        if (fF != null && !("none" == fF)) {
          var fG = fK.drawHLineForCells(fF, fz, fy, fA[fD], fE[fD], this.columnsWidth, this.colSpaces);
          for (var fH = 0; fH < fG.size(); fH++) {
            this.contenu.getShapeList().add(fG.get(fH))
          }
        }
      }
      fy = fy + (this.rowSpaces[fD] - this.rowSpaces[fD] / 2)
    }
  };
  bp.prototype.setFrameSpaces = function () {
    if (this.tableBean.getFramespacing() == null) {
      return
    }
    var fB = this.tableBean.getFramespacing();
    fB = fu.replace(fB, "  ", " ");
    var fz = fB.split(" ");
    if (fz.length == 1) {
      var fA = cT.getLength(fz[0], this.tableBean.getStyle().getMathsize());
      this.setInsideMarginLeft(fA);
      this.setInsideMarginRight(fA);
      this.setInsideMarginTop(fA);
      this.setInsideMarginBottom(fA)
    } else {
      if (fz.length == 2) {
        var fy = cT.getLength(fz[0], this.tableBean.getStyle().getMathsize());
        var fx = cT.getLength(fz[1], this.tableBean.getStyle().getMathsize());
        this.setInsideMarginLeft(fy);
        this.setInsideMarginRight(fy);
        this.setInsideMarginTop(fx);
        this.setInsideMarginBottom(fx)
      } else {
        if (fz.length == 4) {
          var fy = cT.getLength(fz[0], this.tableBean.getStyle().getMathsize());
          var fx = cT.getLength(fz[1], this.tableBean.getStyle().getMathsize());
          var fw = cT.getLength(fz[2], this.tableBean.getStyle().getMathsize());
          var fC = cT.getLength(fz[3], this.tableBean.getStyle().getMathsize());
          this.setInsideMarginLeft(fC);
          this.setInsideMarginRight(fx);
          this.setInsideMarginTop(fy);
          this.setInsideMarginBottom(fw)
        }
      }
    }
  };
  bp.prototype.getMaxTableWidth = function (fw, fy, fA) {
    var fz = 0;
    for (var fx = 0; fx < fy.length; fx++) {
      if (fx > 0) {
        fz = fz + fA[fx - 1]
      }
      fz = fz + fy[fx]
    }
    return fz
  };
  bp.prototype.getActualColumnsWidth = function (fG, fy) {
    var fD = this.maxNumberOfColumns;
    var fw = new Array(fD);
    for (var fz = 0; fz < this.maxNumberOfColumns; fz++) {
      var fH = 0;
      for (var fA = 0; fA < this.contenu.getPanelChildren().size(); fA++) {
        var fI = this.contenu.getPanelChildren().get(fA);
        var fC = fI.getContenu().getPanelChildren();
        if (fz > (fC.size() - 1)) {
          continue
        }
        var fF = 0;
        var fB = fC.get(fz);
        if (fB.getColspan() == 1) {
          fF = fB.getWidth()
        }
        if (fH < fF) {
          fH = fF
        }
      }
      fw[fz] = fH
    }
    for (var fz = 0; fz < this.maxNumberOfColumns; fz++) {
      for (var fA = 0; fA < this.contenu.getPanelChildren().size(); fA++) {
        var fI = this.contenu.getPanelChildren().get(fA);
        var fC = fI.getContenu().getPanelChildren();
        if (fz > (fC.size() - 1)) {
          continue
        }
        if (fC.get(fz) instanceof cj) {
          continue
        }
        var fB = fC.get(fz);
        if (fB.getColspan() > 1) {
          var fE = 0;
          for (var fF = fz; fF < fz + fB.getColspan(); fF++) {
            if (fF > fz) {
              fE = fE + fy[fF - 1]
            }
            fE = fE + fw[fF]
          }
          if (fE > fB.getWidth()) {
            continue
          }
          var fx = (fB.getWidth() - fE) / fB.getColspan();
          for (var fF = fz; fF < fz + fB.getColspan(); fF++) {
            fw[fF] = fw[fF] + fx
          }
        }
      }
    }
    if ("true" == this.tableBean.getEqualcolumns()) {
      var fH = 0;
      for (var fA = 0; fA < fw.length; fA++) {
        if (fH < fw[fA]) {
          fH = fw[fA]
        }
      }
      for (var fA = 0; fA < fw.length; fA++) {
        fw[fA] = fH
      }
    }
    return fw
  };
  bp.prototype.getNumberOfColumns = function () {
    for (var fF = 0; fF < this.contenu.getPanelChildren().size(); fF++) {
      var fL = this.contenu.getPanelChildren().get(fF);
      var fy = fL.getContenu().getPanelChildren();
      for (var fE = 0; fE < fy.size(); fE++) {
        if (fy.get(fE) instanceof cj) {
          continue
        }
        var fG = fy.get(fE);
        var fx = fG.getColspan();
        var fD = fG.getRowspan();
        for (var fJ = 0; fJ < (fx - 1); fJ++) {
          fy.addTo(fE + 1, new n(fL, fG, true))
        }
        for (var fC = 0; fC < (fD - 1); fC++) {
          var fH = fF + fC + 1;
          if (fH > (this.contenu.getPanelChildren().size() - 1)) {
            break
          }
          var fw = this.contenu.getPanelChildren().get(fH);
          var fK = fw.getContenu().getPanelChildren();
          for (var fJ = 0; fJ < fx; fJ++) {
            fK.addTo(fE, new n(fw, fG, false))
          }
        }
      }
    }
    var fB = 0;
    for (var fF = 0; fF < this.contenu.getPanelChildren().size(); fF++) {
      var fL = this.contenu.getPanelChildren().get(fF);
      if (fL.getNumberOfColumns() > fB) {
        fB = fL.getNumberOfColumns()
      }
    }
    for (var fF = 0; fF < this.contenu.getPanelChildren().size(); fF++) {
      var fL = this.contenu.getPanelChildren().get(fF);
      var fI = fB - fL.getNumberOfColumns();
      var fA = fL.getContenu().getPanelChildren();
      for (var fE = 0; fE < fI; fE++) {
        fA.add(new cj(fL))
      }
      for (var fE = 0; fE < fA.size(); fE++) {
        var fz = fA.get(fE);
        fz.setRowline(fF);
        fz.setColline(fE)
      }
    }
    return fB
  };
  function bo(fx, fw) {
    this.v = eC;
    this.v(fx, fw)
  }
  
  FMath_extend(bo, eC);
  bo.prototype.addChildrenToPanel = function () {
    var fx = this.getBean();
    var fz = fx.getShapeList();
    for (var fw = 0; fw < fz.size(); fw++) {
      var fy = fz.get(fw);
      by.calculateDimensionForText(fy);
      this.getContenu().getShapeList().add(fy)
    }
  };
  bo.prototype.calculateChildrenDimension = function () {
  };
  bo.prototype.positionChildren = function () {
    var fA = this.getContenu();
    var fw = 0;
    var fy = F;
    var fB = F;
    for (var fz = 0; fz < fA.getShapeList().size(); fz++) {
      var fx = fA.getShapeList().get(fz);
      fx.setX(fw);
      fw = fw + fx.getWidth();
      if ((fx.getFontAscent() + fx.getShiftY()) > fy) {
        fy = fx.getFontAscent() + fx.getShiftY()
      }
      if ((fx.getFontAscent() + fx.getSuperscriptline()) > fB) {
        fB = fx.getFontAscent() + fx.getSuperscriptline()
      }
      fA.setContenuWidth(fw)
    }
    for (var fz = 0; fz < fA.getShapeList().size(); fz++) {
      var fx = fA.getShapeList().get(fz);
      fx.setY(fy - (fx.getFontAscent() + fx.getShiftY()));
      if ((fx.getY() + fx.getHeight()) > fA.getContenuHeight()) {
        fA.setContenuHeight(fx.getY() + fx.getHeight())
      }
    }
    var fC = fA.getContenuHeight();
    for (var fz = 0; fz < fA.getShapeList().size(); fz++) {
      var fx = fA.getShapeList().get(fz);
      if (fx.getY() < fC) {
        fC = fx.getY()
      }
    }
    if (fC != 0) {
      for (var fz = 0; fz < fA.getShapeList().size(); fz++) {
        var fx = fA.getShapeList().get(fz);
        fx.setY(fx.getY() - fC)
      }
    }
    fA.setBaseline(fy - fC);
    fA.setSuperscriptline(fB)
  };
  bo.prototype.calculateSuperscriptLine = function () {
  };
  bo.prototype.isBreakableTextBefore = function (fx) {
    var fw = this.getBean();
    return this.hasSeparatorChar(fw.getText())
  };
  bo.prototype.hasSeparatorChar = function (fw) {
    fw = this.removeCharFromBeginEnd(fw, " ");
    fw = this.removeCharFromBeginEnd(fw, ".");
    fw = this.removeCharFromBeginEnd(fw, "!");
    fw = this.removeCharFromBeginEnd(fw, "?");
    return fw.indexOf(" ") > -1 || fw.indexOf(".") > -1 || fw.indexOf("!") > -1 || fw.indexOf("?") > -1
  };
  bo.prototype.removeCharFromBeginEnd = function (fw, fx) {
    while (fw.indexOf(fx) == 0) {
      fw = fw.substring(1, fw.length)
    }
    while (fw.indexOf(fx) == (fw.length - 1)) {
      fw = fw.substring(0, fw.length - 1)
    }
    return fw
  };
  bo.prototype.breakText = function (fS) {
    var fO = this.getContenu();
    var fC = fO.getShapeList();
    var fy = this.getBean();
    var fJ = fy.getText();
    var fN = null;
    var fx = false;
    var fB = 0;
    var fH = "";
    for (var fQ = 0; fQ < fC.size(); fQ++) {
      var fw = fC.get(fQ);
      if (fw.getX() + fw.getWidth() > fS) {
        fB = fQ;
        fN = fw;
        fx = this.hasSeparatorChar(fw.getText());
        break
      } else {
        fH = fH + fw.getText()
      }
    }
    var fG = "";
    var fE = fN.getText();
    if (fx) {
      var fA = fN.getText();
      fG = this.splitText(fN, fS - fN.getX());
      fE = fA.substring(fG.length, fA.length);
      if (fE.length == 0) {
        return null
      }
      fG = fu.trimRight(fG);
      fE = fu.trimLeft(fE);
      var fI = aD.getTextShape(fG, fN.getFont(), fy.getStyle());
      var fF = aD.getTextShape(fE, fN.getFont(), fy.getStyle());
      by.calculateDimensionForText(fI);
      by.calculateDimensionForText(fF);
      fC.remove(fB);
      var fP = fB;
      fC.addTo(fP, fF);
      fC.addTo(fP, fI)
    }
    fH = fH + fG;
    var fD = fJ.substring(fH.length, fJ.length);
    fH = fu.trim(fH);
    fD = fu.trim(fD);
    if (fD.length == 0) {
      return null
    }
    var fR = c9.getTextBean(fy.getParentBean(), fD);
    fy.copyAttributes(fR);
    var fz = di.generatePanelStructure(fR, this.getParent());
    fy.setText(fH);
    var fM = fO.getShapeList().size();
    for (var fQ = fB + 1; fQ < fM; fQ++) {
      var fL = fO.getShapeList().get(fB + 1);
      fO.getShapeList().remove(fB + 1);
      fz.getContenu().getShapeList().add(fL)
    }
    var fK = fO.getShapeList().get(fB);
    fO.setContenuWidth(fK.getX() + fK.getWidth());
    this.setChangedDimension(true);
    fz.calculateWidth();
    return fz
  };
  bo.prototype.splitText = function (fw, fA) {
    var fy = this.getBean();
    var fC = fw.getText();
    var fz = (fC.length * fA) / this.getWidth();
    var fB = false;
    for (var fx = fz; fx < fC.length; fx++) {
      var fD = fC.charAt(fx);
      if (fD == " " || fD == "." || fD == "!" || fD == "?") {
        fz = fx;
        fB = true;
        break
      }
    }
    if (fz == 0 || !fB) {
      return fC
    }
    return fC.substring(0, fz)
  };
  bo.prototype.toString = function () {
    var fw = this.getBean();
    return fw.getText()
  };
  function aJ(fx, fw) {
    this.y = O;
    this.y(fx, fw)
  }
  
  FMath_extend(aJ, O);
  aJ.prototype.isBreakablePanelBefore = function (fw, fx) {
    return O.prototype.isBreakableTokenPanelBefore.call(this, fw, fx)
  };
  function cz(fx, fw) {
    this.trBean = null;
    this.lineIndex = 0;
    this.rowSpaces;
    this.columnSpaces;
    this.v = eC;
    this.v(fx, fw);
    this.trBean = this.getBean()
  }
  
  FMath_extend(cz, eC);
  cz.prototype.getNumberOfColumns = function () {
    return this.getContenu().getPanelChildren().size()
  };
  cz.prototype.positionCellsOnX = function (fy, fB, fJ, fD) {
    var fI = this.getContenu();
    if (this.trBean.getColumnalign() != null) {
      fD = this.getMultipleStringValues(this.trBean.getColumnalign(), fy.length)
    }
    var fz = fy.length;
    var fA = 0;
    var fL = null;
    for (var fE = 0; fE < fz; fE++) {
      var fH = fE;
      if ("rtl" == this.getDir()) {
        fH = fz - 1 - fE
      }
      var fw = fI.getPanelChildren().get(fH);
      if (fL != null && (fL instanceof n)) {
        var fG = fL;
        if (fG.isColspan()) {
          if (!(fw instanceof n)) {
            fA = fA + fB[fH - 1]
          }
        }
      }
      fw.setX(fA);
      var fC = fw;
      var fx = fC.getBean();
      var fK = fx.getColumnalign();
      if (fK == null) {
        fK = fD[fH]
      }
      if (fC.getColspan() > 1) {
        var fF = this.getWidthAvailable(fE, fy, fC.getColspan());
        if (this.isLeftAlign(fK)) {
          fw.setInsideMarginRight(fF - fw.getWidth())
        } else {
          if (this.isRightAlign(fK)) {
            fw.getContenu().moveChildrenOnX(fF - fw.getWidth())
          } else {
            if (fK == null || "center" == fK) {
              fw.getContenu().moveChildrenOnX((fF - fw.getWidth()) / 2);
              fw.setInsideMarginRight((fF - fw.getWidth()) / 2)
            }
          }
        }
      } else {
        if (this.isLeftAlign(fK)) {
          fw.setInsideMarginRight(fy[fH] - fw.getWidth())
        } else {
          if (this.isRightAlign(fK)) {
            fw.getContenu().moveChildrenOnX(fy[fH] - fw.getWidth())
          } else {
            if (fK == null || "center" == fK) {
              fw.getContenu().moveChildrenOnX((fy[fH] - fw.getWidth()) / 2);
              fw.setInsideMarginRight((fy[fE] - fw.getWidth()) / 2)
            }
          }
        }
      }
      fw.calculateWidth();
      if (fC.getColspan() > 1) {
        fA = fA + fw.getWidth()
      } else {
        if (fw instanceof n) {
          var fG = fw;
          if (!fG.isColspan()) {
            fA = fA + fy[fH] + fB[fH]
          }
        } else {
          fA = fA + fw.getWidth() + fB[fH]
        }
      }
      fL = fw
    }
    this.setInsideMarginRight(fJ - fL.getX() - fL.getWidth());
    this.calculateWidth()
  };
  cz.prototype.isLeftAlign = function (fw) {
    if ("rtl" == this.getDir()) {
      if ("right" == fw) {
        return true
      }
    } else {
      if ("left" == fw) {
        return true
      }
    }
    return false
  };
  cz.prototype.isRightAlign = function (fw) {
    if ("rtl" == this.getDir()) {
      if ("left" == fw) {
        return true
      }
    } else {
      if ("right" == fw) {
        return true
      }
    }
    return false
  };
  cz.prototype.positionCellsOnY = function (fF, fz, fK) {
    var fD = this.getContenu();
    if (fD.getPanelChildren().size() == 0) {
      return
    }
    if (this.trBean.getRowalign() != null) {
      fF = this.trBean.getRowalign()
    }
    fD.moveChildrenOnBaseline(0);
    fD.moveChildrenOnAxis();
    this.returnYToZero();
    var fG = fK[this.lineIndex];
    var fy = this.getHeight();
    fD.moveChildrenOnY((fG - fy) / 2);
    fD.setContenuHeight(fG);
    fD.setAxis(fG / 2);
    for (var fC = 0; fC < fD.getPanelChildren().size(); fC++) {
      var fw = fD.getPanelChildren().get(fC);
      var fA = fw;
      var fx = fA.getBean();
      var fJ = fx.getRowalign();
      if (fJ == null) {
        fJ = fF
      }
      var fI = fA.getHeight();
      var fB = fA.getAxis();
      if (fA.getRowspan() > 1) {
        var fE = this.getHeightAvailable(fK, fA.getRowspan());
        if ("bottom" == fJ) {
          fA.setY(fE - fI)
        } else {
          if ("top" == fJ) {
            fA.setY(0)
          } else {
            fA.setY((fE - fI) / 2)
          }
        }
      } else {
        if (fJ == null || "axis" == fJ) {
          fA.setY(fD.getAxis() - fB)
        } else {
          if ("center" == fJ) {
            fA.setY((fG - fI) / 2)
          } else {
            if ("bottom" == fJ) {
              fA.setY(fG - fI)
            } else {
              if ("top" == fJ) {
                fA.setY(0)
              }
            }
          }
        }
      }
    }
    for (var fC = 0; fC < fD.getPanelChildren().size(); fC++) {
      var fH = fD.getPanelChildren().get(fC);
      if (fH.getBaseline() != F) {
        fD.setBaseline(fH.getY() + fH.getBaseline());
        break
      }
    }
  };
  cz.prototype.stretchTdContent = function (fz) {
    var fx = this.getContenu();
    for (var fw = 0; fw < fx.getPanelChildren().size(); fw++) {
      var fy = fx.getPanelChildren().get(fw);
      fy.stretchContentHorizontal(fz[fw])
    }
  };
  cz.prototype.getLineIndex = function () {
    return this.lineIndex
  };
  cz.prototype.setLineIndex = function (fw) {
    this.lineIndex = fw
  };
  cz.prototype.getRowSpaces = function () {
    return this.rowSpaces
  };
  cz.prototype.setRowSpaces = function (fw) {
    this.rowSpaces = fw
  };
  cz.prototype.getColumnSpaces = function () {
    return this.columnSpaces
  };
  cz.prototype.setColumnSpaces = function (fw) {
    this.columnSpaces = fw
  };
  cz.prototype.calculateHeight = function () {
    var fA = this.getContenu();
    var fB = 0;
    for (var fz = 0; fz < fA.getPanelChildren().size(); fz++) {
      var fx = fA.getPanelChildren().get(fz);
      var fw = fx.getY() + fx.getHeight();
      if (fx.getRowspan() > 1) {
        fw = 0
      } else {
        if (fx instanceof n) {
          fw = 0
        }
      }
      if (fw > fB) {
        fB = fw
      }
    }
    for (var fz = 0; fz < fA.getShapeList().size(); fz++) {
      var fy = fA.getShapeList().get(fz);
      if ((fy.getY() + fy.getHeight()) > fB) {
        fB = fy.getY() + fy.getHeight()
      }
    }
    fB = fB + this.getInsideMarginBottom();
    fA.setContenuHeight(fB)
  };
  cz.prototype.adjustHeightRowspan = function (fE, fB) {
    var fA = this.getContenu();
    for (var fy = 0; fy < fA.getPanelChildren().size(); fy++) {
      var fw = fA.getPanelChildren().get(fy);
      if (fw.getRowspan() > 1) {
        var fz = fw.getHeight();
        var fC = this.getHeightAvailable(fE, fw.getRowspan());
        if (fz > fC) {
          var fD = (fz - fC) / fw.getRowspan();
          if (fB) {
            for (var fx = 0; fx < fE.length; fx++) {
              fE[fx] = fE[fx] + fD
            }
          } else {
            for (var fx = this.lineIndex; fx < (this.lineIndex + fw.getRowspan()); fx++) {
              fE[fx] = fE[fx] + fD
            }
          }
        }
      }
    }
    return fE
  };
  cz.prototype.getHeightAvailable = function (fz, fy) {
    var fx = 0;
    for (var fw = 0; fw < fy; fw++) {
      fx = fx + fz[this.lineIndex + fw]
    }
    for (var fw = 0; fw < (fy - 1); fw++) {
      fx = fx + this.rowSpaces[this.lineIndex + fw]
    }
    return fx
  };
  cz.prototype.getWidthAvailable = function (fx, fA, fz) {
    var fw = 0;
    for (var fy = 0; fy < fz; fy++) {
      fw = fw + fA[fx + fy]
    }
    for (var fy = 0; fy < (fz - 1); fy++) {
      fw = fw + this.columnSpaces[fx + fy]
    }
    return fw
  };
  cz.prototype.returnYToZero = function () {
    var fy = this.getContenu();
    var fB = -F;
    for (var fx = 0; fx < fy.getPanelChildren().size(); fx++) {
      var fA = fy.getPanelChildren().get(fx);
      if (fA.getRowspan() > 1) {
        continue
      }
      if (fA.getY() < fB) {
        fB = fA.getY()
      }
    }
    for (var fx = 0; fx < fy.getShapeList().size(); fx++) {
      var fw = fy.getShapeList().get(fx);
      if (fw.getY() < fB) {
        fB = fw.getY()
      }
    }
    if (fB != 0) {
      for (var fx = 0; fx < fy.getPanelChildren().size(); fx++) {
        var fz = fy.getPanelChildren().get(fx);
        fz.setY(fz.getY() - fB)
      }
      for (var fx = 0; fx < fy.getShapeList().size(); fx++) {
        var fw = fy.getShapeList().get(fx);
        fw.moveAllOnY(-fB)
      }
    }
    return fB
  };
  cz.prototype.drawHLineForCells = function (fI, fy, fw, fx, fG, fM, fA) {
    var fF = new aT();
    var fE = this.getContenu();
    for (var fD = 0; fD < fE.getPanelChildren().size(); fD++) {
      var fC = fE.getPanelChildren().get(fD);
      var fK = fy;
      var fz = fK + fM[fD] + fA[fD];
      var fH = this.displayHLineForTd(fC);
      if (fH) {
        var fJ = fx / 2;
        var fL = 0;
        if (fx > ej.getMinLimitLine()) {
          fL = 1
        }
        var fB = new cJ();
        fB.setType(fI);
        fB.setAntialias(false);
        fB.setLinethickness(fx);
        fB.setBorderColor(aw.getColor(fG, 0));
        fB.setX(fK);
        fB.setY(fw + fJ);
        fB.setEndX(fz - 1 + fL);
        fB.setEndY(fw + fJ);
        fF.add(fB)
      }
      fy = fz
    }
    return fF
  };
  cz.prototype.drawVLineForCells = function (fE, fw, fO, fL, fD, fy, fH, fR, fF, fI, fz) {
    var fQ = new aT();
    var fN = fL;
    var fC = fL + fF[this.lineIndex];
    if (this.lineIndex > 0) {
      fN = fN - this.rowSpaces[this.lineIndex - 1] / 2;
      fC = fC + this.rowSpaces[this.lineIndex - 1] / 2
    } else {
      fN = fN - fz;
      fC = fC + this.rowSpaces[this.lineIndex] / 2
    }
    if (this.lineIndex == (fw - 1)) {
      fC = fC + this.rowSpaces[this.lineIndex] / 2
    }
    var fK = this.getContenu();
    for (var fP = 0; fP < (fK.getPanelChildren().size() - 1); fP++) {
      var fB = fK.getPanelChildren().get(fP);
      fO = fO + fH[fP] + fR[fP] / 2;
      if (fP == 0) {
        fO = fO + fI
      }
      var fA = fE[fP];
      if (fA != null && !("none" == fA)) {
        var fM = this.displayVLineForTd(fB);
        if (fM) {
          var fG = fD[fP] / 2;
          var fx = 0;
          if (fD[fP] > ej.getMinLimitLine()) {
            fx = 1
          }
          var fJ = new cJ();
          fJ.setType(fA);
          fJ.setAntialias(false);
          fJ.setLinethickness(fD[fP]);
          fJ.setBorderColor(aw.getColor(fy[fP], 0));
          fJ.setX(fO + fG);
          fJ.setY(fN);
          fJ.setEndX(fO + fG);
          fJ.setEndY(fC + fx);
          fQ.add(fJ)
        }
      }
      fO = fO + (fR[fP] - fR[fP] / 2)
    }
    return fQ
  };
  cz.prototype.displayHLineForTd = function (fy) {
    if (fy.getRowspan() > 1) {
      return false
    }
    if (fy instanceof n) {
      var fx = fy;
      var fw = fx.getTdPanel();
      if ((fy.getRowline() - fw.getRowline()) < (fw.getRowspan() - 1)) {
        return false
      }
    }
    return true
  };
  cz.prototype.displayVLineForTd = function (fy) {
    if (fy.getColspan() > 1) {
      return false
    }
    if (fy instanceof n) {
      var fx = fy;
      var fw = fx.getTdPanel();
      if ((fy.getColline() - fw.getColline()) < (fw.getColspan() - 1)) {
        return false
      }
    }
    return true
  };
  function B(fx, fw) {
    this.trLabelBean = null;
    this.labelPanel = null;
    this.B = cz;
    this.B(fx, fw);
    this.trLabelBean = this.getBean()
  }
  
  FMath_extend(B, cz);
  B.prototype.addChildrenToPanel = function () {
    eC.prototype.addChildrenToPanel.call(this);
    if (this.trLabelBean.getLabel() != null) {
      this.labelPanel = di.generatePanelStructure(this.trLabelBean.getLabel(), this)
    }
  };
  B.prototype.calculateDimension = function () {
    eC.prototype.calculateDimension.call(this);
    if (this.labelPanel != null) {
      this.labelPanel.calculateDimension()
    }
  };
  B.prototype.getLabelPanel = function () {
    return this.labelPanel
  };
  function e5(fx, fw) {
    this.stretched = false;
    this.v = eC;
    this.v(fx, fw)
  }
  
  FMath_extend(e5, eC);
  e5.prototype.positionChildren = function () {
    var fF = this.getBean();
    var fA = this.getContenu();
    var fC = fF.isAccentunder();
    var fG = fF.isAccent();
    var fB = fF.getAlign();
    var fx = fF.getUnderSpace();
    var fy = fF.getOverSpace();
    var fE = fA.getPanelChildren().get(0);
    var fw = fA.getPanelChildren().get(1);
    var fz = fA.getPanelChildren().get(2);
    this.updateSubSupZeroBase(fE);
    var fD = fw.getWidth();
    if ((fE.getWidth()) > fD) {
      fD = (fE.getWidth())
    }
    if ((fz.getWidth()) > fD) {
      fD = (fz.getWidth())
    }
    if (!(fF.getStyle().isDisplaystyle()) && fF.getMovablelimits()) {
      eB.postionPanels(fE, fw, "0", "0");
      eF.postionPanels(fE, fz, "0", "0")
    } else {
      dZ.postionPanels(fE, fz, fG, fB, fy, fD, this.getDir(), this.stretched);
      d9.postionPanels(fE, fw, fC, fB, fx, fD, this.getDir(), this.stretched);
      if (!this.stretched) {
        this.setChangedDimension(true)
      }
      this.stretched = true
    }
  };
  e5.prototype.calculateBaseline = function () {
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    if (fw.getBaseline() != F) {
      fx.setBaseline(fw.getY() + fw.getBaseline())
    }
  };
  e5.prototype.calculateAxisLine = function () {
    eC.prototype.calculateAxisLine.call(this);
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    if (fw.getAxis() != F) {
      fx.setAxis(fw.getY() + fw.getAxis())
    }
  };
  e5.prototype.calculateSuperscriptLine = function () {
    var fw = this.getContenu();
    if (fw.getBaseline() != F) {
      fw.setSuperscriptline(fw.getBaseline())
    } else {
      fw.setSuperscriptline(fw.getContenuHeight())
    }
  };
  e5.prototype.isVerticalStretchy = function () {
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    return fw.isVerticalStretchy()
  };
  e5.prototype.stretchContentVertical = function (fy) {
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    var fz = fx.getContenuHeight() - fw.getHeight();
    fw.stretchContentVertical(fy - fz);
    this.setChangedDimension(true)
  };
  function d9(fx, fw) {
    this.stretchedH = false;
    this.v = eC;
    this.v(fx, fw)
  }
  
  FMath_extend(d9, eC);
  d9.prototype.positionChildren = function () {
    var fD = this.getBean();
    var fz = this.getContenu();
    var fC = fD.isAccentunder();
    var fB = fD.getAlign();
    var fy = fD.getUnderSpace();
    var fx = fz.getPanelChildren().get(0);
    var fw = fz.getPanelChildren().get(1);
    this.updateSubSupZeroBase(fx);
    var fA = (fw.getWidth());
    if (fx.getWidth() > fA) {
      fA = fx.getWidth()
    }
    if (!(fD.getStyle().isDisplaystyle()) && fD.getMovablelimits()) {
      eB.postionPanels(fx, fw, "0", "0")
    } else {
      d9.postionPanels(fx, fw, fC, fB, fy, fA, this.getDir(), this.stretchedH);
      if (!this.stretchedH) {
        this.setChangedDimension(true)
      }
      this.stretchedH = true
    }
  };
  d9.prototype.calculateBaseline = function () {
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    if (fw.getBaseline() != F) {
      fx.setBaseline(fw.getY() + fw.getBaseline())
    }
  };
  d9.prototype.calculateAxisLine = function () {
    eC.prototype.calculateAxisLine.call(this);
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    if (fw.getAxis() != F) {
      fx.setAxis(fw.getY() + fw.getAxis())
    }
  };
  d9.prototype.calculateSuperscriptLine = function () {
    var fw = this.getContenu();
    if (fw.getBaseline() != F) {
      fw.setSuperscriptline(fw.getBaseline())
    } else {
      fw.setSuperscriptline(fw.getContenuHeight())
    }
  };
  d9.postionPanels = function (fD, fw, fE, fA, fy, fC, fx, fB) {
    if (!fB) {
      fD.stretchContentHorizontal(fC - fD.getWidthLeft() - fD.getWidthRight());
      fw.stretchContentHorizontal(fC - fw.getWidthLeft() - fw.getWidthRight())
    }
    var fz = 0;
    if (!fE) {
      fz = cT.getLength(fy, fD.getHeight())
    }
    if ("rtl" == fx) {
      if (fA == null || "center" == fA) {
        fw.setX((fC - fw.getWidth()) / 2);
        fD.setX((fC - fD.getWidth()) / 2)
      } else {
        if ("left" == fA || fA == null) {
          fw.setX(fC - fw.getWidth());
          fD.setX(fC - fD.getWidth())
        }
      }
    } else {
      if (fA == null || "center" == fA) {
        fw.setX((fC - fw.getWidth()) / 2);
        fD.setX((fC - fD.getWidth()) / 2)
      } else {
        if ("right" == fA) {
          fw.setX(fC - fw.getWidth());
          fD.setX(fC - fD.getWidth())
        }
      }
    }
    fw.setY(fD.getY() + fD.getHeight() + fz)
  };
  d9.prototype.isVerticalStretchy = function () {
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    return fw.isVerticalStretchy()
  };
  d9.prototype.stretchContentVertical = function (fy) {
    var fx = this.getContenu();
    var fw = fx.getPanelChildren().get(0);
    var fz = fx.getContenuHeight() - fw.getHeight();
    fw.stretchContentVertical(fy - fz);
    this.setChangedDimension(true)
  };
  function di() {
  }
  
  di.generatePanelStructure = function (fz, fA) {
    var fy = null;
    if (fz instanceof fi) {
      fy = new dp(fz, fA)
    } else {
      if (fz instanceof dh) {
        fy = new ad(fz, fA)
      } else {
        if (fz instanceof cr) {
          fy = new eA(fz, fA)
        } else {
          if (fz instanceof A) {
            fy = new aJ(fz, fA)
          } else {
            if (fz instanceof ey) {
              fy = new ed(fz, fA)
            } else {
              if (fz instanceof cF) {
                fy = new s(fz, fA)
              } else {
                if (fz instanceof cf) {
                  fy = new e9(fz, fA)
                } else {
                  if (fz instanceof j) {
                    fy = new k(fz, fA)
                  } else {
                    if (fz instanceof ac) {
                      fy = new bM(fz, fA)
                    } else {
                      if (fz instanceof ft) {
                        fy = new dm(fz, fA)
                      } else {
                        if (fz instanceof an) {
                          fy = new e4(fz, fA)
                        } else {
                          if (fz instanceof eO) {
                            fy = new bi(fz, fA)
                          } else {
                            if (fz instanceof e3) {
                              fy = new bg(fz, fA)
                            } else {
                              if (fz instanceof b3) {
                                fy = new Q(fz, fA)
                              } else {
                                if (fz instanceof fk) {
                                  fy = new dJ(fz, fA)
                                } else {
                                  if (fz instanceof bt) {
                                    fy = new db(fz, fA)
                                  } else {
                                    if (fz instanceof ce) {
                                      fy = new eB(fz, fA)
                                    } else {
                                      if (fz instanceof cl) {
                                        fy = new eF(fz, fA)
                                      } else {
                                        if (fz instanceof av) {
                                          fy = new eN(fz, fA)
                                        } else {
                                          if (fz instanceof bL) {
                                            fy = new d9(fz, fA)
                                          } else {
                                            if (fz instanceof g) {
                                              fy = new dZ(fz, fA)
                                            } else {
                                              if (fz instanceof b1) {
                                                fy = new e5(fz, fA)
                                              } else {
                                                if (fz instanceof u) {
                                                  fy = new y(fz, fA)
                                                } else {
                                                  if (fz instanceof o) {
                                                    fy = new aa(fz, fA)
                                                  } else {
                                                    if (fz instanceof cW) {
                                                      var fw = fz;
                                                      if (!fw.getHasLabel()) {
                                                        fy = new bp(fz, fy)
                                                      } else {
                                                        fy = new bh(fz, fA);
                                                        var fB = new bp(fz, fy);
                                                        fB.addChildrenToPanel();
                                                        fy.getContenu().getPanelChildren().add(fB);
                                                        var fx = fy;
                                                        fx.addLabelChildren();
                                                        return fy
                                                      }
                                                    } else {
                                                      if (fz instanceof a1) {
                                                        fy = new B(fz, fA)
                                                      } else {
                                                        if (fz instanceof bR) {
                                                          fy = new cz(fz, fA)
                                                        } else {
                                                          if (fz instanceof bF) {
                                                            fy = new cv(fz, fA)
                                                          } else {
                                                            if (fz instanceof d6) {
                                                              fy = new bA(fz, fA)
                                                            } else {
                                                              if (fz instanceof ea) {
                                                                fy = new eI(fz, fA)
                                                              } else {
                                                                if (fz instanceof c2) {
                                                                  fy = new ba(fz, fA)
                                                                } else {
                                                                  if (fz instanceof eY) {
                                                                    fy = new c(fz, fA)
                                                                  } else {
                                                                    if (fz instanceof ct) {
                                                                      fy = new aK(fz, fA)
                                                                    } else {
                                                                      if (fz instanceof cO) {
                                                                        fy = new dM(fz, fA)
                                                                      } else {
                                                                        if (fz instanceof ay) {
                                                                          fy = new cc(fz, fA)
                                                                        } else {
                                                                          if (fz instanceof aF) {
                                                                            fy = new bj(fz, fA)
                                                                          } else {
                                                                            if (fz instanceof cy) {
                                                                              fy = new bo(fz, fA)
                                                                            } else {
                                                                              if (fz instanceof bv) {
                                                                                fy = new ae(fz, fA)
                                                                              } else {
                                                                                if (fz instanceof aN) {
                                                                                  fy = new bz(fz, fA)
                                                                                } else {
                                                                                  if (fz instanceof aI) {
                                                                                    fy = new cu(fz, fA)
                                                                                  } else {
                                                                                    fy = new eC(fz, fA)
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    fy.addChildrenToPanel();
    return fy
  };
  function fn() {
    this.shapeX = 0;
    this.shapeY = 0;
    this.width = 0;
    this.height = 0;
    this.antialias = true
  }
  
  fn.prototype.getX = function () {
    return this.shapeX
  };
  fn.prototype.setX = function (fw) {
    this.shapeX = fw
  };
  fn.prototype.getY = function () {
    return this.shapeY
  };
  fn.prototype.setY = function (fw) {
    this.shapeY = fw
  };
  fn.prototype.getWidth = function () {
    return this.width
  };
  fn.prototype.setWidth = function (fw) {
    this.width = fw
  };
  fn.prototype.getHeight = function () {
    return this.height
  };
  fn.prototype.setHeight = function (fw) {
    this.height = fw
  };
  fn.prototype.isAntialias = function () {
    return this.antialias
  };
  fn.prototype.setAntialias = function (fw) {
    this.antialias = fw
  };
  fn.prototype.moveAllOnX = function (fw) {
    this.shapeX = this.shapeX + fw
  };
  fn.prototype.moveAllOnY = function (fw) {
    this.shapeY = this.shapeY + fw
  };
  function fr() {
    this.linethickness = 0;
    this.borderColor;
    this.radiusX = 0;
    this.radiusY = 0;
    this.fill = false;
    this.fillColor;
    this.C = fn;
    this.C()
  }
  
  FMath_extend(fr, fn);
  fr.prototype.isFill = function () {
    return this.fill
  };
  fr.prototype.setFill = function (fw) {
    this.fill = fw
  };
  fr.prototype.getLinethickness = function () {
    return this.linethickness
  };
  fr.prototype.setLinethickness = function (fw) {
    this.linethickness = fw
  };
  fr.prototype.getBorderColor = function () {
    return this.borderColor
  };
  fr.prototype.setBorderColor = function (fw) {
    this.borderColor = fw
  };
  fr.prototype.getFillColor = function () {
    return this.fillColor
  };
  fr.prototype.setFillColor = function (fw) {
    this.fillColor = fw
  };
  fr.prototype.getRadiusX = function () {
    return this.radiusX
  };
  fr.prototype.setRadiusX = function (fw) {
    this.radiusX = fw
  };
  fr.prototype.getRadiusY = function () {
    return this.radiusY
  };
  fr.prototype.setRadiusY = function (fw) {
    this.radiusY = fw
  };
  function c7() {
  }
  
  c7.getHeight = function (fC, fz) {
    var fx = e8.getTokensForChar(fC);
    if (fx == null) {
      return -1
    }
    var fB = fx[2].split("/");
    var fy = ej.getDoubleValue(fB[0], 0);
    var fw = ej.getDoubleValue(fB[1], 0);
    var fA = Math.max(fy / fz.getWidth(), fw / fz.getHeight());
    return fw / fA
  };
  c7.draw = function (fP, fX, fL, fV, fM) {
    if (fX == null || fX.length > 1) {
      return false
    }
    var fI = e8.getLine(fX);
    if (fI == null) {
      return false
    }
    var fy = fI.split(" ");
    var fF = false;
    var fN = false;
    var fD = false;
    var fK = false;
    if (fy[1].indexOf("sym") == 0 || fy[1] == "eq" || fy[1].indexOf("eqs") == 0) {
      if (fy[1] == "symV" || fy[1] == "eqsV") {
        fF = true
      }
      if (fy[1] == "symH" || fy[1] == "eqsH") {
        fN = true
      }
      if (fy[1] == "symB" || fy[1] == "eqsB") {
        fF = true;
        fN = true
      }
      fI = e8.getLineForUnicode(fy[2]);
      fy = fI.split(" ")
    }
    if (fy[1] == "SV") {
      fD = true
    } else {
      if (fy[1] == "SH") {
        fK = true
      } else {
        if (fy[1] == "SB") {
          fD = true;
          fK = true
        }
      }
    }
    if ("rtl" == fM) {
      fF = !fF
    }
    var fJ = fy[2].split("/");
    var fY = Math.max(ej.getDoubleValue(fJ[0], 0) / fL.getWidth(), ej.getDoubleValue(fJ[1], 0) / fL.getHeight());
    var fQ = aw.getColor(fV.getColor(), 0);
    for (var fR = 3; fR < fy.length; fR++) {
      if (fy[fR].indexOf("P{") == 0) {
        var fO = fy[fR].substring(2, fy[fR].length - 1);
        var fS = fO.split(",");
        var fA = fS[0].split("/");
        var fW = c7.convertPoint(fA[0], fA[1], fF, fN, fD, fK, fJ, fL);
        var fG = new dy(fQ);
        fG.setHeight((fL.getY() + fL.getHeight()));
        fG.setWidth((fL.getX() + fL.getWidth()));
        fG.moveTo(fW.getX(), fW.getY());
        for (var fU = 1; fU < fS.length; fU++) {
          var fx = fS[fU].substring(2, fS[fU].length);
          var fE = fx.split("/");
          if (fS[fU].indexOf("C:") == 0) {
            var fH = c7.convertPoint(fE[0], fE[1], fF, fN, fD, fK, fJ, fL);
            var fT = c7.convertPoint(fE[2], fE[3], fF, fN, fD, fK, fJ, fL);
            fG.curveTo(fT.getX(), fT.getY(), fH.getX(), fH.getY())
          } else {
            if (fS[fU].indexOf("L:") == 0) {
              var fz = c7.convertPoint(fE[0], fE[1], fF, fN, fD, fK, fJ, fL);
              fG.lineTo(fz.getX(), fz.getY())
            } else {
              if (fS[fU].indexOf("R:") == 0) {
                var fB = ej.getDoubleValue(fE[2], 0);
                var fw = c7.convertPoint(fE[0], fE[1], fF, fN, fD, fK, fJ, fL);
                var fC = new fr();
                fC.setFill(true);
                fC.setFillColor(fQ);
                fC.setX(fw.getX());
                fC.setY(fw.getY());
                fC.setRadiusX((fB / fY));
                fC.setRadiusY((fB / fY));
                fP.getShapeList().add(fC)
              }
            }
          }
        }
        fP.getShapeList().add(fG)
      }
    }
    return true
  };
  c7.convertPoint = function (fD, fA, fz, fx, fK, fy, fG, fw) {
    var fF = ej.getDoubleValue(fG[0], 0);
    var fC = ej.getDoubleValue(fG[1], 0);
    var fE = ej.getDoubleValue(fD, 0);
    var fB = ej.getDoubleValue(fA, 0);
    var fJ = fF / fw.getWidth();
    var fI = fC / fw.getHeight();
    var fL = Math.max(fJ, fI);
    if (fK && fy && fJ < fI) {
      fK = false
    }
    if (!fx) {
      fB = fC - fB
    }
    if (fz) {
      fE = fF - fE
    }
    if (fK) {
      var fH = fw.getHeight() - fC / fL;
      if (fH > 0 && fB > fC / 2) {
        return new bx(fw.getX() + fE / fL, fw.getY() + fB / fL + fH)
      }
      return new bx(fw.getX() + fE / fL, fw.getY() + fB / fL)
    }
    if (fy) {
      var fH = fw.getWidth() - fF / fL;
      if (fH > 0 && fE > fF / 2) {
        return new bx(fw.getX() + fE / fL + fH, fw.getY() + fB / fL)
      }
      return new bx(fw.getX() + fE / fL, fw.getY() + fB / fL)
    }
    return new bx(fw.getX() + fE / fJ, fw.getY() + fB / fI)
  };
  c7.drawLongDiv = function (fB, fE, fw, fA, fz, fF) {
    var fx = ")";
    var fC = new a9(fE.getX(), fE.getY(), fF, fE.getHeight());
    c7.draw(fB, fx, fC, fw, "ltr");
    var fG = 0;
    var fD = fE.getHeight() / 20;
    var fy = new dy(fz);
    fy.moveTo(fE.getX(), fE.getY() + fG);
    fy.lineTo(fE.getX() + fD + fE.getWidth() + fF - fA, fE.getY() + fG);
    fy.lineTo(fE.getX() + fD + fE.getWidth() + fF - fA, fE.getY() + fG + fA);
    fy.lineTo(fE.getX() + 0.8 * fA, fE.getY() + fG + fA);
    fy.setWidth((fD + fE.getWidth() + fF - fA));
    fB.getShapeList().add(fy);
    return fF
  };
  c7.drawMadruwb = function (fA, fw, fz, fy) {
    var fx = ds.getCharFromHexCode("644");
    var fB = new a9(0, 0, fw.getWidth() * 1.11, fw.getHeight());
    c7.draw(fA, fx, fB, fz, fy)
  };
  function bx(fx, fw) {
    this.pointX = 0;
    this.pointY = 0;
    this.pointX = fx;
    this.pointY = fw
  }
  
  bx.prototype.getX = function () {
    return this.pointX
  };
  bx.prototype.getY = function () {
    return this.pointY
  };
  function a9(fy, fx, fw, fz) {
    this.startX = 0;
    this.startY = 0;
    this.width = 0;
    this.height = 0;
    this.startX = fy;
    this.startY = fx;
    this.width = fw;
    this.height = fz
  }
  
  a9.prototype.getX = function () {
    return this.startX
  };
  a9.prototype.getY = function () {
    return this.startY
  };
  a9.prototype.getWidth = function () {
    return this.width
  };
  a9.prototype.getHeight = function () {
    return this.height
  };
  function ez() {
    this.source;
    this.valign = 0;
    this.C = fn;
    this.C()
  }
  
  FMath_extend(ez, fn);
  ez.prototype.getSrc = function () {
    return this.source
  };
  ez.prototype.setSrc = function (fw) {
    this.source = fw
  };
  ez.prototype.getValign = function () {
    return this.valign
  };
  ez.prototype.setValign = function (fw) {
    this.valign = fw
  };
  function cJ() {
    this.endX = 0;
    this.endY = 0;
    this.linethickness = 0;
    this.borderColor;
    this.type = "solid";
    this.C = fn;
    this.C()
  }
  
  FMath_extend(cJ, fn);
  cJ.prototype.getEndX = function () {
    return this.endX
  };
  cJ.prototype.setEndX = function (fw) {
    this.endX = fw
  };
  cJ.prototype.getEndY = function () {
    return this.endY
  };
  cJ.prototype.setEndY = function (fw) {
    this.endY = fw
  };
  cJ.prototype.getBorderColor = function () {
    return this.borderColor
  };
  cJ.prototype.setBorderColor = function (fw) {
    this.borderColor = fw
  };
  cJ.prototype.getType = function () {
    return this.type
  };
  cJ.prototype.setType = function (fw) {
    this.type = fw
  };
  cJ.prototype.getLinethickness = function () {
    return this.linethickness
  };
  cJ.prototype.setLinethickness = function (fw) {
    this.linethickness = fw
  };
  cJ.prototype.moveAllOnX = function (fw) {
    fn.prototype.moveAllOnX.call(this, fw);
    this.endX = this.endX + fw
  };
  cJ.prototype.moveAllOnY = function (fw) {
    fn.prototype.moveAllOnY.call(this, fw);
    this.endY = this.endY + fw
  };
  function bJ(fw) {
    this.type;
    this.patxX = 0;
    this.pathY = 0;
    this.pathX1 = 0;
    this.pathY1 = 0;
    this.type = fw
  }
  
  bJ.prototype.getType = function () {
    return this.type
  };
  bJ.prototype.getX = function () {
    return this.patxX
  };
  bJ.prototype.setX = function (fw) {
    this.patxX = fw
  };
  bJ.prototype.getY = function () {
    return this.pathY
  };
  bJ.prototype.setY = function (fw) {
    this.pathY = fw
  };
  bJ.prototype.getX1 = function () {
    return this.pathX1
  };
  bJ.prototype.setX1 = function (fw) {
    this.pathX1 = fw
  };
  bJ.prototype.getY1 = function () {
    return this.pathY1
  };
  bJ.prototype.setY1 = function (fw) {
    this.pathY1 = fw
  };
  function dy(fw) {
    this.color;
    this.actions = new aT();
    this.color = fw;
    this.C = fn;
    this.C()
  }
  
  FMath_extend(dy, fn);
  dy.prototype.moveTo = function (fw, fy) {
    var fx = new bJ("Move");
    fx.setX(fw);
    fx.setY(fy);
    this.actions.add(fx)
  };
  dy.prototype.curveTo = function (fw, fA, fx, fy) {
    var fz = new bJ("Quad");
    fz.setX(fw);
    fz.setY(fA);
    fz.setX1(fx);
    fz.setY1(fy);
    this.actions.add(fz)
  };
  dy.prototype.lineTo = function (fw, fy) {
    var fx = new bJ("Line");
    fx.setX(fw);
    fx.setY(fy);
    this.actions.add(fx)
  };
  dy.prototype.getColor = function () {
    return this.color
  };
  dy.prototype.setColor = function (fw) {
    this.color = fw
  };
  dy.prototype.getActions = function () {
    return this.actions
  };
  dy.prototype.moveAllOnX = function (fy) {
    fn.prototype.moveAllOnX.call(this, fy);
    for (var fw = 0; fw < this.actions.size(); fw++) {
      var fx = this.actions.get(fw);
      fx.setX(fx.getX() + fy);
      fx.setX1(fx.getX1() + fy)
    }
  };
  dy.prototype.moveAllOnY = function (fy) {
    fn.prototype.moveAllOnY.call(this, fy);
    for (var fw = 0; fw < this.actions.size(); fw++) {
      var fx = this.actions.get(fw);
      fx.setY(fx.getY() + fy);
      fx.setY1(fx.getY1() + fy)
    }
  };
  function ec() {
    this.linethickness = 0;
    this.borderColor;
    this.rondedCorner = 0;
    this.fill = false;
    this.fillColor;
    this.C = fn;
    this.C()
  }
  
  FMath_extend(ec, fn);
  ec.prototype.isFill = function () {
    return this.fill
  };
  ec.prototype.setFill = function (fw) {
    this.fill = fw
  };
  ec.prototype.getLinethickness = function () {
    return this.linethickness
  };
  ec.prototype.setLinethickness = function (fw) {
    this.linethickness = fw
  };
  ec.prototype.getBorderColor = function () {
    return this.borderColor
  };
  ec.prototype.setBorderColor = function (fw) {
    this.borderColor = fw
  };
  ec.prototype.getFillColor = function () {
    return this.fillColor
  };
  ec.prototype.setFillColor = function (fw) {
    this.fillColor = fw
  };
  ec.prototype.getRondedCorner = function () {
    return this.rondedCorner
  };
  ec.prototype.setRondedCorner = function (fw) {
    this.rondedCorner = fw
  };
  function q() {
    this.text;
    this.font;
    this.color;
    this.fontSize = 0;
    this.fontAscent = 0;
    this.flipVertical = false;
    this.shiftY = 0;
    this.shiftX = 0;
    this.superscriptline = 0;
    this.C = fn;
    this.C()
  }
  
  FMath_extend(q, fn);
  q.prototype.getText = function () {
    return this.text
  };
  q.prototype.setText = function (fw) {
    this.text = fw
  };
  q.prototype.getFont = function () {
    return this.font
  };
  q.prototype.setFont = function (fw) {
    this.font = fw
  };
  q.prototype.getFontSize = function () {
    return this.fontSize
  };
  q.prototype.setFontSize = function (fw) {
    this.fontSize = fw
  };
  q.prototype.getFontAscent = function () {
    return this.fontAscent
  };
  q.prototype.setFontAscent = function (fw) {
    this.fontAscent = fw
  };
  q.prototype.getShiftY = function () {
    return this.shiftY
  };
  q.prototype.setShiftY = function (fw) {
    this.shiftY = fw
  };
  q.prototype.getShiftX = function () {
    return this.shiftX
  };
  q.prototype.setShiftX = function (fw) {
    this.shiftX = fw
  };
  q.prototype.getColor = function () {
    return this.color
  };
  q.prototype.setColor = function (fw) {
    this.color = fw
  };
  q.prototype.getSuperscriptline = function () {
    return this.superscriptline
  };
  q.prototype.setSuperscriptline = function (fw) {
    this.superscriptline = fw
  };
  q.prototype.isFlipVertical = function () {
    return this.flipVertical
  };
  q.prototype.setFlipVertical = function (fw) {
    this.flipVertical = fw
  };
  return {MathMLFormula: dd, ApplicationConfiguration: eK}
})();